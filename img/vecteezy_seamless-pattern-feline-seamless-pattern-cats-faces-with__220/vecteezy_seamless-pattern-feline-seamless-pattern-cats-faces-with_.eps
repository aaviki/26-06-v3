%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: cat_pattern_03.eps
%%Creator: Adobe Illustrator(R) 24.1
%%For: Tania Kiseleva
%%CreationDate: 1/2/2022
%%BoundingBox: 0 0 2400 2400
%%HiResBoundingBox: 0 0 2400 2400
%%CropBox: 0 0 2400 2400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.1.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.1.2 x408 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 36023 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%CFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCACFCAFFCFFFCAFFCFFFCA
%FFCFFFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCACFCAFFCFFFCA
%FFCFFFCAFFCFFFCAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFCACFA7C9A7CFC9CA
%A7CFCACFA8CFCACFA8CFCACAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFCACFA7C9
%A7CFC9CAA7CFCACFA8CFCACFA8CFCACACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFC9CFC9CFCAFFCACFC9CFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFC9CFC9CFCAFFCACFC9CFCFCFCAFFCACFCAFFCACACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFA7CAA7CFCACFA8CFCACFA7CFCACFA8CFCACFA8CACACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFA7CAA7CFCACFA8CFCACFA7CFCACFA8CFCACF
%A8CAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFFCAFFC9CFCA
%FFCFFFCAFFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFFCA
%FFC9CFCAFFCFFFCAFFCAC9CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFA7CFA8CFCACFCACFA7CFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFA7CFA8CFCACFCACFCFCACFCACFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCACFCACFCACFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAA8CFA7CA
%A7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CAA8CFA8CFCACF
%A8CFA7CAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CAA8CF
%A8CFCACFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCACFCAFFCFFFCAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFA7CFA8CFCACFCFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCFCFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCF
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACAA7CFCACAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACAA7CFCACAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A7CACACFA8CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCACFC9CFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCACFC9CFCACFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCAFFCAFFCFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA7CACACFA8CFA7CAA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACFA8CFA7CAA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFC9CFC9CFCAFFCACFCACFC9
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFC9FFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFC9CFC9CFCAFFCA
%CFCACFC9CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFC9FFCACFCA
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACFA7CA
%CACFA8CFCACFA7C9A8CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACA
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CA
%CACFA7CACACFA8CFCACFA7C9A8CFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACAA8CFCACFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCACFCAFFCACFCFFFCAFFCFFFCACFC9CFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFCFC9FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCACFCAFFCACFCFFFCAFFCFFFCACFC9CFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFCFC9FFCFFFCAA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CACACAA8CFCACFA8CFCACFA7CAC9CFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACACACFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CACACAA8CFCACFA8CFCACFA7CAC9CF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACACACFCACFCFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCF
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCA
%CFCAFFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCA
%FFCACACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CA
%CACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA7CACACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA7CFCACFA8CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCACFCAFFCFFFCACFC9FFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCACFCAFFCFFFCACFC9FFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCACFCFFFCAFFCFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFA7C9A7CFCACAA7CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACAA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA7C9A7CFCACAA7CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA8CFCACFA8CFFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFC9CFCACFCA
%FFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCAFFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFC9
%CFCACFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCAFFCA
%FFCACFCAA8CFCACFA8CFCACFA8CFCACFA8CAA7CAA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACA
%A7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CAA7CAA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACAA7CFCACFA8CFCACFFFCFFFCAFFCFFFCAFFCFFFCACFCAFFC9CFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFCFC9FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCA
%FFC9CFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFCFC9FFCFFFCAFFCFFFCAA8CFCACFA8CFCACFA8CF
%CACFA7CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA7CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACFCFCA
%FFCACFCAFFCACFCAFFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACACFA8CFCACFA8CFCACFA8CFA8CAA8CFA8CFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CAA8CF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA8CAA8CFA8CFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CAA8CFA8CFCACFA8CFCACFA8CFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFC9
%CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCACFC9CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCACFA8CFCACFA8CF
%CACFA8CFCACFA7CAC9CAA7CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA7CAC9CAA7CFA7CAA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAA8CFCACFA8CFCACFA8CFCACFA8CAA8CFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A7CFA7CAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CAA8CFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA7CFA7CAA7CFCACFA8CFCACFFFCFFFCAFFCFFFCAFFCFFFCACFCA
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCACFCACFCACFCACFCACFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCACFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCACFCACFCACFCACFCACFCACFCAFFCFFFCAA8CFCACFA8CF
%CACFA8CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFA7CAA7CFCACFCACFCACFCACFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFA7CAA7CFCACFCACFCACFCACFCACFA8CF
%CACFCFCAFFCACFCAFFCACFCACFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCFCFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCACFCFCFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCFCFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFC9
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFCFC9FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFC9CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFC9CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCFCFC9FFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCFCFC9FFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFA8CFA8CFA7CFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA8CFA8CFA7CFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFFFCFFFCACFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCACFC9CFCACFCACFC9CFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCACFC9CFCACFCA
%CFC9CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAA8CF
%CACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFCACFCACAA7CFCACF
%A8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFCACFCACA
%A7CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFCFCACFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFC9CFCACFCAFFCACFCAFFCACFC9FFCFCFC9CFCFCFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCACFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFC9CFCACFCAFFCACFCAFFCACFC9FFCFCFC9CFCFCFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACACAA7CFCACAA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA7CAA7CFA8CFCACFA8CFCACFA8CFCACAA8CFCACFA7CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACAA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA7CAA7CFA8CFCACFA8CFCACFA8CFCACAA8CFCACF
%A7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCFC9CFCACFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFCFC9CFCAFFCAFFCFFFCAFFCFFFCAFFCFFFC9
%FFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCACFC9CFCA
%CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFC9CFCAFFCAFFCFFFCAFFCFFFCA
%FFCFFFC9FFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCA
%CACFA8CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACAA8CFCACFA8CFCACF
%A8CFCACFA8CFCACAA7CFCACFCACFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA7CACACFA8CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACAA8CFCACF
%A8CFCACFA8CFCACFA8CFCACAA7CFCACFCACFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA7CFFFCACFCACFC9CFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCFCFC9CFCACFCAFFCACFCA
%FFCACFCAFFCACFC9CFC9CFCAFFCACFCACFC9CFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCFCFC9CFCACFCA
%FFCACFCAFFCACFCAFFCACFC9CFC9CFCAA8CFCACFA7C9A8CFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFA7CA
%A8CFCACFA8CFCACFA8CFCACFA7CACACFA7CACACFA8CFCACFA7C9A8CFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACA
%A7CFA7CAA8CFCACFA8CFCACFA8CFCACFA7CACACFA7CACACFFFCFFFCACFC9
%CFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCACFCACFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCACFCFFFCAFFCF
%FFCACFC9CFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCACFCACFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCACFCF
%FFCAA8CFCACFA7CAC9CFA8CFCACFA8CFCACACACFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CA
%CACAA8CFCACFA8CFCACFA7CAC9CFA8CFCACFA8CFCACACACFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CACACAA8CFCACFCFCAFFCFCFCAFFCACFCAFFCACFCACFCAFFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCACFCACFCAFFCACFCAFFCFCFCAFFCACFCAFFCACFCACFCA
%FFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACACFA8CFA7CFA8CFCACFA8CF
%CACFA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACFA8CFCACFA8CFA7CFA8CF
%CACFA8CFCACFA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACFA8CFFFCACFC9
%FFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCACFCAFFCF
%FFCACFC9FFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCA
%CFCAFFCFC9CAA7CFCACFA8CFCACFA8CFCACFA7CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFA7C9A7CFCACAA7CFCACFA8CFCACFA8CFCACFA7CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFA7C9A7CFCFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCACFC9CFCACFCAFFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCACFC9CFCAA8CFCACFA8CFCACFA8CF
%CACFA8CAA7CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CAA7CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFFFCF
%FFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFCACFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFCACFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFCFCAFFCACFCAFFCFCFCACFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFC9CFCACFC9CFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCFCFCACFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFC9CFCACFC9
%CFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACACFA8CFCACFA7CA
%A7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CAA7CAA8CFCACF
%A8CFCACFA7CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA7CAA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CAA7CA
%A8CFCACFA8CFCACFA7CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%FFCAFFCACFC9CFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCACFCA
%CFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCACFC9CFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%CFCACFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFCACFA7CAC9CFCACFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA7CAC9CFCACFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCACFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCAFFC9CFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCACFCAFFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCAFFC9CFCACFCAFFCACFCAFFCACFCAFFCACFCAA7CACACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA7CA
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CF
%CACFCFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCACFCAFFCFFFCAFFCF
%FFCAFFCFFFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCACFCAFFCF
%FFCAFFCFFFCAFFCFFFCAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFCACFC9C9A7CF
%C9CAA7CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFCACF
%C9C9A7CFC9CAA7CFCACFA8CFCACFA8CFCACACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFC9CFC9CFCAFFCACFC9CFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFC9CFC9CFCAFFCACFC9CFCFCFCAFFCACFCAFFCACACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFA7CAA7CFCACFA8CFCACFA7CFCACFA8CFCACFA8CA
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFA7CAA7CFCACFA8CFCACFA7CFCACFA8CF
%CACFA8CAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFFCAFFC9
%CFCAFFCFFFCAFFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCF
%FFCAFFC9CFCAFFCFFFCAFFCAC9CFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFA7CFA8CFCACFCACFA7CFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFA7CFA8CFCACFCACFCFCACFCACFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCACFCACFCACFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAA8CF
%A7CAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CAA8CFA8CF
%CACFA8CFA7CAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CA
%A8CFA8CFCACFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCACFCAFFCFFFCAA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFA7CFA8CFCACFCFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCFCFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%CFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCA
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACAA7CFCACAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CA
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACAA7CFCACAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA7CACACFA8CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCACFC9CFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCACFC9CFCACFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCAFFCAFFCFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACFA8CFA7CAA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACFA8CFA7CAA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFC9CFC9CFCAFFCACFCA
%CFC9CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFC9FFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFC9CFC9CFCA
%FFCACFCACFC9CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFC9FFCA
%CFCAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACF
%A7CACACFA8CFCACFA7C9A8CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A7CACACFA7CACACFA8CFCACFA7C9A8CFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACAA8CFCACFFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCACFCAFFCACFCFFFCAFFCFFFCACFC9CFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFCFC9FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCACFCAFFCACFCFFFCAFFCFFFCACFC9CFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFCFC9FFCFFFCAA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CACACAA8CFCACFA8CFCACFA7CAC9CFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACACACFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CACACAA8CFCACFA8CFCACFA7CA
%C9CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACACACFCACFCFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCA
%FFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCA
%FFCACFCAFFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCA
%CFCAFFCACACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A7CACACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA7CACACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA7CFCACFA8CFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCACFCAFFCFFFCACFC9FFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCACFCAFFCFFFCACFC9FFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCACFCFFFCAFFCFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA7C9A7CFCACAA7CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA7C9A7CFCACAA7CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA8CFCACFA8CFFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFC9CFCA
%CFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCAFFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%CFC9CFCACFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCA
%FFCAFFCACFCAA8CFCACFA8CFCACFA8CFCACFA8CAA7CAA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CAA7CAA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACAA7CFCACFA8CFCACFFFCFFFCAFFCFFFCAFFCFFFCACFCAFFC9
%CFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFCFC9FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%CFCAFFC9CFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFCFC9FFCFFFCAFFCFFFCAA8CFCACFA8CFCACF
%A8CFCACFA7CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA7CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA7CFA8CFCACFA8CFCACF
%CFCAFFCACFCAFFCACFCAFFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCFCFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACACFA8CFCACFA8CFCACFA8CFA8CAA8CFA8CFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CA
%A8CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA8CAA8CFA8CF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CAA8CFA8CFCACFA8CFCACFA8CFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%CFC9CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCACFC9CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCACFA8CFCACF
%A8CFCACFA8CFCACFA7CAC9CAA7CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA7CAC9CAA7CFA7CAA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAA8CFCACFA8CFCACFA8CFCACFA8CAA8CFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA7CFA7CAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CAA8CF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA7CFA7CAA7CFCACFA8CFCACFFFCFFFCAFFCFFFCAFFCFFFCA
%CFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCACFCACFCACFCACFCACFCACFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCACFCACFCACFCACFCACFCACFCAFFCFFFCAA8CFCACF
%A8CFCACFA8CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFA7CAA7CFCACFCACFCACFCACFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFA7CAA7CFCACFCACFCACFCACFCACF
%A8CFCACFCFCAFFCACFCAFFCACFCACFCFCFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCFCFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCFCFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCFCFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%CFC9FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFCFC9FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFC9CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFC9CFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCFCFC9FFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCFCFC9FFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA8CFA8CFA7CFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFA8CFA8CFA7CFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFFFCFFFCACFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCACFC9CFCACFCACFC9
%CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%CFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCACFC9CFCA
%CFCACFC9CFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%A8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFCACFCACAA7CF
%CACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFCACF
%CACAA7CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFCFCACFCFCFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFC9CFCACFCAFFCACFCAFFCACFC9FFCFCFC9CFCFCFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCACFCFCFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFC9CFCACFCAFFCACFCAFFCACFC9FFCFCFC9CFCFCFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACACAA7CFCACAA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA7CAA7CFA8CFCACFA8CFCACFA8CFCACAA8CFCACFA7CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACAA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA7CAA7CFA8CFCACFA8CFCACFA8CFCACAA8CF
%CACFA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCFC9CFCACFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFCFC9CFCAFFCAFFCFFFCAFFCFFFCAFFCF
%FFC9FFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCACFC9
%CFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFCFC9CFCAFFCAFFCFFFCAFFCF
%FFCAFFCFFFC9FFCFFFCAFFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCACACFA8CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACAA8CFCACFA8CF
%CACFA8CFCACFA8CFCACAA7CFCACFCACFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA7CACACFA8CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACAA8CF
%CACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFCACFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA7CFFFCACFCACFC9CFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCFCFC9CFCACFCAFFCA
%CFCAFFCACFCAFFCACFC9CFC9CFCAFFCACFCACFC9CFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCFCFC9CFCA
%CFCAFFCACFCAFFCACFCAFFCACFC9CFC9CFCAA8CFCACFA7C9A8CFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CF
%A7CAA8CFCACFA8CFCACFA8CFCACFA7CACACFA7CACACFA8CFCACFA7C9A8CF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACAA7CFA7CAA8CFCACFA8CFCACFA8CFCACFA7CACACFA7CACACFFFCFFFCA
%CFC9CFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCACFCACFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCACFCFFFCA
%FFCFFFCACFC9CFCAFFCFFFCAFFCFCFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCACFCACFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCA
%CFCFFFCAA8CFCACFA7CAC9CFA8CFCACFA8CFCACACACFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CACACAA8CFCACFA8CFCACFA7CAC9CFA8CFCACFA8CFCACACACFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CACACAA8CFCACFCFCAFFCFCFCAFFCACFCAFFCACFCACFCAFFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCACFCACFCAFFCACFCAFFCFCFCAFFCACFCAFFCACFCA
%CFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCACFCACFCAFFCACACFA8CFA7CFA8CFCACF
%A8CFCACFA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACFA8CFCACFA8CFA7CF
%A8CFCACFA8CFCACFA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CACACFA8CFFFCA
%CFC9FFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCACFCA
%FFCFFFCACFC9FFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCACFCAFFCFC9CAA7CFCACFA8CFCACFA8CFCACFA7CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFA7C9A7CFCACAA7CFCACFA8CFCACFA8CFCACFA7CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFA7C9A7CFCFCAFFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCACFC9CFCACFCAFFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFC9CFCAA8CFCACFA8CFCACF
%A8CFCACFA8CAA7CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CAA7CFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%FFCFFFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFCACFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFCACFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFCFCAFFCACFCAFFCFCFCACFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFC9CFCACFC9CFCA
%CFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCFCFCA
%CFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCACFCACFC9CFCA
%CFC9CFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACACFA8CFCACF
%A7CAA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CAA7CAA8CF
%CACFA8CFCACFA7CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFCACFA7CAA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CA
%A7CAA8CFCACFA8CFCACFA7CFA7CAA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A8CFFFCAFFCACFC9CFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCA
%CFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCACFC9CFCACFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCACFCACFCACFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCACFCAFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFCACFA7CAC9CFCACFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CFCACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA7CAC9CFCACFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACF
%A7CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCACFCAFFCAFFCACFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCAFFC9CFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFCAFFCACFCAFFCACFCAFFCACFCACFCAFFCAFFCACFCAFFCACFCAFFCA
%CFCAFFCACFCAFFCAFFC9CFCACFCAFFCACFCAFFCACFCAFFCACFCAA7CACACF
%A8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACFA8CFCACF
%A7CACACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CFCACFA8CF
%CACFA8CFCACFA8CFCACFA8CFCACFA8CFCACAA7CFCACFA8CFCACFA8CFCACF
%A8CFCACF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164360, 2020/02/13-01:07:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">cat_pattern_03</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Seamless pattern. Feline seamless pattern. Cats faces with lines on a beige background.</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>cat</rdf:li>
               <rdf:li>pet</rdf:li>
               <rdf:li>cute</rdf:li>
               <rdf:li>animal</rdf:li>
               <rdf:li>kitten</rdf:li>
               <rdf:li>breed</rdf:li>
               <rdf:li>playful</rdf:li>
               <rdf:li>furry</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>kitty</rdf:li>
               <rdf:li>pets</rdf:li>
               <rdf:li>funny</rdf:li>
               <rdf:li>happy</rdf:li>
               <rdf:li>symbol</rdf:li>
               <rdf:li>friend</rdf:li>
               <rdf:li>lovely</rdf:li>
               <rdf:li>little</rdf:li>
               <rdf:li>meow</rdf:li>
               <rdf:li>cartoon</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>sign</rdf:li>
               <rdf:li>sketch</rdf:li>
               <rdf:li>doodle</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>love</rdf:li>
               <rdf:li>adorable</rdf:li>
               <rdf:li>fun</rdf:li>
               <rdf:li>silhouette</rdf:li>
               <rdf:li>feline</rdf:li>
               <rdf:li>care</rdf:li>
               <rdf:li>pretty</rdf:li>
               <rdf:li>pattern</rdf:li>
               <rdf:li>seamless</rdf:li>
               <rdf:li>texture</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>ornament</rdf:li>
               <rdf:li>shape</rdf:li>
               <rdf:li>backdrop</rdf:li>
               <rdf:li>element</rdf:li>
               <rdf:li>striped</rdf:li>
               <rdf:li>face</rdf:li>
               <rdf:li>beige</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>striped</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:CreatorTool>Adobe Illustrator 24.1 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2022-01-02T16:55:48+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2022-01-02T16:55:49+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2022-01-02T16:55:49+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAlgCWAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAlgAAAAEA&#xA;AQCWAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9GogRQq9AKDMACnMJbxV2KuxV2KuxV2KuxV2KuxV2KoaSd3LJEQDuopuSelf&#xA;YZVKZOwZgVzVFgKIFWRhxFB0I29iMkIUObEybEjKwWUAV2Vx0P8AQ4RIjmtdypkkLJmKxMR1pt88&#xA;EjQSOa5ECKFXoBQYQKQS3irsVdirsVdirsVdirsVdirsVQ0k7uWSIgHdRTck9K+wyqUydgzArmqL&#xA;AUQKsjDiKDoRt7EZIQoc2Jk2JGVgsoArsrjof6HCJEc1ruVMkhZMxWJiOtNvngkaCRzWrKVHGUEM&#xA;P2gCQffbIiVc1ruVQQQCO/iKfryYQ7FXYq7FXYq7FXYq7FXYq7FXAAdBTGldirTKrKVYVB6jEi1W&#xA;RMQTGxqy9D4qehyMT0Se9e6h0KnowocJFhAU1lKjjKCGH7QBIPvtkRKuaa7lUEEAjv4in68mEOxV&#xA;2KuxV2KuxV2KuxV2KuxVwAHQUxpXYq0yqylWFQeoxItVkTEExsasvQ+KnocjE9EnvXuodCp6MKHC&#xA;RYQG8KuxV2KuxV2KuxV2KuxVTdmZ/TQ8T1dvAeA9zkSbNBIbhLEMrGrIxWvj3H4HGJUr8kh2KuxV&#xA;2Kqcuzxv4Hifk2366ZGXMFIVMkh2KuxV2KuxV2KuxV2KuxVTdmZ/TQ8T1dvAeA9zkSbNBIbhLEMr&#xA;GrIxWvj3H4HGJUr8kh2KuxV2Kqcuzxv4Hifk2366ZGXMFIVMkh2KuxV2KuxV2KuxVTMxLEIhfiaE&#xA;7AV+nI8XcmlolklJVBwANGc0P/A4BInkmqbFtDuSCWPViTX78eAI4ip20n72SPrRqlid+gHb5ZGB&#xA;3ITIbWictYuxV2KuxVTuP7o/MU+dRkZ8kx5qmSQ7FXYq7FXYq7FXYqpmYliEQvxNCdgK/TkeLuTS&#xA;0SySkqg4AGjOaH/gcAkTyTVNi2h3JBLHqxJr9+PAEcRU7aT97JH1o1SxO/QDt8sjA7kJkNrROWsX&#xA;Yq7FXYqp3H90fmKfOoyM+SY81TJIdirsVdirsVdirsVQ8xeIPx+w/wC0P2SdifllcrDIbq6qqqFU&#xA;UA2GWAUxbJABJNAOpxVQhjYky8mAc1Cmn2e1ajK4jqyJ6K+WMXYq7FXYqpzblE/mYE/Jd8jLoEhU&#xA;ySHYq7FXYq7FXYq7FUPMXiD8fsP+0P2SdifllcrDIbq6qqqFUUA2GWAUxbJABJNAOpxVQhjYky8m&#xA;Ac1Cmn2e1ajK4jqyJ6K+WMXYq7FXYqpzblE/mYE/Jd8jLoEhUySHYq7FXYqsM0QbiWHLwwcQTRX4&#xA;UOxVp1LIVrSu1f8AbwEWFCHgjuowVqCo6Bt/xGVwjIMiQVX0mc/vWBX+QCg+nxyfDfNF9ypkkOxV&#xA;2KuxVxIAJJoBuTiqnECzGVhSuyA9l/tyMd90nuVMkh2KuxV2KrDNEG4lhy8MHEE0V+FDsVadSyFa&#xA;0rtX/bwEWFCHgjuowVqCo6Bt/wARlcIyDIkFV9JnP71gV/kAoPp8cnw3zRfcqZJDsVdirsVcSACS&#xA;aAbk4qpxAsxlYUrsgPZf7cjHfdJ7lTJIdirsVdiqHHAQTI3VeRcfOpB+7K9qIZdQrpXgtetBXLBy&#xA;YlvFXYq7FXYq7FXYq7FWnYKtSCfYCpxJpQp8HkNZBxQdI/8Amr+mQonmm6Vcmh2KuxV2KuxVDjgI&#xA;JkbqvIuPnUg/dle1EMuoV0rwWvWgrlg5MS3irsVdirsVdirsVdirTsFWpBPsBU4k0oU+DyGsg4oO&#xA;kf8AzV/TIUTzTdKuTQ7FXYq7FXYqoTossgQbEfbcdh4fTlchxGmQNL+M46SKfmv9CMlR70bLkDiv&#xA;Jg3hQU/rhF9UFdhV2KuxV2KuxV2KuxVr1I/5h94wWFpsEHpvhV2KuxV2KuxVQnRZZAg2I+247Dw+&#xA;nK5DiNMgaX8Zx0kU/Nf6EZKj3o2XIHFeTBvCgp/XCL6oK7CrsVdirsVdirsVdirXqR/zD7xgsLTY&#xA;IPTfCrsVdirsVWOsrGgfinsPi+85EglIpciKi8VFBhApBLeFXYq7FXYq7FXYqteVUIHVj0UbnAZU&#xA;oC2k79T6a+C7t952wUT5J2d9Xi/aHM+LHl+vHgC8RXelH/Iv3DDwhFlyxRK3JUAbxApiIgLZXYVd&#xA;irsVWOsrGgfinsPi+85EglIpciKi8VFBhApBLeFXYq7FXYq7FXYqteVUIHVj0UbnAZUoC2k79T6a&#xA;+A3b7ztgonyTs76vF+0OZ8WPL9ePAF4iu9KP+RfuGHhCLLliiVuSoA3iBTERAWyuwq7FXYq7FXYq&#xA;7FXYq7FXYq7FVkrsCET7bdCegHc5GR6BIDccaoNt2P2mPU4RGkErsKuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxVZK7AhE+23QnoB3ORkegSA3HGqDbdj9pj1OERpBK7CrsVdirsVdiqm7Mz+mh4nq7eA&#xA;8B7nIk2aCQ3CWIZWNWRitfHuPwOMSpX5JDsVdirTOqLyY0HicSaWlnOV/sLxX+Zv4L/XI2TyTQd6&#xA;AP22Zz7mg+4Ux4O9bd9Xt/8Afa/cMeCPcvEVNIE9WTiShUgDie1K9OnfIiAspJ2VFd1YJJTfZXHQ&#xA;+x8DkgSNiilTJIdirsVdirsVU3Zmf00PE9XbwHgPc5EmzQSG4SxDKxqyMVr49x+BxiVK/JIdirsV&#xA;aZ1ReTGg8TiTS0s5yv8AYXiv8zfwX+uRsnkmg70Aftszn3NB9wpjwd6276vb/wC+1+4Y8Ee5eIqa&#xA;QJ6snElCpAHE9qV6dO+REBZSTsqK7qwSSm+yuOh9j4HJAkbFFKmSQ7FXYq7FXYqpC2h3JBLHqxJr&#xA;9+Q4AniKnbSfvZI+tGqWJ36AdvlkYHchMhtaJy1i7FXYqsES8+Zqzdie3ywcO9ptfhQ7FXYqpPWO&#xA;T1ACUYUem5FOhpkDsbSN1s0sTx8UYM7U4gGprXr9GCUgRskBXyxi7FXYqpmYliEQvxNCdgK/TkeL&#xA;uTS0SySkqg4AGjOaH/gcAkTyTVNi2h3JBLHqxJr9+PAEcRU7aT97JH1o1SxO/QDt8sjA7kJkNrRO&#xA;WsXYq7FVgiXnzNWbsT2+WDh3tNr8KHYq7FVJ6xyeoASjCj03Ip0NMgdjaRutmliePijBnanEA1Na&#xA;9fowSkCNkgK+WMXYq7FVMzEsQiF+JoTsBX6cjxdyaWiWSUlUHAA0ZzQ/8DgEieSapWJABJNAOpyb&#xA;FQhjYky8mAc1Cmn2e1ajK4jqyJ6K+WMVk5+Ffd0/4kMjLkkL8kh2KuxV2KuxV2KuxV2KuxV2KoeY&#xA;vEH4/Yf9ofsk7E/LK5WGQ3V1VVUKooBsMsApi2SACSaAdTiqhDGxJl5MA5qFNPs9q1GVxHVkT0V8&#xA;sYrJz8K+7p/xIZGXJIX5JDsVdirsVdirsVdirsVdirsVQ8xeIPx+w/7Q/ZJ2J+WVysMhurqqqoVR&#xA;QDYZYBTFZ6TOf3rAr/IBQfT45Hhvmm+5UySHYqpyfFKiD9n42+Q2H45E7kBI5KmSQ7FXYq7FXYq7&#xA;FXYq7FXYq7FWnUshWtK7V/28BFhQh4I7qMFagqOgbf8AEZXCMgyJBVfSZz+9YFf5AKD6fHJ8N80X&#xA;3KmSQ7FVOT4pUQfs/G3yGw/HIncgJHJUySHYq7FXYq7FXYq7FXYq7FXYq06lkK1pXav+3gIsKEPB&#xA;HdRgrUFR0Db/AIjK4RkGRIKJy1i0zKoqxAHidsSaVTMrNtEtf8ttl/tyHFfJNd6+OMIDvyZt2Y98&#xA;kBSCV2FXYq7FVrzRqaM3xfyjc/cMBkAoC31WP2Y2PuaD9Zrg4vJNO5zf77H/AAX9mNnuWg71ZB9q&#xA;JqeIIP8AGuPEe5aXJIjiqmtOo7j5jCJAoIXYVdirsVdirsVaZlUVYgDxO2JNKpmVm2iWv+W2y/25&#xA;Divkmu9fHGEB35M27Me+SApBK7CrsVdiq15o1NGb4v5RufuGAyAUBb6rH7MbH3NB+s1wcXkmnc5v&#xA;99j/AIL+zGz3LQd6sg+1E1PEEH+NceI9y0uSRHFVNadR3HzGESBQQuwq7FXYq7FVIu7sVj2UbNId&#xA;9/AZCyeSapcsEYPIjk38zbnCIhbX5JDsVdirsVUuEr7yHiv8in9bf0yFE803SoiIgoqgD2yQAHJB&#xA;LeFXYq7FVOZNvUTaRRsfEeByMh1HNIK9WDKGHQio+nJA2hvFXYq7FVIu7sVj2UbNId9/AZCyeSap&#xA;csEYPIjk38zbnCIhbX5JDsVdirsVUuEr7yHiv8in9bf0yFE803SoiIgoqgD2yQAHJBLeFXYq7FVO&#xA;ZNvUTaRRsfEeByMh1HNIK9WDKGHQio+nJA2hvFXYq7FWkQIoVegFBiBSkt4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUNJO7lkiIB3UU3JPSvsMqlMnYMwK5qiwFECrIw4ig6EbexGSEKHNiZNiRlYLKAK7K46H+h&#xA;wiRHNa7lTJIWTMViYjrTb54JGgkc1yIEUKvQCgwgUglvFXYq7FXYq7FXYq7FXYq7FXYqhpJ3cskR&#xA;AO6im5J6V9hlUpk7BmBXNUWAogVZGHEUHQjb2IyQhQ5sTJsSMrBZQBXZXHQ/0OESI5rXcqZJCyZi&#xA;sTEdabfPBI0EjmtWUqOMoIYftAEg++2REq5rXcqgggEd/EU/Xkwh2KuxV2KuxV2KuxV2KuxV2KuA&#xA;A6CmNK7FWmVWUqwqD1GJFqsiYgmNjVl6HxU9DkYnok9691DoVPRhQ4SLCAprKVHGUEMP2gCQffbI&#xA;iVc013KoIIBHfxFP15MIdirsVdirsVdirsVdirsVdirgAOgpjSuxVplVlKsKg9RiRarImIJjY1Ze&#xA;h8VPQ5GJ6JPevdQ6FT0YUOEiwgN4VdirsVdirsVdirsVdiqm7Mz+mh4nq7eA8B7nIk2aCQ3CWIZW&#xA;NWRitfHuPwOMSpX5JDsVdirsVU5dnjfwPE/Jtv10yMuYKQqZJDsVdirsVdirsVdirsVdiqm7Mz+m&#xA;h4nq7eA8B7nIk2aCQ3CWIZWNWRitfHuPwOMSpX5JDsVdirsVU5dnjfwPE/Jtv10yMuYKQqZJDsVd&#xA;irsVdirsVdiqmZiWIRC/E0J2Ar9OR4u5NLRLJKSqDgAaM5of+BwCRPJNU2LaHckEserEmv348ARx&#xA;FTtpP3skfWjVLE79AO3yyMDuQmQ2tE5axdirsVdiqncf3R+Yp86jIz5JjzVMkh2KuxV2KuxV2Kux&#xA;VTMxLEIhfiaE7AV+nI8XcmlolklJVBwANGc0P/A4BInkmqbFtDuSCWPViTX78eAI4ip20n72SPrR&#xA;qlid+gHb5ZGB3ITIbWictYuxV2KuxVTuP7o/MU+dRkZ8kx5qmSQ7FXYq7FXYq7FXYqh5i8Qfj9h/&#xA;2h+yTsT8srlYZDdXVVVQqigGwywCmLZIAJJoB1OKqEMbEmXkwDmoU0+z2rUZXEdWRPRXyxi7FXYq&#xA;7FVObcon8zAn5LvkZdAkKmSQ7FXYq7FXYq7FXYqh5i8Qfj9h/wBofsk7E/LK5WGQ3V1VVUKooBsM&#xA;sApi2SACSaAdTiqhDGxJl5MA5qFNPs9q1GVxHVkT0V8sYuxV2KuxVTm3KJ/MwJ+S75GXQJCpkkOx&#xA;V2KuxVYZog3EsOXhg4gmivwodirTqWQrWldq/wC3gIsKEPBHdRgrUFR0Db/iMrhGQZEgqvpM5/es&#xA;Cv8AIBQfT45Phvmi+5UySHYq7FXYq4kAEk0A3JxVTiBZjKwpXZAey/25GO+6T3KmSQ7FXYq7FVhm&#xA;iDcSw5eGDiCaK/Ch2KtOpZCtaV2r/t4CLChDwR3UYK1BUdA2/wCIyuEZBkSCq+kzn96wK/yAUH0+&#xA;OT4b5ovuVMkh2KuxV2KuJABJNANycVU4gWYysKV2QHsv9uRjvuk9ypkkOxV2KuxVDjgIJkbqvIuP&#xA;nUg/dle1EMuoV0rwWvWgrlg5MS3irsVdirsVdirsVdirTsFWpBPsBU4k0oU+DyGsg4oOkf8AzV/T&#xA;IUTzTdKuTQ7FXYq7FXYqhxwEEyN1XkXHzqQfuyvaiGXUK6V4LXrQVywcmJbxV2KuxV2KuxV2KuxV&#xA;p2CrUgn2AqcSaUKfB5DWQcUHSP8A5q/pkKJ5pulXJodirsVdirsVUJ0WWQINiPtuOw8PpyuQ4jTI&#xA;Gl/GcdJFPzX+hGSo96NlyBxXkwbwoKf1wi+qCuwq7FXYq7FXYq7FXYq16kf8w+8YLC02CD03wq7F&#xA;XYq7FXYqoTossgQbEfbcdh4fTlchxGmQNL+M46SKfmv9CMlR70bLkDivJg3hQU/rhF9UFdhV2Kux&#xA;V2KuxV2KuxVr1I/5h94wWFpsEHpvhV2KuxV2KrHWVjQPxT2HxfeciQSkUuRFReKigwgUglvCrsVd&#xA;irsVdirsVWvKqEDqx6KNzgMqUBbSd+p9NfBd2+87YKJ8k7O+rxftDmfFjy/XjwBeIrvSj/kX7hh4&#xA;Qiy5YolbkqAN4gUxEQFsrsKuxV2KrHWVjQPxT2HxfeciQSkUuRFReKigwgUglvCrsVdirsVdirsV&#xA;WvKqEDqx6KNzgMqUBbSd+p9NfBd2+87YKJ8k7O+rxftDmfFjy/XjwBeIrvSj/kX7hh4Qiy5Yolbk&#xA;qAN4gUxEQFsrsKuxV2KuxV2KuxV2KuxV2KuxVZK7AhE+23QnoB3ORkegSA3HGqDbdj9pj1OERpBK&#xA;7CrsVdirsVdirsVdirsVdirsVdirsVdirsVWSuwIRPtt0J6AdzkZHoEgNxxqg23Y/aY9ThEaQSuw&#xA;q7FXYq7FXYqpuzM/poeJ6u3gPAe5yJNmgkNwliGVjVkYrXx7j8DjEqV+SQ7FXYq0zqi8mNB4nEml&#xA;pZzlf7C8V/mb+C/1yNk8k0HegD9tmc+5oPuFMeDvW3fV7f8A32v3DHgj3LxFTSBPVk4koVIA4ntS&#xA;vTp3yIgLKSdlRXdWCSU32Vx0PsfA5IEjYopUySHYq7FXYq7FVN2Zn9NDxPV28B4D3ORJs0EhuEsQ&#xA;ysasjFa+PcfgcYlSvySHYq7FWmdUXkxoPE4k0tLOcr/YXiv8zfwX+uRsnkmg70Aftszn3NB9wpjw&#xA;d6276vb/AO+1+4Y8Ee5eIqaQJ6snElCpAHE9qV6dO+REBZSTsqK7qwSSm+yuOh9j4HJAkbFFKmSQ&#xA;7FXYq7FXYqpC2h3JBLHqxJr9+Q4AniKnbSfvZI+tGqWJ36AdvlkYHchMhtaJy1i7FXYqsES8+Zqz&#xA;die3ywcO9ptfhQ7FXYqpPWOT1ACUYUem5FOhpkDsbSN1s0sTx8UYM7U4gGprXr9GCUgRskBXyxi7&#xA;FXYqpmYliEQvxNCdgK/TkeLuTS0SySkqg4AGjOaH/gcAkTyTVNi2h3JBLHqxJr9+PAEcRU7aT97J&#xA;H1o1SxO/QDt8sjA7kJkNrROWsXYq7FVgiXnzNWbsT2+WDh3tNr8KHYq7FVJ6xyeoASjCj03Ip0NM&#xA;gdjaRutmliePijBnanEA1Na9fowSkCNkgK+WMXYq7FVMzEsQiF+JoTsBX6cjxdyaWiWSUlUHAA0Z&#xA;zQ/8DgEieSapWJABJNAOpybFQhjYky8mAc1Cmn2e1ajK4jqyJ6K+WMVk5+Ffd0/4kMjLkkL8kh2K&#xA;uxV2KuxV2KuxV2KuxV2KoeYvEH4/Yf8AaH7JOxPyyuVhkN1dVVVCqKAbDLAKYtkgAkmgHU4qoQxs&#xA;SZeTAOahTT7PatRlcR1ZE9FfLGKyc/Cvu6f8SGRlySF+SQ7FXYq7FXYq7FXYq7FXYq7FUPMXiD8f&#xA;sP8AtD9knYn5ZXKwyG6uqqqhVFANhlgFMVnpM5/esCv8gFB9PjkeG+ab7lTJIdiqnJ8UqIP2fjb5&#xA;DYfjkTuQEjkqZJDsVdirsVdirsVdirsVdirsVadSyFa0rtX/AG8BFhQh4I7qMFagqOgbf8RlcIyD&#xA;IkFV9JnP71gV/kAoPp8cnw3zRfcqZJDsVU5PilRB+z8bfIbD8cidyAkclTJIdirsVdirsVdirsVd&#xA;irsVdirTqWQrWldq/wC3gIsKEPBHdRgrUFR0Db/iMrhGQZEgonLWLTMqirEAeJ2xJpVMys20S1/y&#xA;22X+3IcV8k13r44wgO/Jm3Zj3yQFIJXYVdirsVWvNGpozfF/KNz9wwGQCgLfVY/ZjY+5oP1muDi8&#xA;k07nN/vsf8F/ZjZ7loO9WQfaianiCD/GuPEe5aXJIjiqmtOo7j5jCJAoIXYVdirsVdirsVaZlUVY&#xA;gDxO2JNKpmVm2iWv+W2y/wBuQ4r5JrvXxxhAd+TNuzHvkgKQSuwq7FXYqteaNTRm+L+Ubn7hgMgF&#xA;AW+qx+zGx9zQfrNcHF5Jp3Ob/fY/4L+zGz3LQd6sg+1E1PEEH+NceI9y0uSRHFVNadR3HzGESBQQ&#xA;uwq7FXYq7FVIu7sVj2UbNId9/AZCyeSapcsEYPIjk38zbnCIhbX5JDsVdirsVUuEr7yHiv8AIp/W&#xA;39MhRPNN0qIiIKKoA9skAByQS3hV2KuxVTmTb1E2kUbHxHgcjIdRzSCvVgyhh0IqPpyQNobxV2Ku&#xA;xVSLu7FY9lGzSHffwGQsnkmqXLBGDyI5N/M25wiIW1+SQ7FXYq7FVLhK+8h4r/Ip/W39MhRPNN0q&#xA;IiIKKoA9skAByQS3hV2KuxVTmTb1E2kUbHxHgcjIdRzSCvVgyhh0IqPpyQNobxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:8ea771ad-a112-c546-ac5b-b1a37e730d02</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:8ea771ad-a112-c546-ac5b-b1a37e730d02</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:ce837968-7733-41a7-99a6-c42e0455f3dc</stRef:instanceID>
            <stRef:documentID>xmp.did:45d600cb-c328-4144-801a-2772de05b4ae</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:620e56d5-389c-af41-9ea8-69ed7aa92c9e</stEvt:instanceID>
                  <stEvt:when>2021-06-13T00:12:09+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8ea771ad-a112-c546-ac5b-b1a37e730d02</stEvt:instanceID>
                  <stEvt:when>2022-01-02T16:55:49+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2400.000000</stDim:w>
            <stDim:h>2400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 905 C</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>156</xmpG:green>
                           <xmpG:blue>166</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 911 C</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>165</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 9161 C</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>231</xmpG:red>
                           <xmpG:green>217</xmpG:green>
                           <xmpG:blue>185</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2400 li
2400 2400 li
2400 0 li
cp
clp
gsave
2400 2400 mo
0 2400 li
0 0 li
2400 0 li
2400 2400 li
cp
clp
2400 2400 mo
0 2400 li
0 0 li
2400 0 li
2400 2400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.976471 .909804 .831373 rgb
f
687.964 187.279 mo
692.002 197.238 693.56 208.589 694.146 219.257 cv
694.702 229.346 693.987 239.565 692.036 249.503 cv
684.733 240.862 675.09 234.201 664.117 231.223 cv
653.421 228.32 642.181 228.596 631.418 231.038 cv
629.539 231.465 627.681 231.957 625.834 232.487 cv
631.429 222.128 637.681 212.128 644.538 202.557 cv
648.325 197.271 652.297 192.116 656.443 187.105 cv
659.589 183.302 662.935 179.417 667.208 176.831 cv
671.03 174.518 675.663 173.699 679.668 176.072 cv
683.758 178.495 686.233 183.01 687.964 187.279 cv
cp
696.935 271.306 mo
692.62 273.197 688.387 275.287 684.25 277.586 cv
682.585 278.512 681.61 280.285 682.379 282.17 cv
683.033 283.773 685.314 284.958 686.963 284.041 cv
690.939 281.831 695.01 279.801 699.16 277.955 cv
700.282 282.005 701.026 286.158 701.392 290.325 cv
696.513 291.261 691.634 292.196 686.755 293.132 cv
682.337 293.979 683.287 300.917 687.718 300.066 cv
692.356 299.177 696.995 298.287 701.633 297.398 cv
701.628 297.662 701.633 297.927 701.625 298.191 cv
701.449 304.119 700.627 309.959 699.28 315.675 cv
694.02 315.401 688.735 315.416 683.446 315.738 cv
678.939 316.012 679.938 322.944 684.409 322.672 cv
688.737 322.409 693.073 322.371 697.397 322.543 cv
693.168 336.048 686.129 348.744 677.812 360.101 cv
662.993 380.335 642.955 397.325 618.972 405.449 cv
603.167 410.803 585.659 411.851 569.388 407.907 cv
570.982 406.752 572.603 405.63 574.257 404.551 cv
578.029 402.091 573.677 396.605 569.927 399.051 cv
566.879 401.039 563.931 403.165 561.083 405.412 cv
559.985 405.016 558.895 404.598 557.815 404.151 cv
555.176 403.06 552.611 401.817 550.127 400.424 cv
552.078 398.298 554.029 396.171 555.979 394.044 cv
559.017 390.733 553.365 386.596 550.342 389.892 cv
548.276 392.144 546.21 394.396 544.144 396.649 cv
541.819 395.017 539.543 393.285 537.362 391.438 cv
539.687 389.024 541.807 386.407 543.685 383.613 cv
546.188 379.89 540.571 375.707 538.047 379.46 cv
536.301 382.058 534.347 384.466 532.21 386.668 cv
527.524 381.903 523.548 376.508 520.855 370.393 cv
522.105 368.988 522.365 366.762 520.346 365.429 cv
519.791 365.063 519.24 364.689 518.69 364.316 cv
515.584 353.048 517.502 340.982 521.909 330.137 cv
527.063 317.451 535.277 306.157 544.338 295.985 cv
548.229 291.618 552.337 287.443 556.611 283.442 cv
558.618 283.727 560.073 281.987 560.227 280.132 cv
565.306 275.589 570.594 271.277 576.024 267.181 cv
587.797 258.299 600.01 250.417 613.445 244.454 cv
632.032 236.204 654.742 231.622 673.279 242.576 cv
684.323 249.102 692.301 259.506 696.935 271.306 cv
cp
489.377 338.021 mo
485.013 332.851 481.004 327.38 477.396 321.657 cv
474.303 316.752 471.158 311.528 469.562 305.905 cv
468.055 300.599 468.449 295.229 472.202 290.95 cv
476.015 286.6 481.736 284.024 486.98 281.851 cv
497.237 277.599 508.375 275.405 519.479 275.371 cv
529.728 275.339 539.884 277.127 549.474 280.635 cv
548.694 281.39 547.918 282.15 547.15 282.917 cv
536.437 293.615 526.73 305.376 519.553 318.761 cv
513.181 330.644 509.1 344.138 510.403 357.726 cv
510.422 357.923 510.446 358.118 510.468 358.314 cv
502.777 352.286 495.699 345.509 489.377 338.021 cv
cp
670.307 168.077 mo
658.518 170.838 650.452 183.022 643.59 192.051 cv
633.937 204.753 625.432 218.271 617.996 232.383 cv
617.453 233.415 617.492 234.349 617.881 235.099 cv
605.203 239.798 593.322 246.662 582.143 254.214 cv
572.678 260.608 563.619 267.653 555.142 275.325 cv
533.391 266.375 508.315 266.127 486.351 274.564 cv
474.521 279.108 461.251 286.598 461.73 301.036 cv
461.923 306.869 464.22 312.496 466.95 317.576 cv
470.522 324.225 474.688 330.592 479.259 336.593 cv
488.676 348.956 500.048 359.829 512.779 368.738 cv
515.651 377.225 520.722 384.827 527.008 391.345 cv
521.652 395.541 515.481 398.663 508.764 400.547 cv
506.93 401.061 506.244 403.537 506.894 405.131 cv
507.682 407.063 509.667 407.509 511.478 407.001 cv
519.054 404.877 526.092 401.156 532.154 396.22 cv
534.463 398.218 536.883 400.082 539.373 401.85 cv
534.187 407.504 529.001 413.157 523.815 418.811 cv
520.778 422.122 526.43 426.259 529.453 422.963 cv
534.732 417.208 540.012 411.452 545.291 405.697 cv
548.424 407.535 551.676 409.142 555.015 410.531 cv
549.489 415.507 544.413 420.981 539.852 426.885 cv
537.1 430.448 542.73 434.61 545.489 431.038 cv
550.549 424.488 556.262 418.547 562.545 413.251 cv
575.935 417.378 590.36 418.242 604.219 416.16 cv
629.643 412.343 652.342 398.48 670.021 380.188 cv
684.807 364.891 697.868 344.503 704.318 323.008 cv
714.239 323.936 724.049 325.993 733.52 329.157 cv
737.775 330.579 740.374 324.075 736.084 322.642 cv
726.329 319.383 716.294 317.237 706.134 316.202 cv
707.677 309.516 708.542 302.765 708.585 296.064 cv
713.649 295.093 718.713 294.122 723.777 293.15 cv
728.195 292.303 727.246 285.366 722.815 286.216 cv
717.982 287.143 713.149 288.07 708.317 288.997 cv
707.927 284.333 707.109 279.716 705.813 275.184 cv
711.969 272.793 718.283 270.811 724.722 269.28 cv
729.077 268.245 728.143 261.304 723.76 262.345 cv
716.877 263.981 710.13 266.057 703.557 268.58 cv
701.957 264.588 699.953 260.68 697.503 256.887 cv
700.302 245.297 701.569 233.497 701.219 221.556 cv
700.866 209.542 699.105 196.889 694.824 185.602 cv
690.962 175.423 682.406 165.244 670.307 168.077 cv
cp
.929412 .811765 .623529 rgb
f
87.9639 787.279 mo
92.002 797.238 93.5596 808.589 94.1465 819.257 cv
94.7017 829.346 93.9868 839.565 92.0361 849.503 cv
84.7334 840.862 75.0898 834.201 64.1172 831.223 cv
53.4209 828.32 42.1807 828.596 31.4185 831.038 cv
29.5391 831.465 27.6807 831.957 25.8345 832.487 cv
31.4292 822.128 37.6807 812.128 44.5381 802.557 cv
48.3252 797.271 52.2974 792.116 56.4429 787.105 cv
59.5894 783.302 62.9351 779.417 67.208 776.831 cv
71.0303 774.518 75.6631 773.699 79.6685 776.072 cv
83.7583 778.495 86.2329 783.01 87.9639 787.279 cv
cp
96.9346 871.306 mo
92.6201 873.197 88.3867 875.287 84.25 877.586 cv
82.5854 878.512 81.6099 880.285 82.3794 882.17 cv
83.0332 883.773 85.3145 884.958 86.9629 884.041 cv
90.9395 881.831 95.0103 879.801 99.1602 877.955 cv
100.282 882.005 101.026 886.158 101.392 890.325 cv
96.5127 891.261 91.6338 892.196 86.7549 893.132 cv
82.3374 893.979 83.2871 900.917 87.7178 900.066 cv
92.3564 899.177 96.9946 898.287 101.633 897.398 cv
101.628 897.662 101.633 897.927 101.625 898.191 cv
101.449 904.119 100.627 909.959 99.2803 915.675 cv
94.02 915.401 88.7354 915.416 83.4458 915.738 cv
78.939 916.012 79.9375 922.944 84.4087 922.672 cv
88.7373 922.409 93.0728 922.371 97.3975 922.543 cv
93.1685 936.048 86.1289 948.744 77.8115 960.101 cv
62.9927 980.335 42.9551 997.325 18.9722 1005.45 cv
3.16748 1010.8 -14.3408 1011.85 -30.6118 1007.91 cv
-29.0181 1006.75 -27.3975 1005.63 -25.7432 1004.55 cv
-21.9707 1002.09 -26.3232 996.605 -30.0728 999.051 cv
-33.1206 1001.04 -36.0688 1003.16 -38.917 1005.41 cv
-40.0146 1005.02 -41.105 1004.6 -42.1846 1004.15 cv
-44.8242 1003.06 -47.3892 1001.82 -49.8726 1000.42 cv
-47.9219 998.298 -45.9712 996.171 -44.0205 994.044 cv
-40.9829 990.733 -46.6348 986.596 -49.6577 989.892 cv
-51.7241 992.144 -53.79 994.396 -55.856 996.649 cv
-58.1807 995.017 -60.4565 993.285 -62.6377 991.438 cv
-60.3135 989.024 -58.1934 986.407 -56.3154 983.613 cv
-53.8125 979.89 -59.4292 975.707 -61.9526 979.46 cv
-63.6992 982.058 -65.6528 984.466 -67.7896 986.668 cv
-72.4756 981.903 -76.4521 976.508 -79.145 970.393 cv
-77.8945 968.988 -77.6348 966.762 -79.6543 965.429 cv
-80.2095 965.063 -80.7598 964.689 -81.3101 964.316 cv
-84.4155 953.048 -82.498 940.982 -78.0908 930.137 cv
-72.9365 917.451 -64.7231 906.157 -55.6621 895.985 cv
-51.7715 891.618 -47.6631 887.443 -43.3892 883.442 cv
-41.3823 883.727 -39.9272 881.987 -39.7729 880.132 cv
-34.6938 875.589 -29.4058 871.277 -23.9761 867.181 cv
-12.2026 858.299 .00976563 850.417 13.4448 844.454 cv
32.0322 836.204 54.7417 831.622 73.2793 842.576 cv
84.3232 849.102 92.3008 859.505 96.9346 871.306 cv
cp
-110.623 938.021 mo
-114.987 932.851 -118.996 927.38 -122.604 921.657 cv
-125.697 916.751 -128.842 911.528 -130.438 905.905 cv
-131.945 900.599 -131.551 895.229 -127.798 890.95 cv
-123.985 886.6 -118.264 884.024 -113.02 881.851 cv
-102.763 877.599 -91.6245 875.405 -80.5205 875.371 cv
-70.2725 875.339 -60.1162 877.127 -50.5264 880.634 cv
-51.3062 881.39 -52.0815 882.15 -52.8496 882.917 cv
-63.563 893.615 -73.27 905.376 -80.4468 918.761 cv
-86.8188 930.644 -90.8999 944.138 -89.5972 957.726 cv
-89.5781 957.923 -89.5537 958.118 -89.5322 958.314 cv
-97.2227 952.286 -104.301 945.509 -110.623 938.021 cv
cp
70.3071 768.077 mo
58.5176 770.838 50.4521 783.022 43.5903 792.051 cv
33.937 804.753 25.4316 818.271 17.9961 832.383 cv
17.4526 833.415 17.4922 834.349 17.8813 835.099 cv
5.20264 839.798 -6.67822 846.662 -17.8569 854.213 cv
-27.3223 860.608 -36.3809 867.653 -44.8584 875.325 cv
-66.6089 866.375 -91.6851 866.127 -113.649 874.564 cv
-125.479 879.108 -138.749 886.597 -138.27 901.036 cv
-138.077 906.869 -135.78 912.496 -133.05 917.576 cv
-129.478 924.225 -125.313 930.592 -120.741 936.593 cv
-111.324 948.956 -99.9517 959.829 -87.2212 968.738 cv
-84.3486 977.225 -79.2778 984.826 -72.9922 991.345 cv
-78.3481 995.541 -84.5186 998.663 -91.2358 1000.55 cv
-93.0703 1001.06 -93.7563 1003.54 -93.1064 1005.13 cv
-92.3184 1007.06 -90.3335 1007.51 -88.5225 1007 cv
-80.9463 1004.88 -73.9077 1001.16 -67.8457 996.22 cv
-65.5366 998.218 -63.1167 1000.08 -60.627 1001.85 cv
-65.813 1007.5 -70.9985 1013.16 -76.1846 1018.81 cv
-79.2222 1022.12 -73.5703 1026.26 -70.5474 1022.96 cv
-65.2676 1017.21 -59.9883 1011.45 -54.709 1005.7 cv
-51.5757 1007.54 -48.3242 1009.14 -44.9849 1010.53 cv
-50.5107 1015.51 -55.5869 1020.98 -60.1479 1026.89 cv
-62.9004 1030.45 -57.27 1034.61 -54.5107 1031.04 cv
-49.4507 1024.49 -43.7383 1018.55 -37.4551 1013.25 cv
-24.0649 1017.38 -9.63965 1018.24 4.21924 1016.16 cv
29.6426 1012.34 52.3423 998.48 70.021 980.188 cv
84.8066 964.891 97.8682 944.503 104.318 923.008 cv
114.239 923.936 124.049 925.993 133.52 929.157 cv
137.775 930.579 140.374 924.075 136.084 922.642 cv
126.329 919.383 116.294 917.237 106.134 916.202 cv
107.677 909.516 108.542 902.765 108.585 896.064 cv
113.649 895.093 118.713 894.122 123.777 893.15 cv
128.195 892.303 127.246 885.366 122.815 886.216 cv
117.982 887.143 113.149 888.07 108.317 888.997 cv
107.927 884.333 107.109 879.716 105.813 875.184 cv
111.969 872.793 118.283 870.811 124.722 869.28 cv
129.077 868.245 128.143 861.304 123.76 862.345 cv
116.877 863.981 110.13 866.057 103.557 868.58 cv
101.957 864.588 99.9531 860.68 97.5029 856.887 cv
100.302 845.297 101.569 833.497 101.219 821.555 cv
100.866 809.542 99.1055 796.89 94.8237 785.602 cv
90.9624 775.423 82.4063 765.244 70.3071 768.077 cv
cp
f
1887.96 187.279 mo
1892 197.238 1893.56 208.589 1894.15 219.257 cv
1894.7 229.346 1893.99 239.565 1892.04 249.503 cv
1884.73 240.862 1875.09 234.201 1864.12 231.223 cv
1853.42 228.32 1842.18 228.596 1831.42 231.038 cv
1829.54 231.465 1827.68 231.957 1825.83 232.487 cv
1831.43 222.128 1837.68 212.128 1844.54 202.557 cv
1848.33 197.271 1852.3 192.116 1856.44 187.105 cv
1859.59 183.302 1862.94 179.417 1867.21 176.831 cv
1871.03 174.518 1875.66 173.699 1879.67 176.072 cv
1883.76 178.495 1886.23 183.01 1887.96 187.279 cv
cp
1896.93 271.306 mo
1892.62 273.197 1888.39 275.287 1884.25 277.586 cv
1882.58 278.512 1881.61 280.285 1882.38 282.17 cv
1883.03 283.773 1885.31 284.958 1886.96 284.041 cv
1890.94 281.831 1895.01 279.801 1899.16 277.955 cv
1900.28 282.005 1901.03 286.158 1901.39 290.325 cv
1896.51 291.261 1891.63 292.196 1886.75 293.132 cv
1882.34 293.979 1883.29 300.917 1887.72 300.066 cv
1892.36 299.177 1897 298.287 1901.63 297.398 cv
1901.63 297.662 1901.63 297.927 1901.63 298.191 cv
1901.45 304.119 1900.63 309.959 1899.28 315.675 cv
1894.02 315.401 1888.74 315.416 1883.45 315.738 cv
1878.94 316.012 1879.94 322.944 1884.41 322.672 cv
1888.74 322.409 1893.07 322.371 1897.4 322.543 cv
1893.17 336.048 1886.13 348.744 1877.81 360.101 cv
1862.99 380.335 1842.96 397.325 1818.97 405.449 cv
1803.17 410.803 1785.66 411.851 1769.39 407.907 cv
1770.98 406.752 1772.6 405.63 1774.26 404.551 cv
1778.03 402.091 1773.68 396.605 1769.93 399.051 cv
1766.88 401.039 1763.93 403.165 1761.08 405.412 cv
1759.99 405.016 1758.89 404.598 1757.82 404.151 cv
1755.18 403.06 1752.61 401.817 1750.13 400.424 cv
1752.08 398.298 1754.03 396.171 1755.98 394.044 cv
1759.02 390.733 1753.37 386.596 1750.34 389.892 cv
1748.28 392.144 1746.21 394.396 1744.14 396.649 cv
1741.82 395.017 1739.54 393.285 1737.36 391.438 cv
1739.69 389.024 1741.81 386.407 1743.68 383.613 cv
1746.19 379.89 1740.57 375.707 1738.05 379.46 cv
1736.3 382.058 1734.35 384.466 1732.21 386.668 cv
1727.52 381.903 1723.55 376.508 1720.86 370.393 cv
1722.11 368.988 1722.37 366.762 1720.35 365.429 cv
1719.79 365.063 1719.24 364.689 1718.69 364.316 cv
1715.58 353.048 1717.5 340.982 1721.91 330.137 cv
1727.06 317.451 1735.28 306.157 1744.34 295.985 cv
1748.23 291.618 1752.34 287.443 1756.61 283.442 cv
1758.62 283.727 1760.07 281.987 1760.23 280.132 cv
1765.31 275.589 1770.59 271.277 1776.02 267.181 cv
1787.8 258.299 1800.01 250.417 1813.44 244.454 cv
1832.03 236.204 1854.74 231.622 1873.28 242.576 cv
1884.32 249.102 1892.3 259.506 1896.93 271.306 cv
cp
1689.38 338.021 mo
1685.01 332.851 1681 327.38 1677.4 321.657 cv
1674.3 316.752 1671.16 311.528 1669.56 305.905 cv
1668.05 300.599 1668.45 295.229 1672.2 290.95 cv
1676.01 286.6 1681.74 284.024 1686.98 281.851 cv
1697.24 277.599 1708.38 275.405 1719.48 275.371 cv
1729.73 275.339 1739.88 277.127 1749.47 280.635 cv
1748.69 281.39 1747.92 282.15 1747.15 282.917 cv
1736.44 293.615 1726.73 305.376 1719.55 318.761 cv
1713.18 330.644 1709.1 344.138 1710.4 357.726 cv
1710.42 357.923 1710.45 358.118 1710.47 358.314 cv
1702.78 352.286 1695.7 345.509 1689.38 338.021 cv
cp
1870.31 168.077 mo
1858.52 170.838 1850.45 183.022 1843.59 192.051 cv
1833.94 204.753 1825.43 218.271 1818 232.383 cv
1817.45 233.415 1817.49 234.349 1817.88 235.099 cv
1805.2 239.798 1793.32 246.662 1782.14 254.214 cv
1772.68 260.608 1763.62 267.653 1755.14 275.325 cv
1733.39 266.375 1708.32 266.127 1686.35 274.564 cv
1674.52 279.108 1661.25 286.598 1661.73 301.036 cv
1661.92 306.869 1664.22 312.496 1666.95 317.576 cv
1670.52 324.225 1674.69 330.592 1679.26 336.593 cv
1688.68 348.956 1700.05 359.829 1712.78 368.738 cv
1715.65 377.225 1720.72 384.827 1727.01 391.345 cv
1721.65 395.541 1715.48 398.663 1708.76 400.547 cv
1706.93 401.061 1706.24 403.537 1706.89 405.131 cv
1707.68 407.063 1709.67 407.509 1711.48 407.001 cv
1719.05 404.877 1726.09 401.156 1732.15 396.22 cv
1734.46 398.218 1736.88 400.082 1739.37 401.85 cv
1734.19 407.504 1729 413.157 1723.82 418.811 cv
1720.78 422.122 1726.43 426.259 1729.45 422.963 cv
1734.73 417.208 1740.01 411.452 1745.29 405.697 cv
1748.42 407.535 1751.68 409.142 1755.01 410.531 cv
1749.49 415.507 1744.41 420.981 1739.85 426.885 cv
1737.1 430.448 1742.73 434.61 1745.49 431.038 cv
1750.55 424.488 1756.26 418.547 1762.54 413.251 cv
1775.94 417.378 1790.36 418.242 1804.22 416.16 cv
1829.64 412.343 1852.34 398.48 1870.02 380.188 cv
1884.81 364.891 1897.87 344.503 1904.32 323.008 cv
1914.24 323.936 1924.05 325.993 1933.52 329.157 cv
1937.78 330.579 1940.37 324.075 1936.08 322.642 cv
1926.33 319.383 1916.29 317.237 1906.13 316.202 cv
1907.68 309.516 1908.54 302.765 1908.58 296.064 cv
1913.65 295.093 1918.71 294.122 1923.78 293.15 cv
1928.2 292.303 1927.25 285.366 1922.82 286.216 cv
1917.98 287.143 1913.15 288.07 1908.32 288.997 cv
1907.93 284.333 1907.11 279.716 1905.81 275.184 cv
1911.97 272.793 1918.28 270.811 1924.72 269.28 cv
1929.08 268.245 1928.14 261.304 1923.76 262.345 cv
1916.88 263.981 1910.13 266.057 1903.56 268.58 cv
1901.96 264.588 1899.95 260.68 1897.5 256.887 cv
1900.3 245.297 1901.57 233.497 1901.22 221.556 cv
1900.87 209.542 1899.11 196.889 1894.82 185.602 cv
1890.96 175.423 1882.41 165.244 1870.31 168.077 cv
cp
f
2487.96 787.279 mo
2492 797.238 2493.56 808.589 2494.15 819.257 cv
2494.7 829.346 2493.99 839.565 2492.04 849.503 cv
2484.73 840.862 2475.09 834.201 2464.12 831.223 cv
2453.42 828.32 2442.18 828.596 2431.42 831.038 cv
2429.54 831.465 2427.68 831.957 2425.83 832.487 cv
2431.43 822.128 2437.68 812.128 2444.54 802.557 cv
2448.33 797.271 2452.3 792.116 2456.44 787.105 cv
2459.59 783.302 2462.94 779.417 2467.21 776.831 cv
2471.03 774.518 2475.66 773.699 2479.67 776.072 cv
2483.76 778.495 2486.23 783.01 2487.96 787.279 cv
cp
2496.93 871.306 mo
2492.62 873.197 2488.39 875.287 2484.25 877.586 cv
2482.58 878.512 2481.61 880.285 2482.38 882.17 cv
2483.03 883.773 2485.31 884.958 2486.96 884.041 cv
2490.94 881.831 2495.01 879.801 2499.16 877.955 cv
2500.28 882.005 2501.03 886.158 2501.39 890.325 cv
2496.51 891.261 2491.63 892.196 2486.75 893.132 cv
2482.34 893.979 2483.29 900.917 2487.72 900.066 cv
2492.36 899.177 2497 898.287 2501.63 897.398 cv
2501.63 897.662 2501.63 897.927 2501.63 898.191 cv
2501.45 904.119 2500.63 909.959 2499.28 915.675 cv
2494.02 915.401 2488.74 915.416 2483.45 915.738 cv
2478.94 916.012 2479.94 922.944 2484.41 922.672 cv
2488.74 922.409 2493.07 922.371 2497.4 922.543 cv
2493.17 936.048 2486.13 948.744 2477.81 960.101 cv
2462.99 980.335 2442.96 997.325 2418.97 1005.45 cv
2403.17 1010.8 2385.66 1011.85 2369.39 1007.91 cv
2370.98 1006.75 2372.6 1005.63 2374.26 1004.55 cv
2378.03 1002.09 2373.68 996.605 2369.93 999.051 cv
2366.88 1001.04 2363.93 1003.16 2361.08 1005.41 cv
2359.99 1005.02 2358.89 1004.6 2357.82 1004.15 cv
2355.18 1003.06 2352.61 1001.82 2350.13 1000.42 cv
2352.08 998.298 2354.03 996.171 2355.98 994.044 cv
2359.02 990.733 2353.37 986.596 2350.34 989.892 cv
2348.28 992.144 2346.21 994.396 2344.14 996.649 cv
2341.82 995.017 2339.54 993.285 2337.36 991.438 cv
2339.69 989.024 2341.81 986.407 2343.68 983.613 cv
2346.19 979.89 2340.57 975.707 2338.05 979.46 cv
2336.3 982.058 2334.35 984.466 2332.21 986.668 cv
2327.52 981.903 2323.55 976.508 2320.86 970.393 cv
2322.11 968.988 2322.37 966.762 2320.35 965.429 cv
2319.79 965.063 2319.24 964.689 2318.69 964.316 cv
2315.58 953.048 2317.5 940.982 2321.91 930.137 cv
2327.06 917.451 2335.28 906.157 2344.34 895.985 cv
2348.23 891.618 2352.34 887.443 2356.61 883.442 cv
2358.62 883.727 2360.07 881.987 2360.23 880.132 cv
2365.31 875.589 2370.59 871.277 2376.02 867.181 cv
2387.8 858.299 2400.01 850.417 2413.44 844.454 cv
2432.03 836.204 2454.74 831.622 2473.28 842.576 cv
2484.32 849.102 2492.3 859.505 2496.93 871.306 cv
cp
2289.38 938.021 mo
2285.01 932.851 2281 927.38 2277.4 921.657 cv
2274.3 916.751 2271.16 911.528 2269.56 905.905 cv
2268.05 900.599 2268.45 895.229 2272.2 890.95 cv
2276.01 886.6 2281.74 884.024 2286.98 881.851 cv
2297.24 877.599 2308.38 875.405 2319.48 875.371 cv
2329.73 875.339 2339.88 877.127 2349.47 880.634 cv
2348.69 881.39 2347.92 882.15 2347.15 882.917 cv
2336.44 893.615 2326.73 905.376 2319.55 918.761 cv
2313.18 930.644 2309.1 944.138 2310.4 957.726 cv
2310.42 957.923 2310.45 958.118 2310.47 958.314 cv
2302.78 952.286 2295.7 945.509 2289.38 938.021 cv
cp
2470.31 768.077 mo
2458.52 770.838 2450.45 783.022 2443.59 792.051 cv
2433.94 804.753 2425.43 818.271 2418 832.383 cv
2417.45 833.415 2417.49 834.349 2417.88 835.099 cv
2405.2 839.798 2393.32 846.662 2382.14 854.213 cv
2372.68 860.608 2363.62 867.653 2355.14 875.325 cv
2333.39 866.375 2308.32 866.127 2286.35 874.564 cv
2274.52 879.108 2261.25 886.597 2261.73 901.036 cv
2261.92 906.869 2264.22 912.496 2266.95 917.576 cv
2270.52 924.225 2274.69 930.592 2279.26 936.593 cv
2288.68 948.956 2300.05 959.829 2312.78 968.738 cv
2315.65 977.225 2320.72 984.826 2327.01 991.345 cv
2321.65 995.541 2315.48 998.663 2308.76 1000.55 cv
2306.93 1001.06 2306.24 1003.54 2306.89 1005.13 cv
2307.68 1007.06 2309.67 1007.51 2311.48 1007 cv
2319.05 1004.88 2326.09 1001.16 2332.15 996.22 cv
2334.46 998.218 2336.88 1000.08 2339.37 1001.85 cv
2334.19 1007.5 2329 1013.16 2323.82 1018.81 cv
2320.78 1022.12 2326.43 1026.26 2329.45 1022.96 cv
2334.73 1017.21 2340.01 1011.45 2345.29 1005.7 cv
2348.42 1007.54 2351.68 1009.14 2355.01 1010.53 cv
2349.49 1015.51 2344.41 1020.98 2339.85 1026.89 cv
2337.1 1030.45 2342.73 1034.61 2345.49 1031.04 cv
2350.55 1024.49 2356.26 1018.55 2362.54 1013.25 cv
2375.94 1017.38 2390.36 1018.24 2404.22 1016.16 cv
2429.64 1012.34 2452.34 998.48 2470.02 980.188 cv
2484.81 964.891 2497.87 944.503 2504.32 923.008 cv
2514.24 923.936 2524.05 925.993 2533.52 929.157 cv
2537.78 930.579 2540.37 924.075 2536.08 922.642 cv
2526.33 919.383 2516.29 917.237 2506.13 916.202 cv
2507.68 909.516 2508.54 902.765 2508.58 896.064 cv
2513.65 895.093 2518.71 894.122 2523.78 893.15 cv
2528.2 892.303 2527.25 885.366 2522.82 886.216 cv
2517.98 887.143 2513.15 888.07 2508.32 888.997 cv
2507.93 884.333 2507.11 879.716 2505.81 875.184 cv
2511.97 872.793 2518.28 870.811 2524.72 869.28 cv
2529.08 868.245 2528.14 861.304 2523.76 862.345 cv
2516.88 863.981 2510.13 866.057 2503.56 868.58 cv
2501.96 864.588 2499.95 860.68 2497.5 856.887 cv
2500.3 845.297 2501.57 833.497 2501.22 821.555 cv
2500.87 809.542 2499.11 796.89 2494.82 785.602 cv
2490.96 775.423 2482.41 765.244 2470.31 768.077 cv
cp
f
1287.96 787.279 mo
1292 797.238 1293.56 808.589 1294.15 819.257 cv
1294.7 829.346 1293.99 839.565 1292.04 849.503 cv
1284.73 840.862 1275.09 834.201 1264.12 831.223 cv
1253.42 828.32 1242.18 828.596 1231.42 831.038 cv
1229.54 831.465 1227.68 831.957 1225.83 832.487 cv
1231.43 822.128 1237.68 812.128 1244.54 802.557 cv
1248.33 797.271 1252.3 792.116 1256.44 787.105 cv
1259.59 783.302 1262.94 779.417 1267.21 776.831 cv
1271.03 774.518 1275.66 773.699 1279.67 776.072 cv
1283.76 778.495 1286.23 783.01 1287.96 787.279 cv
cp
1296.93 871.306 mo
1292.62 873.197 1288.39 875.287 1284.25 877.586 cv
1282.58 878.512 1281.61 880.285 1282.38 882.17 cv
1283.03 883.773 1285.31 884.958 1286.96 884.041 cv
1290.94 881.831 1295.01 879.801 1299.16 877.955 cv
1300.28 882.005 1301.03 886.158 1301.39 890.325 cv
1296.51 891.261 1291.63 892.196 1286.75 893.132 cv
1282.34 893.979 1283.29 900.917 1287.72 900.066 cv
1292.36 899.177 1297 898.287 1301.63 897.398 cv
1301.63 897.662 1301.63 897.927 1301.63 898.191 cv
1301.45 904.119 1300.63 909.959 1299.28 915.675 cv
1294.02 915.401 1288.74 915.416 1283.45 915.738 cv
1278.94 916.012 1279.94 922.944 1284.41 922.672 cv
1288.74 922.409 1293.07 922.371 1297.4 922.543 cv
1293.17 936.048 1286.13 948.744 1277.81 960.101 cv
1262.99 980.335 1242.96 997.325 1218.97 1005.45 cv
1203.17 1010.8 1185.66 1011.85 1169.39 1007.91 cv
1170.98 1006.75 1172.6 1005.63 1174.26 1004.55 cv
1178.03 1002.09 1173.68 996.605 1169.93 999.051 cv
1166.88 1001.04 1163.93 1003.16 1161.08 1005.41 cv
1159.99 1005.02 1158.9 1004.6 1157.82 1004.15 cv
1155.18 1003.06 1152.61 1001.82 1150.13 1000.42 cv
1152.08 998.298 1154.03 996.171 1155.98 994.044 cv
1159.02 990.733 1153.37 986.596 1150.34 989.892 cv
1148.28 992.144 1146.21 994.396 1144.14 996.649 cv
1141.82 995.017 1139.54 993.285 1137.36 991.438 cv
1139.69 989.024 1141.81 986.407 1143.68 983.613 cv
1146.19 979.89 1140.57 975.707 1138.05 979.46 cv
1136.3 982.058 1134.35 984.466 1132.21 986.668 cv
1127.52 981.903 1123.55 976.508 1120.85 970.393 cv
1122.11 968.988 1122.37 966.762 1120.35 965.429 cv
1119.79 965.063 1119.24 964.689 1118.69 964.316 cv
1115.58 953.048 1117.5 940.982 1121.91 930.137 cv
1127.06 917.451 1135.28 906.157 1144.34 895.985 cv
1148.23 891.618 1152.34 887.443 1156.61 883.442 cv
1158.62 883.727 1160.07 881.987 1160.23 880.132 cv
1165.31 875.589 1170.59 871.277 1176.02 867.181 cv
1187.8 858.299 1200.01 850.417 1213.44 844.454 cv
1232.03 836.204 1254.74 831.622 1273.28 842.576 cv
1284.32 849.102 1292.3 859.505 1296.93 871.306 cv
cp
1089.38 938.021 mo
1085.01 932.851 1081 927.38 1077.4 921.657 cv
1074.3 916.751 1071.16 911.528 1069.56 905.905 cv
1068.05 900.599 1068.45 895.229 1072.2 890.95 cv
1076.02 886.6 1081.74 884.024 1086.98 881.851 cv
1097.24 877.599 1108.38 875.405 1119.48 875.371 cv
1129.73 875.339 1139.88 877.127 1149.47 880.634 cv
1148.69 881.39 1147.92 882.15 1147.15 882.917 cv
1136.44 893.615 1126.73 905.376 1119.55 918.761 cv
1113.18 930.644 1109.1 944.138 1110.4 957.726 cv
1110.42 957.923 1110.45 958.118 1110.47 958.314 cv
1102.78 952.286 1095.7 945.509 1089.38 938.021 cv
cp
1270.31 768.077 mo
1258.52 770.838 1250.45 783.022 1243.59 792.051 cv
1233.94 804.753 1225.43 818.271 1218 832.383 cv
1217.45 833.415 1217.49 834.349 1217.88 835.099 cv
1205.2 839.798 1193.32 846.662 1182.14 854.213 cv
1172.68 860.608 1163.62 867.653 1155.14 875.325 cv
1133.39 866.375 1108.31 866.127 1086.35 874.564 cv
1074.52 879.108 1061.25 886.597 1061.73 901.036 cv
1061.92 906.869 1064.22 912.496 1066.95 917.576 cv
1070.52 924.225 1074.69 930.592 1079.26 936.593 cv
1088.68 948.956 1100.05 959.829 1112.78 968.738 cv
1115.65 977.225 1120.72 984.826 1127.01 991.345 cv
1121.65 995.541 1115.48 998.663 1108.76 1000.55 cv
1106.93 1001.06 1106.24 1003.54 1106.89 1005.13 cv
1107.68 1007.06 1109.67 1007.51 1111.48 1007 cv
1119.05 1004.88 1126.09 1001.16 1132.15 996.22 cv
1134.46 998.218 1136.88 1000.08 1139.37 1001.85 cv
1134.19 1007.5 1129 1013.16 1123.82 1018.81 cv
1120.78 1022.12 1126.43 1026.26 1129.45 1022.96 cv
1134.73 1017.21 1140.01 1011.45 1145.29 1005.7 cv
1148.42 1007.54 1151.68 1009.14 1155.02 1010.53 cv
1149.49 1015.51 1144.41 1020.98 1139.85 1026.89 cv
1137.1 1030.45 1142.73 1034.61 1145.49 1031.04 cv
1150.55 1024.49 1156.26 1018.55 1162.54 1013.25 cv
1175.94 1017.38 1190.36 1018.24 1204.22 1016.16 cv
1229.64 1012.34 1252.34 998.48 1270.02 980.188 cv
1284.81 964.891 1297.87 944.503 1304.32 923.008 cv
1314.24 923.936 1324.05 925.993 1333.52 929.157 cv
1337.78 930.579 1340.37 924.075 1336.08 922.642 cv
1326.33 919.383 1316.29 917.237 1306.13 916.202 cv
1307.68 909.516 1308.54 902.765 1308.58 896.064 cv
1313.65 895.093 1318.71 894.122 1323.78 893.15 cv
1328.2 892.303 1327.25 885.366 1322.82 886.216 cv
1317.98 887.143 1313.15 888.07 1308.32 888.997 cv
1307.93 884.333 1307.11 879.716 1305.81 875.184 cv
1311.97 872.793 1318.28 870.811 1324.72 869.28 cv
1329.08 868.245 1328.14 861.304 1323.76 862.345 cv
1316.88 863.981 1310.13 866.057 1303.56 868.58 cv
1301.96 864.588 1299.95 860.68 1297.5 856.887 cv
1300.3 845.297 1301.57 833.497 1301.22 821.555 cv
1300.87 809.542 1299.11 796.89 1294.82 785.602 cv
1290.96 775.423 1282.41 765.244 1270.31 768.077 cv
cp
f
687.964 1387.28 mo
692.002 1397.24 693.56 1408.59 694.146 1419.26 cv
694.702 1429.35 693.987 1439.57 692.036 1449.5 cv
684.733 1440.86 675.09 1434.2 664.117 1431.22 cv
653.421 1428.32 642.181 1428.6 631.418 1431.04 cv
629.539 1431.46 627.681 1431.96 625.834 1432.49 cv
631.429 1422.13 637.681 1412.13 644.538 1402.56 cv
648.325 1397.27 652.297 1392.12 656.443 1387.11 cv
659.589 1383.3 662.935 1379.42 667.208 1376.83 cv
671.03 1374.52 675.663 1373.7 679.668 1376.07 cv
683.758 1378.49 686.233 1383.01 687.964 1387.28 cv
cp
696.935 1471.31 mo
692.62 1473.2 688.387 1475.29 684.25 1477.59 cv
682.585 1478.51 681.61 1480.28 682.379 1482.17 cv
683.033 1483.77 685.314 1484.96 686.963 1484.04 cv
690.939 1481.83 695.01 1479.8 699.16 1477.96 cv
700.282 1482 701.026 1486.16 701.392 1490.33 cv
696.513 1491.26 691.634 1492.2 686.755 1493.13 cv
682.337 1493.98 683.287 1500.92 687.718 1500.07 cv
692.356 1499.18 696.995 1498.29 701.633 1497.4 cv
701.628 1497.66 701.633 1497.93 701.625 1498.19 cv
701.449 1504.12 700.627 1509.96 699.28 1515.68 cv
694.02 1515.4 688.735 1515.42 683.446 1515.74 cv
678.939 1516.01 679.938 1522.94 684.409 1522.67 cv
688.737 1522.41 693.073 1522.37 697.397 1522.54 cv
693.168 1536.05 686.129 1548.74 677.812 1560.1 cv
662.993 1580.33 642.955 1597.33 618.972 1605.45 cv
603.167 1610.8 585.659 1611.85 569.388 1607.91 cv
570.982 1606.75 572.603 1605.63 574.257 1604.55 cv
578.029 1602.09 573.677 1596.61 569.927 1599.05 cv
566.879 1601.04 563.931 1603.16 561.083 1605.41 cv
559.985 1605.02 558.895 1604.6 557.815 1604.15 cv
555.176 1603.06 552.611 1601.82 550.127 1600.42 cv
552.078 1598.3 554.029 1596.17 555.979 1594.04 cv
559.017 1590.73 553.365 1586.6 550.342 1589.89 cv
548.276 1592.14 546.21 1594.4 544.144 1596.65 cv
541.819 1595.02 539.543 1593.28 537.362 1591.44 cv
539.687 1589.02 541.807 1586.41 543.685 1583.61 cv
546.188 1579.89 540.571 1575.71 538.047 1579.46 cv
536.301 1582.06 534.347 1584.47 532.21 1586.67 cv
527.524 1581.9 523.548 1576.51 520.855 1570.39 cv
522.105 1568.99 522.365 1566.76 520.346 1565.43 cv
519.791 1565.06 519.24 1564.69 518.69 1564.32 cv
515.584 1553.05 517.502 1540.98 521.909 1530.14 cv
527.063 1517.45 535.277 1506.16 544.338 1495.99 cv
548.229 1491.62 552.337 1487.44 556.611 1483.44 cv
558.618 1483.73 560.073 1481.99 560.227 1480.13 cv
565.306 1475.59 570.594 1471.28 576.024 1467.18 cv
587.797 1458.3 600.01 1450.42 613.445 1444.45 cv
632.032 1436.2 654.742 1431.62 673.279 1442.58 cv
684.323 1449.1 692.301 1459.51 696.935 1471.31 cv
cp
489.377 1538.02 mo
485.013 1532.85 481.004 1527.38 477.396 1521.66 cv
474.303 1516.75 471.158 1511.53 469.562 1505.91 cv
468.055 1500.6 468.449 1495.23 472.202 1490.95 cv
476.015 1486.6 481.736 1484.02 486.98 1481.85 cv
497.237 1477.6 508.375 1475.41 519.479 1475.37 cv
529.728 1475.34 539.884 1477.13 549.474 1480.63 cv
548.694 1481.39 547.918 1482.15 547.15 1482.92 cv
536.437 1493.62 526.73 1505.38 519.553 1518.76 cv
513.181 1530.64 509.1 1544.14 510.403 1557.73 cv
510.422 1557.92 510.446 1558.12 510.468 1558.31 cv
502.777 1552.29 495.699 1545.51 489.377 1538.02 cv
cp
670.307 1368.08 mo
658.518 1370.84 650.452 1383.02 643.59 1392.05 cv
633.937 1404.75 625.432 1418.27 617.996 1432.38 cv
617.453 1433.42 617.492 1434.35 617.881 1435.1 cv
605.203 1439.8 593.322 1446.66 582.143 1454.21 cv
572.678 1460.61 563.619 1467.65 555.142 1475.33 cv
533.391 1466.38 508.315 1466.13 486.351 1474.56 cv
474.521 1479.11 461.251 1486.6 461.73 1501.04 cv
461.923 1506.87 464.22 1512.5 466.95 1517.58 cv
470.522 1524.22 474.688 1530.59 479.259 1536.59 cv
488.676 1548.96 500.048 1559.83 512.779 1568.74 cv
515.651 1577.22 520.722 1584.83 527.008 1591.34 cv
521.652 1595.54 515.481 1598.66 508.764 1600.55 cv
506.93 1601.06 506.244 1603.54 506.894 1605.13 cv
507.682 1607.06 509.667 1607.51 511.478 1607 cv
519.054 1604.88 526.092 1601.16 532.154 1596.22 cv
534.463 1598.22 536.883 1600.08 539.373 1601.85 cv
534.187 1607.5 529.001 1613.16 523.815 1618.81 cv
520.778 1622.12 526.43 1626.26 529.453 1622.96 cv
534.732 1617.21 540.012 1611.45 545.291 1605.7 cv
548.424 1607.54 551.676 1609.14 555.015 1610.53 cv
549.489 1615.51 544.413 1620.98 539.852 1626.89 cv
537.1 1630.45 542.73 1634.61 545.489 1631.04 cv
550.549 1624.49 556.262 1618.55 562.545 1613.25 cv
575.935 1617.38 590.36 1618.24 604.219 1616.16 cv
629.643 1612.34 652.342 1598.48 670.021 1580.19 cv
684.807 1564.89 697.868 1544.5 704.318 1523.01 cv
714.239 1523.94 724.049 1525.99 733.52 1529.16 cv
737.775 1530.58 740.374 1524.08 736.084 1522.64 cv
726.329 1519.38 716.294 1517.24 706.134 1516.2 cv
707.677 1509.52 708.542 1502.76 708.585 1496.06 cv
713.649 1495.09 718.713 1494.12 723.777 1493.15 cv
728.195 1492.3 727.246 1485.37 722.815 1486.22 cv
717.982 1487.14 713.149 1488.07 708.317 1489 cv
707.927 1484.33 707.109 1479.72 705.813 1475.18 cv
711.969 1472.79 718.283 1470.81 724.722 1469.28 cv
729.077 1468.25 728.143 1461.3 723.76 1462.35 cv
716.877 1463.98 710.13 1466.06 703.557 1468.58 cv
701.957 1464.59 699.953 1460.68 697.503 1456.89 cv
700.302 1445.3 701.569 1433.5 701.219 1421.56 cv
700.866 1409.54 699.105 1396.89 694.824 1385.6 cv
690.962 1375.42 682.406 1365.24 670.307 1368.08 cv
cp
f
87.9639 1987.28 mo
92.002 1997.24 93.5596 2008.59 94.1465 2019.26 cv
94.7017 2029.35 93.9868 2039.57 92.0361 2049.5 cv
84.7334 2040.86 75.0898 2034.2 64.1172 2031.22 cv
53.4209 2028.32 42.1807 2028.6 31.4185 2031.04 cv
29.5391 2031.46 27.6807 2031.96 25.8345 2032.49 cv
31.4292 2022.13 37.6807 2012.13 44.5381 2002.56 cv
48.3252 1997.27 52.2974 1992.12 56.4429 1987.11 cv
59.5894 1983.3 62.9351 1979.42 67.208 1976.83 cv
71.0303 1974.52 75.6631 1973.7 79.6685 1976.07 cv
83.7583 1978.49 86.2329 1983.01 87.9639 1987.28 cv
cp
96.9346 2071.31 mo
92.6201 2073.2 88.3867 2075.29 84.25 2077.59 cv
82.5854 2078.51 81.6099 2080.28 82.3794 2082.17 cv
83.0332 2083.77 85.3145 2084.96 86.9629 2084.04 cv
90.9395 2081.83 95.0103 2079.8 99.1602 2077.96 cv
100.282 2082 101.026 2086.16 101.392 2090.33 cv
96.5127 2091.26 91.6338 2092.2 86.7549 2093.13 cv
82.3374 2093.98 83.2871 2100.92 87.7178 2100.07 cv
92.3564 2099.18 96.9946 2098.29 101.633 2097.4 cv
101.628 2097.66 101.633 2097.93 101.625 2098.19 cv
101.449 2104.12 100.627 2109.96 99.2803 2115.68 cv
94.02 2115.4 88.7354 2115.42 83.4458 2115.74 cv
78.939 2116.01 79.9375 2122.94 84.4087 2122.67 cv
88.7373 2122.41 93.0728 2122.37 97.3975 2122.54 cv
93.1685 2136.05 86.1289 2148.74 77.8115 2160.1 cv
62.9927 2180.33 42.9551 2197.33 18.9722 2205.45 cv
3.16748 2210.8 -14.3408 2211.85 -30.6118 2207.91 cv
-29.0181 2206.75 -27.3975 2205.63 -25.7432 2204.55 cv
-21.9707 2202.09 -26.3232 2196.61 -30.0728 2199.05 cv
-33.1206 2201.04 -36.0688 2203.16 -38.917 2205.41 cv
-40.0146 2205.02 -41.105 2204.6 -42.1846 2204.15 cv
-44.8242 2203.06 -47.3892 2201.82 -49.8726 2200.42 cv
-47.9219 2198.3 -45.9712 2196.17 -44.0205 2194.04 cv
-40.9829 2190.73 -46.6348 2186.6 -49.6577 2189.89 cv
-51.7241 2192.14 -53.79 2194.4 -55.856 2196.65 cv
-58.1807 2195.02 -60.4565 2193.28 -62.6377 2191.44 cv
-60.3135 2189.02 -58.1934 2186.41 -56.3154 2183.61 cv
-53.8125 2179.89 -59.4292 2175.71 -61.9526 2179.46 cv
-63.6992 2182.06 -65.6528 2184.47 -67.7896 2186.67 cv
-72.4756 2181.9 -76.4521 2176.51 -79.145 2170.39 cv
-77.8945 2168.99 -77.6348 2166.76 -79.6543 2165.43 cv
-80.2095 2165.06 -80.7598 2164.69 -81.3101 2164.32 cv
-84.4155 2153.05 -82.498 2140.98 -78.0908 2130.14 cv
-72.9365 2117.45 -64.7231 2106.16 -55.6621 2095.99 cv
-51.7715 2091.62 -47.6631 2087.44 -43.3892 2083.44 cv
-41.3823 2083.73 -39.9272 2081.99 -39.7729 2080.13 cv
-34.6938 2075.59 -29.4058 2071.28 -23.9761 2067.18 cv
-12.2026 2058.3 .00976563 2050.42 13.4448 2044.45 cv
32.0322 2036.2 54.7417 2031.62 73.2793 2042.58 cv
84.3232 2049.1 92.3008 2059.51 96.9346 2071.31 cv
cp
-110.623 2138.02 mo
-114.987 2132.85 -118.996 2127.38 -122.604 2121.66 cv
-125.697 2116.75 -128.842 2111.53 -130.438 2105.91 cv
-131.945 2100.6 -131.551 2095.23 -127.798 2090.95 cv
-123.985 2086.6 -118.264 2084.02 -113.02 2081.85 cv
-102.763 2077.6 -91.6245 2075.41 -80.5205 2075.37 cv
-70.2725 2075.34 -60.1162 2077.13 -50.5264 2080.63 cv
-51.3062 2081.39 -52.0815 2082.15 -52.8496 2082.92 cv
-63.563 2093.62 -73.27 2105.38 -80.4468 2118.76 cv
-86.8188 2130.64 -90.8999 2144.14 -89.5972 2157.73 cv
-89.5781 2157.92 -89.5537 2158.12 -89.5322 2158.31 cv
-97.2227 2152.29 -104.301 2145.51 -110.623 2138.02 cv
cp
70.3071 1968.08 mo
58.5176 1970.84 50.4521 1983.02 43.5903 1992.05 cv
33.937 2004.75 25.4316 2018.27 17.9961 2032.38 cv
17.4526 2033.42 17.4922 2034.35 17.8813 2035.1 cv
5.20264 2039.8 -6.67822 2046.66 -17.8569 2054.21 cv
-27.3223 2060.61 -36.3809 2067.65 -44.8584 2075.33 cv
-66.6089 2066.38 -91.6851 2066.13 -113.649 2074.56 cv
-125.479 2079.11 -138.749 2086.6 -138.27 2101.04 cv
-138.077 2106.87 -135.78 2112.5 -133.05 2117.58 cv
-129.478 2124.22 -125.313 2130.59 -120.741 2136.59 cv
-111.324 2148.96 -99.9517 2159.83 -87.2212 2168.74 cv
-84.3486 2177.22 -79.2778 2184.83 -72.9922 2191.34 cv
-78.3481 2195.54 -84.5186 2198.66 -91.2358 2200.55 cv
-93.0703 2201.06 -93.7563 2203.54 -93.1064 2205.13 cv
-92.3184 2207.06 -90.3335 2207.51 -88.5225 2207 cv
-80.9463 2204.88 -73.9077 2201.16 -67.8457 2196.22 cv
-65.5366 2198.22 -63.1167 2200.08 -60.627 2201.85 cv
-65.813 2207.5 -70.9985 2213.16 -76.1846 2218.81 cv
-79.2222 2222.12 -73.5703 2226.26 -70.5474 2222.96 cv
-65.2676 2217.21 -59.9883 2211.45 -54.709 2205.7 cv
-51.5757 2207.54 -48.3242 2209.14 -44.9849 2210.53 cv
-50.5107 2215.51 -55.5869 2220.98 -60.1479 2226.89 cv
-62.9004 2230.45 -57.27 2234.61 -54.5107 2231.04 cv
-49.4507 2224.49 -43.7383 2218.55 -37.4551 2213.25 cv
-24.0649 2217.38 -9.63965 2218.24 4.21924 2216.16 cv
29.6426 2212.34 52.3423 2198.48 70.021 2180.19 cv
84.8066 2164.89 97.8682 2144.5 104.318 2123.01 cv
114.239 2123.94 124.049 2125.99 133.52 2129.16 cv
137.775 2130.58 140.374 2124.08 136.084 2122.64 cv
126.329 2119.38 116.294 2117.24 106.134 2116.2 cv
107.677 2109.52 108.542 2102.76 108.585 2096.06 cv
113.649 2095.09 118.713 2094.12 123.777 2093.15 cv
128.195 2092.3 127.246 2085.37 122.815 2086.22 cv
117.982 2087.14 113.149 2088.07 108.317 2089 cv
107.927 2084.33 107.109 2079.72 105.813 2075.18 cv
111.969 2072.79 118.283 2070.81 124.722 2069.28 cv
129.077 2068.25 128.143 2061.3 123.76 2062.35 cv
116.877 2063.98 110.13 2066.06 103.557 2068.58 cv
101.957 2064.59 99.9531 2060.68 97.5029 2056.89 cv
100.302 2045.3 101.569 2033.5 101.219 2021.56 cv
100.866 2009.54 99.1055 1996.89 94.8237 1985.6 cv
90.9624 1975.42 82.4063 1965.24 70.3071 1968.08 cv
cp
f
1887.96 1387.28 mo
1892 1397.24 1893.56 1408.59 1894.15 1419.26 cv
1894.7 1429.35 1893.99 1439.57 1892.04 1449.5 cv
1884.73 1440.86 1875.09 1434.2 1864.12 1431.22 cv
1853.42 1428.32 1842.18 1428.6 1831.42 1431.04 cv
1829.54 1431.46 1827.68 1431.96 1825.83 1432.49 cv
1831.43 1422.13 1837.68 1412.13 1844.54 1402.56 cv
1848.33 1397.27 1852.3 1392.12 1856.44 1387.11 cv
1859.59 1383.3 1862.94 1379.42 1867.21 1376.83 cv
1871.03 1374.52 1875.66 1373.7 1879.67 1376.07 cv
1883.76 1378.49 1886.23 1383.01 1887.96 1387.28 cv
cp
1896.93 1471.31 mo
1892.62 1473.2 1888.39 1475.29 1884.25 1477.59 cv
1882.58 1478.51 1881.61 1480.28 1882.38 1482.17 cv
1883.03 1483.77 1885.31 1484.96 1886.96 1484.04 cv
1890.94 1481.83 1895.01 1479.8 1899.16 1477.96 cv
1900.28 1482 1901.03 1486.16 1901.39 1490.33 cv
1896.51 1491.26 1891.63 1492.2 1886.75 1493.13 cv
1882.34 1493.98 1883.29 1500.92 1887.72 1500.07 cv
1892.36 1499.18 1897 1498.29 1901.63 1497.4 cv
1901.63 1497.66 1901.63 1497.93 1901.63 1498.19 cv
1901.45 1504.12 1900.63 1509.96 1899.28 1515.68 cv
1894.02 1515.4 1888.74 1515.42 1883.45 1515.74 cv
1878.94 1516.01 1879.94 1522.94 1884.41 1522.67 cv
1888.74 1522.41 1893.07 1522.37 1897.4 1522.54 cv
1893.17 1536.05 1886.13 1548.74 1877.81 1560.1 cv
1862.99 1580.33 1842.96 1597.33 1818.97 1605.45 cv
1803.17 1610.8 1785.66 1611.85 1769.39 1607.91 cv
1770.98 1606.75 1772.6 1605.63 1774.26 1604.55 cv
1778.03 1602.09 1773.68 1596.61 1769.93 1599.05 cv
1766.88 1601.04 1763.93 1603.16 1761.08 1605.41 cv
1759.99 1605.02 1758.89 1604.6 1757.82 1604.15 cv
1755.18 1603.06 1752.61 1601.82 1750.13 1600.42 cv
1752.08 1598.3 1754.03 1596.17 1755.98 1594.04 cv
1759.02 1590.73 1753.37 1586.6 1750.34 1589.89 cv
1748.28 1592.14 1746.21 1594.4 1744.14 1596.65 cv
1741.82 1595.02 1739.54 1593.28 1737.36 1591.44 cv
1739.69 1589.02 1741.81 1586.41 1743.68 1583.61 cv
1746.19 1579.89 1740.57 1575.71 1738.05 1579.46 cv
1736.3 1582.06 1734.35 1584.47 1732.21 1586.67 cv
1727.52 1581.9 1723.55 1576.51 1720.86 1570.39 cv
1722.11 1568.99 1722.37 1566.76 1720.35 1565.43 cv
1719.79 1565.06 1719.24 1564.69 1718.69 1564.32 cv
1715.58 1553.05 1717.5 1540.98 1721.91 1530.14 cv
1727.06 1517.45 1735.28 1506.16 1744.34 1495.99 cv
1748.23 1491.62 1752.34 1487.44 1756.61 1483.44 cv
1758.62 1483.73 1760.07 1481.99 1760.23 1480.13 cv
1765.31 1475.59 1770.59 1471.28 1776.02 1467.18 cv
1787.8 1458.3 1800.01 1450.42 1813.44 1444.45 cv
1832.03 1436.2 1854.74 1431.62 1873.28 1442.58 cv
1884.32 1449.1 1892.3 1459.51 1896.93 1471.31 cv
cp
1689.38 1538.02 mo
1685.01 1532.85 1681 1527.38 1677.4 1521.66 cv
1674.3 1516.75 1671.16 1511.53 1669.56 1505.91 cv
1668.05 1500.6 1668.45 1495.23 1672.2 1490.95 cv
1676.01 1486.6 1681.74 1484.02 1686.98 1481.85 cv
1697.24 1477.6 1708.38 1475.41 1719.48 1475.37 cv
1729.73 1475.34 1739.88 1477.13 1749.47 1480.63 cv
1748.69 1481.39 1747.92 1482.15 1747.15 1482.92 cv
1736.44 1493.62 1726.73 1505.38 1719.55 1518.76 cv
1713.18 1530.64 1709.1 1544.14 1710.4 1557.73 cv
1710.42 1557.92 1710.45 1558.12 1710.47 1558.31 cv
1702.78 1552.29 1695.7 1545.51 1689.38 1538.02 cv
cp
1870.31 1368.08 mo
1858.52 1370.84 1850.45 1383.02 1843.59 1392.05 cv
1833.94 1404.75 1825.43 1418.27 1818 1432.38 cv
1817.45 1433.42 1817.49 1434.35 1817.88 1435.1 cv
1805.2 1439.8 1793.32 1446.66 1782.14 1454.21 cv
1772.68 1460.61 1763.62 1467.65 1755.14 1475.33 cv
1733.39 1466.38 1708.32 1466.13 1686.35 1474.56 cv
1674.52 1479.11 1661.25 1486.6 1661.73 1501.04 cv
1661.92 1506.87 1664.22 1512.5 1666.95 1517.58 cv
1670.52 1524.22 1674.69 1530.59 1679.26 1536.59 cv
1688.68 1548.96 1700.05 1559.83 1712.78 1568.74 cv
1715.65 1577.22 1720.72 1584.83 1727.01 1591.34 cv
1721.65 1595.54 1715.48 1598.66 1708.76 1600.55 cv
1706.93 1601.06 1706.24 1603.54 1706.89 1605.13 cv
1707.68 1607.06 1709.67 1607.51 1711.48 1607 cv
1719.05 1604.88 1726.09 1601.16 1732.15 1596.22 cv
1734.46 1598.22 1736.88 1600.08 1739.37 1601.85 cv
1734.19 1607.5 1729 1613.16 1723.82 1618.81 cv
1720.78 1622.12 1726.43 1626.26 1729.45 1622.96 cv
1734.73 1617.21 1740.01 1611.45 1745.29 1605.7 cv
1748.42 1607.54 1751.68 1609.14 1755.01 1610.53 cv
1749.49 1615.51 1744.41 1620.98 1739.85 1626.89 cv
1737.1 1630.45 1742.73 1634.61 1745.49 1631.04 cv
1750.55 1624.49 1756.26 1618.55 1762.54 1613.25 cv
1775.94 1617.38 1790.36 1618.24 1804.22 1616.16 cv
1829.64 1612.34 1852.34 1598.48 1870.02 1580.19 cv
1884.81 1564.89 1897.87 1544.5 1904.32 1523.01 cv
1914.24 1523.94 1924.05 1525.99 1933.52 1529.16 cv
1937.78 1530.58 1940.37 1524.08 1936.08 1522.64 cv
1926.33 1519.38 1916.29 1517.24 1906.13 1516.2 cv
1907.68 1509.52 1908.54 1502.76 1908.58 1496.06 cv
1913.65 1495.09 1918.71 1494.12 1923.78 1493.15 cv
1928.2 1492.3 1927.25 1485.37 1922.82 1486.22 cv
1917.98 1487.14 1913.15 1488.07 1908.32 1489 cv
1907.93 1484.33 1907.11 1479.72 1905.81 1475.18 cv
1911.97 1472.79 1918.28 1470.81 1924.72 1469.28 cv
1929.08 1468.25 1928.14 1461.3 1923.76 1462.35 cv
1916.88 1463.98 1910.13 1466.06 1903.56 1468.58 cv
1901.96 1464.59 1899.95 1460.68 1897.5 1456.89 cv
1900.3 1445.3 1901.57 1433.5 1901.22 1421.56 cv
1900.87 1409.54 1899.11 1396.89 1894.82 1385.6 cv
1890.96 1375.42 1882.41 1365.24 1870.31 1368.08 cv
cp
f
2487.96 1987.28 mo
2492 1997.24 2493.56 2008.59 2494.15 2019.26 cv
2494.7 2029.35 2493.99 2039.57 2492.04 2049.5 cv
2484.73 2040.86 2475.09 2034.2 2464.12 2031.22 cv
2453.42 2028.32 2442.18 2028.6 2431.42 2031.04 cv
2429.54 2031.46 2427.68 2031.96 2425.83 2032.49 cv
2431.43 2022.13 2437.68 2012.13 2444.54 2002.56 cv
2448.33 1997.27 2452.3 1992.12 2456.44 1987.11 cv
2459.59 1983.3 2462.94 1979.42 2467.21 1976.83 cv
2471.03 1974.52 2475.66 1973.7 2479.67 1976.07 cv
2483.76 1978.49 2486.23 1983.01 2487.96 1987.28 cv
cp
2496.93 2071.31 mo
2492.62 2073.2 2488.39 2075.29 2484.25 2077.59 cv
2482.58 2078.51 2481.61 2080.28 2482.38 2082.17 cv
2483.03 2083.77 2485.31 2084.96 2486.96 2084.04 cv
2490.94 2081.83 2495.01 2079.8 2499.16 2077.96 cv
2500.28 2082 2501.03 2086.16 2501.39 2090.33 cv
2496.51 2091.26 2491.63 2092.2 2486.75 2093.13 cv
2482.34 2093.98 2483.29 2100.92 2487.72 2100.07 cv
2492.36 2099.18 2497 2098.29 2501.63 2097.4 cv
2501.63 2097.66 2501.63 2097.93 2501.63 2098.19 cv
2501.45 2104.12 2500.63 2109.96 2499.28 2115.68 cv
2494.02 2115.4 2488.74 2115.42 2483.45 2115.74 cv
2478.94 2116.01 2479.94 2122.94 2484.41 2122.67 cv
2488.74 2122.41 2493.07 2122.37 2497.4 2122.54 cv
2493.17 2136.05 2486.13 2148.74 2477.81 2160.1 cv
2462.99 2180.33 2442.96 2197.33 2418.97 2205.45 cv
2403.17 2210.8 2385.66 2211.85 2369.39 2207.91 cv
2370.98 2206.75 2372.6 2205.63 2374.26 2204.55 cv
2378.03 2202.09 2373.68 2196.61 2369.93 2199.05 cv
2366.88 2201.04 2363.93 2203.16 2361.08 2205.41 cv
2359.99 2205.02 2358.89 2204.6 2357.82 2204.15 cv
2355.18 2203.06 2352.61 2201.82 2350.13 2200.42 cv
2352.08 2198.3 2354.03 2196.17 2355.98 2194.04 cv
2359.02 2190.73 2353.37 2186.6 2350.34 2189.89 cv
2348.28 2192.14 2346.21 2194.4 2344.14 2196.65 cv
2341.82 2195.02 2339.54 2193.28 2337.36 2191.44 cv
2339.69 2189.02 2341.81 2186.41 2343.68 2183.61 cv
2346.19 2179.89 2340.57 2175.71 2338.05 2179.46 cv
2336.3 2182.06 2334.35 2184.47 2332.21 2186.67 cv
2327.52 2181.9 2323.55 2176.51 2320.86 2170.39 cv
2322.11 2168.99 2322.37 2166.76 2320.35 2165.43 cv
2319.79 2165.06 2319.24 2164.69 2318.69 2164.32 cv
2315.58 2153.05 2317.5 2140.98 2321.91 2130.14 cv
2327.06 2117.45 2335.28 2106.16 2344.34 2095.99 cv
2348.23 2091.62 2352.34 2087.44 2356.61 2083.44 cv
2358.62 2083.73 2360.07 2081.99 2360.23 2080.13 cv
2365.31 2075.59 2370.59 2071.28 2376.02 2067.18 cv
2387.8 2058.3 2400.01 2050.42 2413.44 2044.45 cv
2432.03 2036.2 2454.74 2031.62 2473.28 2042.58 cv
2484.32 2049.1 2492.3 2059.51 2496.93 2071.31 cv
cp
2289.38 2138.02 mo
2285.01 2132.85 2281 2127.38 2277.4 2121.66 cv
2274.3 2116.75 2271.16 2111.53 2269.56 2105.91 cv
2268.05 2100.6 2268.45 2095.23 2272.2 2090.95 cv
2276.01 2086.6 2281.74 2084.02 2286.98 2081.85 cv
2297.24 2077.6 2308.38 2075.41 2319.48 2075.37 cv
2329.73 2075.34 2339.88 2077.13 2349.47 2080.63 cv
2348.69 2081.39 2347.92 2082.15 2347.15 2082.92 cv
2336.44 2093.62 2326.73 2105.38 2319.55 2118.76 cv
2313.18 2130.64 2309.1 2144.14 2310.4 2157.73 cv
2310.42 2157.92 2310.45 2158.12 2310.47 2158.31 cv
2302.78 2152.29 2295.7 2145.51 2289.38 2138.02 cv
cp
2470.31 1968.08 mo
2458.52 1970.84 2450.45 1983.02 2443.59 1992.05 cv
2433.94 2004.75 2425.43 2018.27 2418 2032.38 cv
2417.45 2033.42 2417.49 2034.35 2417.88 2035.1 cv
2405.2 2039.8 2393.32 2046.66 2382.14 2054.21 cv
2372.68 2060.61 2363.62 2067.65 2355.14 2075.33 cv
2333.39 2066.38 2308.32 2066.13 2286.35 2074.56 cv
2274.52 2079.11 2261.25 2086.6 2261.73 2101.04 cv
2261.92 2106.87 2264.22 2112.5 2266.95 2117.58 cv
2270.52 2124.22 2274.69 2130.59 2279.26 2136.59 cv
2288.68 2148.96 2300.05 2159.83 2312.78 2168.74 cv
2315.65 2177.22 2320.72 2184.83 2327.01 2191.34 cv
2321.65 2195.54 2315.48 2198.66 2308.76 2200.55 cv
2306.93 2201.06 2306.24 2203.54 2306.89 2205.13 cv
2307.68 2207.06 2309.67 2207.51 2311.48 2207 cv
2319.05 2204.88 2326.09 2201.16 2332.15 2196.22 cv
2334.46 2198.22 2336.88 2200.08 2339.37 2201.85 cv
2334.19 2207.5 2329 2213.16 2323.82 2218.81 cv
2320.78 2222.12 2326.43 2226.26 2329.45 2222.96 cv
2334.73 2217.21 2340.01 2211.45 2345.29 2205.7 cv
2348.42 2207.54 2351.68 2209.14 2355.01 2210.53 cv
2349.49 2215.51 2344.41 2220.98 2339.85 2226.89 cv
2337.1 2230.45 2342.73 2234.61 2345.49 2231.04 cv
2350.55 2224.49 2356.26 2218.55 2362.54 2213.25 cv
2375.94 2217.38 2390.36 2218.24 2404.22 2216.16 cv
2429.64 2212.34 2452.34 2198.48 2470.02 2180.19 cv
2484.81 2164.89 2497.87 2144.5 2504.32 2123.01 cv
2514.24 2123.94 2524.05 2125.99 2533.52 2129.16 cv
2537.78 2130.58 2540.37 2124.08 2536.08 2122.64 cv
2526.33 2119.38 2516.29 2117.24 2506.13 2116.2 cv
2507.68 2109.52 2508.54 2102.76 2508.58 2096.06 cv
2513.65 2095.09 2518.71 2094.12 2523.78 2093.15 cv
2528.2 2092.3 2527.25 2085.37 2522.82 2086.22 cv
2517.98 2087.14 2513.15 2088.07 2508.32 2089 cv
2507.93 2084.33 2507.11 2079.72 2505.81 2075.18 cv
2511.97 2072.79 2518.28 2070.81 2524.72 2069.28 cv
2529.08 2068.25 2528.14 2061.3 2523.76 2062.35 cv
2516.88 2063.98 2510.13 2066.06 2503.56 2068.58 cv
2501.96 2064.59 2499.95 2060.68 2497.5 2056.89 cv
2500.3 2045.3 2501.57 2033.5 2501.22 2021.56 cv
2500.87 2009.54 2499.11 1996.89 2494.82 1985.6 cv
2490.96 1975.42 2482.41 1965.24 2470.31 1968.08 cv
cp
f
1287.96 1987.28 mo
1292 1997.24 1293.56 2008.59 1294.15 2019.26 cv
1294.7 2029.35 1293.99 2039.57 1292.04 2049.5 cv
1284.73 2040.86 1275.09 2034.2 1264.12 2031.22 cv
1253.42 2028.32 1242.18 2028.6 1231.42 2031.04 cv
1229.54 2031.46 1227.68 2031.96 1225.83 2032.49 cv
1231.43 2022.13 1237.68 2012.13 1244.54 2002.56 cv
1248.33 1997.27 1252.3 1992.12 1256.44 1987.11 cv
1259.59 1983.3 1262.94 1979.42 1267.21 1976.83 cv
1271.03 1974.52 1275.66 1973.7 1279.67 1976.07 cv
1283.76 1978.49 1286.23 1983.01 1287.96 1987.28 cv
cp
1296.93 2071.31 mo
1292.62 2073.2 1288.39 2075.29 1284.25 2077.59 cv
1282.58 2078.51 1281.61 2080.28 1282.38 2082.17 cv
1283.03 2083.77 1285.31 2084.96 1286.96 2084.04 cv
1290.94 2081.83 1295.01 2079.8 1299.16 2077.96 cv
1300.28 2082 1301.03 2086.16 1301.39 2090.33 cv
1296.51 2091.26 1291.63 2092.2 1286.75 2093.13 cv
1282.34 2093.98 1283.29 2100.92 1287.72 2100.07 cv
1292.36 2099.18 1297 2098.29 1301.63 2097.4 cv
1301.63 2097.66 1301.63 2097.93 1301.63 2098.19 cv
1301.45 2104.12 1300.63 2109.96 1299.28 2115.68 cv
1294.02 2115.4 1288.74 2115.42 1283.45 2115.74 cv
1278.94 2116.01 1279.94 2122.94 1284.41 2122.67 cv
1288.74 2122.41 1293.07 2122.37 1297.4 2122.54 cv
1293.17 2136.05 1286.13 2148.74 1277.81 2160.1 cv
1262.99 2180.33 1242.96 2197.33 1218.97 2205.45 cv
1203.17 2210.8 1185.66 2211.85 1169.39 2207.91 cv
1170.98 2206.75 1172.6 2205.63 1174.26 2204.55 cv
1178.03 2202.09 1173.68 2196.61 1169.93 2199.05 cv
1166.88 2201.04 1163.93 2203.16 1161.08 2205.41 cv
1159.99 2205.02 1158.9 2204.6 1157.82 2204.15 cv
1155.18 2203.06 1152.61 2201.82 1150.13 2200.42 cv
1152.08 2198.3 1154.03 2196.17 1155.98 2194.04 cv
1159.02 2190.73 1153.37 2186.6 1150.34 2189.89 cv
1148.28 2192.14 1146.21 2194.4 1144.14 2196.65 cv
1141.82 2195.02 1139.54 2193.28 1137.36 2191.44 cv
1139.69 2189.02 1141.81 2186.41 1143.68 2183.61 cv
1146.19 2179.89 1140.57 2175.71 1138.05 2179.46 cv
1136.3 2182.06 1134.35 2184.47 1132.21 2186.67 cv
1127.52 2181.9 1123.55 2176.51 1120.85 2170.39 cv
1122.11 2168.99 1122.37 2166.76 1120.35 2165.43 cv
1119.79 2165.06 1119.24 2164.69 1118.69 2164.32 cv
1115.58 2153.05 1117.5 2140.98 1121.91 2130.14 cv
1127.06 2117.45 1135.28 2106.16 1144.34 2095.99 cv
1148.23 2091.62 1152.34 2087.44 1156.61 2083.44 cv
1158.62 2083.73 1160.07 2081.99 1160.23 2080.13 cv
1165.31 2075.59 1170.59 2071.28 1176.02 2067.18 cv
1187.8 2058.3 1200.01 2050.42 1213.44 2044.45 cv
1232.03 2036.2 1254.74 2031.62 1273.28 2042.58 cv
1284.32 2049.1 1292.3 2059.51 1296.93 2071.31 cv
cp
1089.38 2138.02 mo
1085.01 2132.85 1081 2127.38 1077.4 2121.66 cv
1074.3 2116.75 1071.16 2111.53 1069.56 2105.91 cv
1068.05 2100.6 1068.45 2095.23 1072.2 2090.95 cv
1076.02 2086.6 1081.74 2084.02 1086.98 2081.85 cv
1097.24 2077.6 1108.38 2075.41 1119.48 2075.37 cv
1129.73 2075.34 1139.88 2077.13 1149.47 2080.63 cv
1148.69 2081.39 1147.92 2082.15 1147.15 2082.92 cv
1136.44 2093.62 1126.73 2105.38 1119.55 2118.76 cv
1113.18 2130.64 1109.1 2144.14 1110.4 2157.73 cv
1110.42 2157.92 1110.45 2158.12 1110.47 2158.31 cv
1102.78 2152.29 1095.7 2145.51 1089.38 2138.02 cv
cp
1270.31 1968.08 mo
1258.52 1970.84 1250.45 1983.02 1243.59 1992.05 cv
1233.94 2004.75 1225.43 2018.27 1218 2032.38 cv
1217.45 2033.42 1217.49 2034.35 1217.88 2035.1 cv
1205.2 2039.8 1193.32 2046.66 1182.14 2054.21 cv
1172.68 2060.61 1163.62 2067.65 1155.14 2075.33 cv
1133.39 2066.38 1108.31 2066.13 1086.35 2074.56 cv
1074.52 2079.11 1061.25 2086.6 1061.73 2101.04 cv
1061.92 2106.87 1064.22 2112.5 1066.95 2117.58 cv
1070.52 2124.22 1074.69 2130.59 1079.26 2136.59 cv
1088.68 2148.96 1100.05 2159.83 1112.78 2168.74 cv
1115.65 2177.22 1120.72 2184.83 1127.01 2191.34 cv
1121.65 2195.54 1115.48 2198.66 1108.76 2200.55 cv
1106.93 2201.06 1106.24 2203.54 1106.89 2205.13 cv
1107.68 2207.06 1109.67 2207.51 1111.48 2207 cv
1119.05 2204.88 1126.09 2201.16 1132.15 2196.22 cv
1134.46 2198.22 1136.88 2200.08 1139.37 2201.85 cv
1134.19 2207.5 1129 2213.16 1123.82 2218.81 cv
1120.78 2222.12 1126.43 2226.26 1129.45 2222.96 cv
1134.73 2217.21 1140.01 2211.45 1145.29 2205.7 cv
1148.42 2207.54 1151.68 2209.14 1155.02 2210.53 cv
1149.49 2215.51 1144.41 2220.98 1139.85 2226.89 cv
1137.1 2230.45 1142.73 2234.61 1145.49 2231.04 cv
1150.55 2224.49 1156.26 2218.55 1162.54 2213.25 cv
1175.94 2217.38 1190.36 2218.24 1204.22 2216.16 cv
1229.64 2212.34 1252.34 2198.48 1270.02 2180.19 cv
1284.81 2164.89 1297.87 2144.5 1304.32 2123.01 cv
1314.24 2123.94 1324.05 2125.99 1333.52 2129.16 cv
1337.78 2130.58 1340.37 2124.08 1336.08 2122.64 cv
1326.33 2119.38 1316.29 2117.24 1306.13 2116.2 cv
1307.68 2109.52 1308.54 2102.76 1308.58 2096.06 cv
1313.65 2095.09 1318.71 2094.12 1323.78 2093.15 cv
1328.2 2092.3 1327.25 2085.37 1322.82 2086.22 cv
1317.98 2087.14 1313.15 2088.07 1308.32 2089 cv
1307.93 2084.33 1307.11 2079.72 1305.81 2075.18 cv
1311.97 2072.79 1318.28 2070.81 1324.72 2069.28 cv
1329.08 2068.25 1328.14 2061.3 1323.76 2062.35 cv
1316.88 2063.98 1310.13 2066.06 1303.56 2068.58 cv
1301.96 2064.59 1299.95 2060.68 1297.5 2056.89 cv
1300.3 2045.3 1301.57 2033.5 1301.22 2021.56 cv
1300.87 2009.54 1299.11 1996.89 1294.82 1985.6 cv
1290.96 1975.42 1282.41 1965.24 1270.31 1968.08 cv
cp
f
888.634 43.6924 mo
878.963 57.6357 864.099 68.6235 846.995 70.8848 cv
844.341 71.2358 841.703 71.3467 839.061 71.2476 cv
848.087 52.3027 864.859 38.2583 884.199 30.2817 cv
888.526 28.4961 892.94 27.0322 897.412 25.8735 cv
895.426 32.1245 892.5 38.1182 888.634 43.6924 cv
cp
1118.05 280.125 mo
1120.31 229.12 1108.27 177.571 1083.89 132.726 cv
1058.88 86.7051 1019.62 43.5933 969.84 24.4854 cv
949.742 16.7705 928.037 13.5791 906.852 16.7847 cv
907.009 15.7524 907.144 14.7173 907.251 13.6797 cv
911.356 -25.8823 884.49 -62.7969 851.605 -81.9141 cv
811.487 -105.235 762.585 -108.586 717.178 -108.013 cv
672.5 -107.45 627.938 -100.991 584.923 -88.9023 cv
541.981 -76.8345 500.627 -59.375 462.232 -36.645 cv
457.591 -33.8975 452.992 -31.082 448.435 -28.1963 cv
444.627 -25.7847 448.97 -20.2905 452.748 -22.6826 cv
488.587 -45.3779 527.335 -63.4004 567.692 -76.4482 cv
608.037 -89.4922 650.055 -97.4419 692.369 -100.117 cv
713.878 -101.478 735.485 -101.462 756.987 -99.9546 cv
779.352 -98.3862 801.827 -95.0659 823.004 -87.4717 cv
859.082 -74.5347 892.699 -46.2935 899.506 -6.78223 cv
900.956 1.63379 900.903 10.0664 899.354 18.1919 cv
897.773 18.5483 896.198 18.9419 894.627 19.374 cv
872.428 25.4839 851.512 38.4512 838.594 57.8413 cv
835.423 62.6006 832.765 67.6797 830.655 72.9937 cv
829.814 75.1123 831.193 77.5103 833.468 77.8008 cv
866.909 82.0718 896.975 55.4375 905.308 24.1572 cv
921.719 21.2534 938.689 22.3159 954.944 26.8906 cv
1004.93 40.9595 1045.16 81.604 1071.44 124.987 cv
1096.86 166.939 1110.88 216.066 1111.35 265.118 cv
1111.82 313.771 1098.33 361.869 1073.26 403.525 cv
1048.58 444.525 1013.36 479.443 971.375 502.591 cv
966.12 505.488 960.765 508.193 955.327 510.73 cv
951.254 512.63 954.002 519.07 958.101 517.158 cv
1003.48 495.991 1042.47 462.083 1070.56 420.697 cv
1098.74 379.176 1115.82 330.352 1118.05 280.125 cv
cp
f
250.884 510.527 mo
241.25 496.355 235.55 477.436 241.603 460.723 cv
244.476 452.791 250.669 445.955 258.551 442.78 cv
266.384 439.625 274.706 440.925 281.499 445.827 cv
296.883 456.929 297.637 478.338 296.18 495.479 cv
294.883 510.727 291.022 525.691 285.091 539.808 cv
271.674 532.814 259.429 523.096 250.884 510.527 cv
cp
407.962 550.221 mo
369.535 554.347 327.686 559.059 291.331 542.831 cv
296.849 529.759 300.675 515.979 302.499 501.826 cv
304.934 482.925 304.945 460.929 291.693 445.764 cv
285.81 439.033 277.45 434.334 268.41 434.004 cv
259.291 433.671 250.384 437.929 243.995 444.266 cv
229.546 458.596 229.863 481.537 237.031 499.309 cv
243.667 515.761 255.75 529.182 270.298 539.123 cv
274.175 541.772 278.159 544.126 282.234 546.213 cv
276.214 558.93 268.508 570.859 259.479 581.557 cv
239.002 605.823 211.629 624.442 180.862 632.787 cv
176.978 633.841 173.051 634.723 169.093 635.456 cv
164.67 636.275 166.543 643.022 170.954 642.206 cv
204.632 635.971 235.501 617.828 258.771 592.884 cv
270.85 579.937 280.944 565.148 288.492 549.178 cv
320.194 563.065 356.697 562.264 390.901 558.984 cv
396.592 558.438 402.277 557.831 407.962 557.221 cv
409.856 557.017 411.44 555.757 411.462 553.721 cv
411.48 551.983 409.84 550.019 407.962 550.221 cv
cp
f
745.708 778.287 mo
775.123 792.029 806.04 814.127 814.149 847.466 cv
817.773 862.365 814.107 878.279 800.649 886.974 cv
785.315 896.881 764.547 894.265 748.943 886.415 cv
721.401 872.561 706.361 841.688 703.529 812.036 cv
701.929 795.28 704.127 779.711 709.163 765.286 cv
721.701 768.501 733.952 772.795 745.708 778.287 cv
cp
389.518 853.818 mo
465.236 807.626 546.875 760.662 637.882 757.829 cv
659.502 757.156 681.37 758.936 702.528 763.69 cv
698.923 773.994 696.663 784.771 696.135 795.93 cv
694.634 827.666 706.143 862.146 731.017 882.917 cv
743.922 893.693 760.403 900.373 777.321 900.309 cv
795.721 900.239 813.96 890.91 820.25 872.834 cv
825.378 858.098 821.228 842.004 814.396 828.556 cv
806.548 813.104 794.483 800.842 780.575 790.735 cv
759.86 775.682 736.32 765.193 711.662 758.755 cv
732.099 709.854 785.117 674.726 830.964 651.796 cv
903.823 615.358 987.641 594.814 1069.14 606.509 cv
1079.11 607.939 1089 609.865 1098.79 612.239 cv
1103.18 613.304 1104.62 606.453 1100.25 605.392 cv
1058.58 595.286 1015.15 593.95 972.73 599.708 cv
930.069 605.497 888.459 618.059 849.16 635.533 cv
812.047 652.035 775.4 672.277 745.658 700.282 cv
728.664 716.282 713.939 735.565 705.031 757.126 cv
694.616 754.729 684.031 753.035 673.401 752.01 cv
632.3 748.049 591.139 753.662 551.801 765.823 cv
504.204 780.538 459.81 803.945 417.021 829.125 cv
406.5 835.316 396.056 841.634 385.635 847.991 cv
381.792 850.336 385.67 856.166 389.518 853.818 cv
cp
f
289.007 -294.472 mo
288.993 -298.976 281.993 -298.984 282.007 -294.472 cv
282.139 -251.153 281.341 -204.713 261.215 -165.244 cv
251.666 -146.517 237.701 -130.673 220.568 -118.527 cv
203.768 -106.617 184.862 -98.0698 165.703 -90.7217 cv
125.573 -75.3301 83.0293 -64.4214 47.3271 -39.5337 cv
29.1934 -26.8921 12.8755 -10.9932 1.99023 8.40674 cv
-8.98633 27.9692 -14.5391 51.1738 -11.7241 73.5596 cv
-9.13037 94.1826 .561523 113.044 17.0469 125.926 cv
32.2173 137.78 51.7256 144.252 70.9849 141.495 cv
75.5752 140.837 80.0317 139.614 84.3208 137.855 cv
86.0825 137.132 87.2886 135.536 86.7651 133.549 cv
86.3276 131.889 84.2065 130.388 82.4595 131.105 cv
65.1812 138.192 45.8101 135.38 29.8667 126.19 cv
12.4819 116.17 .708008 99.5835 -3.57031 80.0337 cv
-8.22754 58.7505 -4.08545 35.8926 5.58154 16.5693 cv
15.3584 -2.97363 30.9341 -19.1831 48.5654 -31.8643 cv
83.4028 -56.9209 125.124 -67.9453 164.734 -82.895 cv
183.735 -90.0669 202.592 -98.1772 219.595 -109.401 cv
236.791 -120.751 251.639 -135.272 262.368 -152.935 cv
285.061 -190.291 288.479 -235.878 288.957 -278.548 cv
289.016 -283.855 289.023 -289.164 289.007 -294.472 cv
cp
f
2689.01 -294.472 mo
2688.99 -298.976 2681.99 -298.984 2682.01 -294.472 cv
2682.14 -251.153 2681.34 -204.713 2661.22 -165.244 cv
2651.67 -146.517 2637.7 -130.673 2620.57 -118.527 cv
2603.77 -106.617 2584.86 -98.0698 2565.7 -90.7217 cv
2525.57 -75.3301 2483.03 -64.4214 2447.33 -39.5337 cv
2429.19 -26.8921 2412.88 -10.9932 2401.99 8.40674 cv
2391.01 27.9692 2385.46 51.1738 2388.28 73.5596 cv
2390.87 94.1826 2400.56 113.044 2417.05 125.926 cv
2432.22 137.78 2451.73 144.252 2470.99 141.495 cv
2475.58 140.837 2480.03 139.614 2484.32 137.855 cv
2486.08 137.132 2487.29 135.536 2486.77 133.549 cv
2486.33 131.889 2484.21 130.388 2482.46 131.105 cv
2465.18 138.192 2445.81 135.38 2429.87 126.19 cv
2412.48 116.17 2400.71 99.5835 2396.43 80.0337 cv
2391.77 58.7505 2395.92 35.8926 2405.58 16.5693 cv
2415.36 -2.97363 2430.93 -19.1831 2448.57 -31.8643 cv
2483.4 -56.9209 2525.12 -67.9453 2564.73 -82.895 cv
2583.74 -90.0669 2602.59 -98.1772 2619.59 -109.401 cv
2636.79 -120.751 2651.64 -135.272 2662.37 -152.935 cv
2685.06 -190.291 2688.48 -235.878 2688.96 -278.548 cv
2689.02 -283.855 2689.02 -289.164 2689.01 -294.472 cv
cp
f
2088.63 43.6924 mo
2078.96 57.6357 2064.1 68.6235 2046.99 70.8848 cv
2044.34 71.2358 2041.7 71.3467 2039.06 71.2476 cv
2048.09 52.3027 2064.86 38.2583 2084.2 30.2817 cv
2088.53 28.4961 2092.94 27.0322 2097.41 25.8735 cv
2095.43 32.1245 2092.5 38.1182 2088.63 43.6924 cv
cp
2318.04 280.125 mo
2320.31 229.12 2308.27 177.571 2283.89 132.726 cv
2258.88 86.7051 2219.62 43.5933 2169.84 24.4854 cv
2149.74 16.7705 2128.04 13.5791 2106.85 16.7847 cv
2107.01 15.7524 2107.14 14.7173 2107.25 13.6797 cv
2111.36 -25.8823 2084.49 -62.7969 2051.6 -81.9141 cv
2011.49 -105.235 1962.58 -108.586 1917.18 -108.013 cv
1872.5 -107.45 1827.94 -100.991 1784.92 -88.9023 cv
1741.98 -76.8345 1700.63 -59.375 1662.23 -36.645 cv
1657.59 -33.8975 1652.99 -31.082 1648.44 -28.1963 cv
1644.63 -25.7847 1648.97 -20.2905 1652.75 -22.6826 cv
1688.59 -45.3779 1727.33 -63.4004 1767.69 -76.4482 cv
1808.04 -89.4922 1850.05 -97.4419 1892.37 -100.117 cv
1913.88 -101.478 1935.49 -101.462 1956.99 -99.9546 cv
1979.35 -98.3862 2001.83 -95.0659 2023 -87.4717 cv
2059.08 -74.5347 2092.7 -46.2935 2099.51 -6.78223 cv
2100.96 1.63379 2100.9 10.0664 2099.35 18.1919 cv
2097.77 18.5483 2096.2 18.9419 2094.63 19.374 cv
2072.43 25.4839 2051.51 38.4512 2038.59 57.8413 cv
2035.42 62.6006 2032.76 67.6797 2030.66 72.9937 cv
2029.81 75.1123 2031.19 77.5103 2033.47 77.8008 cv
2066.91 82.0718 2096.97 55.4375 2105.31 24.1572 cv
2121.72 21.2534 2138.69 22.3159 2154.94 26.8906 cv
2204.93 40.9595 2245.16 81.604 2271.44 124.987 cv
2296.86 166.939 2310.88 216.066 2311.35 265.118 cv
2311.82 313.771 2298.33 361.869 2273.25 403.525 cv
2248.58 444.525 2213.36 479.443 2171.38 502.591 cv
2166.12 505.488 2160.76 508.193 2155.33 510.73 cv
2151.25 512.63 2154 519.07 2158.1 517.158 cv
2203.48 495.991 2242.47 462.083 2270.56 420.697 cv
2298.74 379.176 2315.82 330.352 2318.04 280.125 cv
cp
f
888.634 2443.69 mo
878.963 2457.64 864.099 2468.62 846.995 2470.88 cv
844.341 2471.24 841.703 2471.35 839.061 2471.25 cv
848.087 2452.3 864.859 2438.26 884.199 2430.28 cv
888.526 2428.5 892.94 2427.03 897.412 2425.87 cv
895.426 2432.12 892.5 2438.12 888.634 2443.69 cv
cp
1118.05 2680.12 mo
1120.31 2629.12 1108.27 2577.57 1083.89 2532.73 cv
1058.88 2486.71 1019.62 2443.59 969.84 2424.49 cv
949.742 2416.77 928.037 2413.58 906.852 2416.79 cv
907.009 2415.75 907.144 2414.72 907.251 2413.68 cv
911.356 2374.12 884.49 2337.2 851.605 2318.09 cv
811.487 2294.76 762.585 2291.41 717.178 2291.99 cv
672.5 2292.55 627.938 2299.01 584.923 2311.1 cv
541.981 2323.17 500.627 2340.63 462.232 2363.36 cv
457.591 2366.1 452.992 2368.92 448.435 2371.8 cv
444.627 2374.21 448.97 2379.71 452.748 2377.32 cv
488.587 2354.62 527.335 2336.6 567.692 2323.55 cv
608.037 2310.51 650.055 2302.56 692.369 2299.88 cv
713.878 2298.52 735.485 2298.54 756.987 2300.05 cv
779.352 2301.61 801.827 2304.93 823.004 2312.53 cv
859.082 2325.47 892.699 2353.71 899.506 2393.22 cv
900.956 2401.63 900.903 2410.07 899.354 2418.19 cv
897.773 2418.55 896.198 2418.94 894.627 2419.37 cv
872.428 2425.48 851.512 2438.45 838.594 2457.84 cv
835.423 2462.6 832.765 2467.68 830.655 2472.99 cv
829.814 2475.11 831.193 2477.51 833.468 2477.8 cv
866.909 2482.07 896.975 2455.44 905.308 2424.16 cv
921.719 2421.25 938.689 2422.32 954.944 2426.89 cv
1004.93 2440.96 1045.16 2481.6 1071.44 2524.99 cv
1096.86 2566.94 1110.88 2616.07 1111.35 2665.12 cv
1111.82 2713.77 1098.33 2761.87 1073.26 2803.52 cv
1048.58 2844.53 1013.36 2879.44 971.375 2902.59 cv
966.12 2905.49 960.765 2908.19 955.327 2910.73 cv
951.254 2912.63 954.002 2919.07 958.101 2917.16 cv
1003.48 2895.99 1042.47 2862.08 1070.56 2820.7 cv
1098.74 2779.18 1115.82 2730.35 1118.05 2680.12 cv
cp
f
2088.63 2443.69 mo
2078.96 2457.64 2064.1 2468.62 2046.99 2470.88 cv
2044.34 2471.24 2041.7 2471.35 2039.06 2471.25 cv
2048.09 2452.3 2064.86 2438.26 2084.2 2430.28 cv
2088.53 2428.5 2092.94 2427.03 2097.41 2425.87 cv
2095.43 2432.12 2092.5 2438.12 2088.63 2443.69 cv
cp
2318.04 2680.12 mo
2320.31 2629.12 2308.27 2577.57 2283.89 2532.73 cv
2258.88 2486.71 2219.62 2443.59 2169.84 2424.49 cv
2149.74 2416.77 2128.04 2413.58 2106.85 2416.79 cv
2107.01 2415.75 2107.14 2414.72 2107.25 2413.68 cv
2111.36 2374.12 2084.49 2337.2 2051.6 2318.09 cv
2011.49 2294.76 1962.58 2291.41 1917.18 2291.99 cv
1872.5 2292.55 1827.94 2299.01 1784.92 2311.1 cv
1741.98 2323.17 1700.63 2340.63 1662.23 2363.36 cv
1657.59 2366.1 1652.99 2368.92 1648.44 2371.8 cv
1644.63 2374.21 1648.97 2379.71 1652.75 2377.32 cv
1688.59 2354.62 1727.33 2336.6 1767.69 2323.55 cv
1808.04 2310.51 1850.05 2302.56 1892.37 2299.88 cv
1913.88 2298.52 1935.49 2298.54 1956.99 2300.05 cv
1979.35 2301.61 2001.83 2304.93 2023 2312.53 cv
2059.08 2325.47 2092.7 2353.71 2099.51 2393.22 cv
2100.96 2401.63 2100.9 2410.07 2099.35 2418.19 cv
2097.77 2418.55 2096.2 2418.94 2094.63 2419.37 cv
2072.43 2425.48 2051.51 2438.45 2038.59 2457.84 cv
2035.42 2462.6 2032.76 2467.68 2030.66 2472.99 cv
2029.81 2475.11 2031.19 2477.51 2033.47 2477.8 cv
2066.91 2482.07 2096.97 2455.44 2105.31 2424.16 cv
2121.72 2421.25 2138.69 2422.32 2154.94 2426.89 cv
2204.93 2440.96 2245.16 2481.6 2271.44 2524.99 cv
2296.86 2566.94 2310.88 2616.07 2311.35 2665.12 cv
2311.82 2713.77 2298.33 2761.87 2273.25 2803.52 cv
2248.58 2844.53 2213.36 2879.44 2171.38 2902.59 cv
2166.12 2905.49 2160.76 2908.19 2155.33 2910.73 cv
2151.25 2912.63 2154 2919.07 2158.1 2917.16 cv
2203.48 2895.99 2242.47 2862.08 2270.56 2820.7 cv
2298.74 2779.18 2315.82 2730.35 2318.04 2680.12 cv
cp
f
1450.88 510.527 mo
1441.25 496.355 1435.55 477.436 1441.6 460.723 cv
1444.48 452.791 1450.67 445.955 1458.55 442.78 cv
1466.38 439.625 1474.71 440.925 1481.5 445.827 cv
1496.88 456.929 1497.64 478.338 1496.18 495.479 cv
1494.88 510.727 1491.02 525.691 1485.09 539.808 cv
1471.67 532.814 1459.43 523.096 1450.88 510.527 cv
cp
1607.96 550.221 mo
1569.54 554.347 1527.69 559.059 1491.33 542.831 cv
1496.85 529.759 1500.67 515.979 1502.5 501.826 cv
1504.93 482.925 1504.95 460.929 1491.69 445.764 cv
1485.81 439.033 1477.45 434.334 1468.41 434.004 cv
1459.29 433.671 1450.38 437.929 1444 444.266 cv
1429.55 458.596 1429.86 481.537 1437.03 499.309 cv
1443.67 515.761 1455.75 529.182 1470.3 539.123 cv
1474.17 541.772 1478.16 544.126 1482.23 546.213 cv
1476.21 558.93 1468.51 570.859 1459.48 581.557 cv
1439 605.823 1411.63 624.442 1380.86 632.787 cv
1376.98 633.841 1373.05 634.723 1369.09 635.456 cv
1364.67 636.275 1366.54 643.022 1370.95 642.206 cv
1404.63 635.971 1435.5 617.828 1458.77 592.884 cv
1470.85 579.937 1480.94 565.148 1488.49 549.178 cv
1520.19 563.065 1556.7 562.264 1590.9 558.984 cv
1596.59 558.438 1602.28 557.831 1607.96 557.221 cv
1609.86 557.017 1611.44 555.757 1611.46 553.721 cv
1611.48 551.983 1609.84 550.019 1607.96 550.221 cv
cp
f
1945.71 778.287 mo
1975.12 792.029 2006.04 814.127 2014.15 847.466 cv
2017.77 862.365 2014.11 878.279 2000.65 886.974 cv
1985.32 896.881 1964.55 894.265 1948.94 886.415 cv
1921.4 872.561 1906.36 841.688 1903.53 812.036 cv
1901.93 795.28 1904.13 779.711 1909.16 765.286 cv
1921.7 768.501 1933.95 772.795 1945.71 778.287 cv
cp
1589.52 853.818 mo
1665.24 807.626 1746.88 760.662 1837.88 757.829 cv
1859.5 757.156 1881.37 758.936 1902.53 763.69 cv
1898.92 773.994 1896.66 784.771 1896.13 795.93 cv
1894.63 827.666 1906.14 862.146 1931.02 882.917 cv
1943.92 893.693 1960.4 900.373 1977.32 900.309 cv
1995.72 900.239 2013.96 890.91 2020.25 872.834 cv
2025.38 858.098 2021.23 842.004 2014.4 828.556 cv
2006.55 813.104 1994.48 800.842 1980.58 790.735 cv
1959.86 775.682 1936.32 765.193 1911.66 758.755 cv
1932.1 709.854 1985.12 674.726 2030.96 651.796 cv
2103.82 615.358 2187.64 594.814 2269.14 606.509 cv
2279.11 607.939 2289 609.865 2298.79 612.239 cv
2303.18 613.304 2304.63 606.453 2300.25 605.392 cv
2258.58 595.286 2215.15 593.95 2172.73 599.708 cv
2130.07 605.497 2088.46 618.059 2049.16 635.533 cv
2012.05 652.035 1975.4 672.277 1945.66 700.282 cv
1928.66 716.282 1913.94 735.565 1905.03 757.126 cv
1894.62 754.729 1884.03 753.035 1873.4 752.01 cv
1832.3 748.049 1791.14 753.662 1751.8 765.823 cv
1704.2 780.538 1659.81 803.945 1617.02 829.125 cv
1606.5 835.316 1596.06 841.634 1585.64 847.991 cv
1581.79 850.336 1585.67 856.166 1589.52 853.818 cv
cp
f
1489.01 -294.472 mo
1488.99 -298.976 1481.99 -298.984 1482.01 -294.472 cv
1482.14 -251.153 1481.34 -204.713 1461.22 -165.244 cv
1451.67 -146.517 1437.7 -130.673 1420.57 -118.527 cv
1403.77 -106.617 1384.86 -98.0698 1365.7 -90.7217 cv
1325.57 -75.3301 1283.03 -64.4214 1247.33 -39.5337 cv
1229.19 -26.8921 1212.88 -10.9932 1201.99 8.40674 cv
1191.01 27.9692 1185.46 51.1738 1188.28 73.5596 cv
1190.87 94.1826 1200.56 113.044 1217.05 125.926 cv
1232.22 137.78 1251.73 144.252 1270.99 141.495 cv
1275.58 140.837 1280.03 139.614 1284.32 137.855 cv
1286.08 137.132 1287.29 135.536 1286.77 133.549 cv
1286.33 131.889 1284.21 130.388 1282.46 131.105 cv
1265.18 138.192 1245.81 135.38 1229.87 126.19 cv
1212.48 116.17 1200.71 99.5835 1196.43 80.0337 cv
1191.77 58.7505 1195.91 35.8926 1205.58 16.5693 cv
1215.36 -2.97363 1230.93 -19.1831 1248.57 -31.8643 cv
1283.4 -56.9209 1325.12 -67.9453 1364.73 -82.895 cv
1383.74 -90.0669 1402.59 -98.1772 1419.59 -109.401 cv
1436.79 -120.751 1451.64 -135.272 1462.37 -152.935 cv
1485.06 -190.291 1488.48 -235.878 1488.96 -278.548 cv
1489.02 -283.855 1489.02 -289.164 1489.01 -294.472 cv
cp
f
289.007 2105.53 mo
288.993 2101.02 281.993 2101.02 282.007 2105.53 cv
282.139 2148.85 281.341 2195.29 261.215 2234.76 cv
251.666 2253.48 237.701 2269.33 220.568 2281.47 cv
203.768 2293.38 184.862 2301.93 165.703 2309.28 cv
125.573 2324.67 83.0293 2335.58 47.3271 2360.47 cv
29.1934 2373.11 12.8755 2389.01 1.99023 2408.41 cv
-8.98633 2427.97 -14.5391 2451.17 -11.7241 2473.56 cv
-9.13037 2494.18 .561523 2513.04 17.0469 2525.93 cv
32.2173 2537.78 51.7256 2544.25 70.9849 2541.5 cv
75.5752 2540.84 80.0317 2539.61 84.3208 2537.85 cv
86.0825 2537.13 87.2886 2535.54 86.7651 2533.55 cv
86.3276 2531.89 84.2065 2530.39 82.4595 2531.1 cv
65.1812 2538.19 45.8101 2535.38 29.8667 2526.19 cv
12.4819 2516.17 .708008 2499.58 -3.57031 2480.03 cv
-8.22754 2458.75 -4.08545 2435.89 5.58154 2416.57 cv
15.3584 2397.03 30.9341 2380.82 48.5654 2368.14 cv
83.4028 2343.08 125.124 2332.05 164.734 2317.1 cv
183.735 2309.93 202.592 2301.82 219.595 2290.6 cv
236.791 2279.25 251.639 2264.73 262.368 2247.07 cv
285.061 2209.71 288.479 2164.12 288.957 2121.45 cv
289.016 2116.14 289.023 2110.84 289.007 2105.53 cv
cp
f
2689.01 2105.53 mo
2688.99 2101.02 2681.99 2101.02 2682.01 2105.53 cv
2682.14 2148.85 2681.34 2195.29 2661.22 2234.76 cv
2651.67 2253.48 2637.7 2269.33 2620.57 2281.47 cv
2603.77 2293.38 2584.86 2301.93 2565.7 2309.28 cv
2525.57 2324.67 2483.03 2335.58 2447.33 2360.47 cv
2429.19 2373.11 2412.88 2389.01 2401.99 2408.41 cv
2391.01 2427.97 2385.46 2451.17 2388.28 2473.56 cv
2390.87 2494.18 2400.56 2513.04 2417.05 2525.93 cv
2432.22 2537.78 2451.73 2544.25 2470.99 2541.5 cv
2475.58 2540.84 2480.03 2539.61 2484.32 2537.85 cv
2486.08 2537.13 2487.29 2535.54 2486.77 2533.55 cv
2486.33 2531.89 2484.21 2530.39 2482.46 2531.1 cv
2465.18 2538.19 2445.81 2535.38 2429.87 2526.19 cv
2412.48 2516.17 2400.71 2499.58 2396.43 2480.03 cv
2391.77 2458.75 2395.92 2435.89 2405.58 2416.57 cv
2415.36 2397.03 2430.93 2380.82 2448.57 2368.14 cv
2483.4 2343.08 2525.12 2332.05 2564.73 2317.1 cv
2583.74 2309.93 2602.59 2301.82 2619.59 2290.6 cv
2636.79 2279.25 2651.64 2264.73 2662.37 2247.07 cv
2685.06 2209.71 2688.48 2164.12 2688.96 2121.45 cv
2689.02 2116.14 2689.02 2110.84 2689.01 2105.53 cv
cp
f
1489.01 2105.53 mo
1488.99 2101.02 1481.99 2101.02 1482.01 2105.53 cv
1482.14 2148.85 1481.34 2195.29 1461.22 2234.76 cv
1451.67 2253.48 1437.7 2269.33 1420.57 2281.47 cv
1403.77 2293.38 1384.86 2301.93 1365.7 2309.28 cv
1325.57 2324.67 1283.03 2335.58 1247.33 2360.47 cv
1229.19 2373.11 1212.88 2389.01 1201.99 2408.41 cv
1191.01 2427.97 1185.46 2451.17 1188.28 2473.56 cv
1190.87 2494.18 1200.56 2513.04 1217.05 2525.93 cv
1232.22 2537.78 1251.73 2544.25 1270.99 2541.5 cv
1275.58 2540.84 1280.03 2539.61 1284.32 2537.85 cv
1286.08 2537.13 1287.29 2535.54 1286.77 2533.55 cv
1286.33 2531.89 1284.21 2530.39 1282.46 2531.1 cv
1265.18 2538.19 1245.81 2535.38 1229.87 2526.19 cv
1212.48 2516.17 1200.71 2499.58 1196.43 2480.03 cv
1191.77 2458.75 1195.91 2435.89 1205.58 2416.57 cv
1215.36 2397.03 1230.93 2380.82 1248.57 2368.14 cv
1283.4 2343.08 1325.12 2332.05 1364.73 2317.1 cv
1383.74 2309.93 1402.59 2301.82 1419.59 2290.6 cv
1436.79 2279.25 1451.64 2264.73 1462.37 2247.07 cv
1485.06 2209.71 1488.48 2164.12 1488.96 2121.45 cv
1489.02 2116.14 1489.02 2110.84 1489.01 2105.53 cv
cp
f
888.634 1243.69 mo
878.963 1257.64 864.099 1268.62 846.995 1270.88 cv
844.341 1271.24 841.703 1271.35 839.061 1271.25 cv
848.087 1252.3 864.859 1238.26 884.199 1230.28 cv
888.526 1228.5 892.94 1227.03 897.412 1225.87 cv
895.426 1232.12 892.5 1238.12 888.634 1243.69 cv
cp
1118.05 1480.12 mo
1120.31 1429.12 1108.27 1377.57 1083.89 1332.73 cv
1058.88 1286.71 1019.62 1243.59 969.84 1224.49 cv
949.742 1216.77 928.037 1213.58 906.852 1216.79 cv
907.009 1215.75 907.144 1214.72 907.251 1213.68 cv
911.356 1174.12 884.49 1137.2 851.605 1118.09 cv
811.487 1094.76 762.585 1091.41 717.178 1091.99 cv
672.5 1092.55 627.938 1099.01 584.923 1111.1 cv
541.981 1123.17 500.627 1140.63 462.232 1163.35 cv
457.591 1166.1 452.992 1168.92 448.435 1171.8 cv
444.627 1174.22 448.97 1179.71 452.748 1177.32 cv
488.587 1154.62 527.335 1136.6 567.692 1123.55 cv
608.037 1110.51 650.055 1102.56 692.369 1099.88 cv
713.878 1098.52 735.485 1098.54 756.987 1100.05 cv
779.352 1101.61 801.827 1104.93 823.004 1112.53 cv
859.082 1125.47 892.699 1153.71 899.506 1193.22 cv
900.956 1201.63 900.903 1210.07 899.354 1218.19 cv
897.773 1218.55 896.198 1218.94 894.627 1219.37 cv
872.428 1225.48 851.512 1238.45 838.594 1257.84 cv
835.423 1262.6 832.765 1267.68 830.655 1272.99 cv
829.814 1275.11 831.193 1277.51 833.468 1277.8 cv
866.909 1282.07 896.975 1255.44 905.308 1224.16 cv
921.719 1221.25 938.689 1222.32 954.944 1226.89 cv
1004.93 1240.96 1045.16 1281.6 1071.44 1324.99 cv
1096.86 1366.94 1110.88 1416.07 1111.35 1465.12 cv
1111.82 1513.77 1098.33 1561.87 1073.26 1603.52 cv
1048.58 1644.53 1013.36 1679.44 971.375 1702.59 cv
966.12 1705.49 960.765 1708.19 955.327 1710.73 cv
951.254 1712.63 954.002 1719.07 958.101 1717.16 cv
1003.48 1695.99 1042.47 1662.08 1070.56 1620.7 cv
1098.74 1579.18 1115.82 1530.35 1118.05 1480.12 cv
cp
f
250.884 1710.53 mo
241.25 1696.36 235.55 1677.44 241.603 1660.72 cv
244.476 1652.79 250.669 1645.96 258.551 1642.78 cv
266.384 1639.62 274.706 1640.92 281.499 1645.83 cv
296.883 1656.93 297.637 1678.34 296.18 1695.48 cv
294.883 1710.73 291.022 1725.69 285.091 1739.81 cv
271.674 1732.81 259.429 1723.1 250.884 1710.53 cv
cp
407.962 1750.22 mo
369.535 1754.35 327.686 1759.06 291.331 1742.83 cv
296.849 1729.76 300.675 1715.98 302.499 1701.83 cv
304.934 1682.93 304.945 1660.93 291.693 1645.76 cv
285.81 1639.03 277.45 1634.33 268.41 1634 cv
259.291 1633.67 250.384 1637.93 243.995 1644.27 cv
229.546 1658.6 229.863 1681.54 237.031 1699.31 cv
243.667 1715.76 255.75 1729.18 270.298 1739.12 cv
274.175 1741.77 278.159 1744.13 282.234 1746.21 cv
276.214 1758.93 268.508 1770.86 259.479 1781.56 cv
239.002 1805.82 211.629 1824.44 180.862 1832.79 cv
176.978 1833.84 173.051 1834.72 169.093 1835.46 cv
164.67 1836.27 166.543 1843.02 170.954 1842.21 cv
204.632 1835.97 235.501 1817.83 258.771 1792.88 cv
270.85 1779.94 280.944 1765.15 288.492 1749.18 cv
320.194 1763.06 356.697 1762.26 390.901 1758.98 cv
396.592 1758.44 402.277 1757.83 407.962 1757.22 cv
409.856 1757.02 411.44 1755.76 411.462 1753.72 cv
411.48 1751.98 409.84 1750.02 407.962 1750.22 cv
cp
f
745.708 1978.29 mo
775.123 1992.03 806.04 2014.13 814.149 2047.47 cv
817.773 2062.36 814.107 2078.28 800.649 2086.97 cv
785.315 2096.88 764.547 2094.26 748.943 2086.42 cv
721.401 2072.56 706.361 2041.69 703.529 2012.04 cv
701.929 1995.28 704.127 1979.71 709.163 1965.29 cv
721.701 1968.5 733.952 1972.79 745.708 1978.29 cv
cp
389.518 2053.82 mo
465.236 2007.63 546.875 1960.66 637.882 1957.83 cv
659.502 1957.16 681.37 1958.94 702.528 1963.69 cv
698.923 1973.99 696.663 1984.77 696.135 1995.93 cv
694.634 2027.67 706.143 2062.15 731.017 2082.92 cv
743.922 2093.69 760.403 2100.37 777.321 2100.31 cv
795.721 2100.24 813.96 2090.91 820.25 2072.83 cv
825.378 2058.1 821.228 2042 814.396 2028.56 cv
806.548 2013.1 794.483 2000.84 780.575 1990.74 cv
759.86 1975.68 736.32 1965.19 711.662 1958.76 cv
732.099 1909.85 785.117 1874.73 830.964 1851.8 cv
903.823 1815.36 987.641 1794.81 1069.14 1806.51 cv
1079.11 1807.94 1089 1809.87 1098.79 1812.24 cv
1103.18 1813.3 1104.62 1806.45 1100.25 1805.39 cv
1058.58 1795.29 1015.15 1793.95 972.73 1799.71 cv
930.069 1805.5 888.459 1818.06 849.16 1835.53 cv
812.047 1852.04 775.4 1872.28 745.658 1900.28 cv
728.664 1916.28 713.939 1935.56 705.031 1957.13 cv
694.616 1954.73 684.031 1953.03 673.401 1952.01 cv
632.3 1948.05 591.139 1953.66 551.801 1965.82 cv
504.204 1980.54 459.81 2003.95 417.021 2029.13 cv
406.5 2035.32 396.056 2041.63 385.635 2047.99 cv
381.792 2050.34 385.67 2056.17 389.518 2053.82 cv
cp
f
289.007 905.528 mo
288.993 901.024 281.993 901.016 282.007 905.528 cv
282.139 948.847 281.341 995.287 261.215 1034.76 cv
251.666 1053.48 237.701 1069.33 220.568 1081.47 cv
203.768 1093.38 184.862 1101.93 165.703 1109.28 cv
125.573 1124.67 83.0293 1135.58 47.3271 1160.47 cv
29.1934 1173.11 12.8755 1189.01 1.99023 1208.41 cv
-8.98633 1227.97 -14.5391 1251.17 -11.7241 1273.56 cv
-9.13037 1294.18 .561523 1313.04 17.0469 1325.93 cv
32.2173 1337.78 51.7256 1344.25 70.9849 1341.5 cv
75.5752 1340.84 80.0317 1339.61 84.3208 1337.85 cv
86.0825 1337.13 87.2886 1335.54 86.7651 1333.55 cv
86.3276 1331.89 84.2065 1330.39 82.4595 1331.1 cv
65.1812 1338.19 45.8101 1335.38 29.8667 1326.19 cv
12.4819 1316.17 .708008 1299.58 -3.57031 1280.03 cv
-8.22754 1258.75 -4.08545 1235.89 5.58154 1216.57 cv
15.3584 1197.03 30.9341 1180.82 48.5654 1168.14 cv
83.4028 1143.08 125.124 1132.05 164.734 1117.1 cv
183.735 1109.93 202.592 1101.82 219.595 1090.6 cv
236.791 1079.25 251.639 1064.73 262.368 1047.06 cv
285.061 1009.71 288.479 964.122 288.957 921.452 cv
289.016 916.145 289.023 910.836 289.007 905.528 cv
cp
f
2689.01 905.528 mo
2688.99 901.024 2681.99 901.016 2682.01 905.528 cv
2682.14 948.847 2681.34 995.287 2661.22 1034.76 cv
2651.67 1053.48 2637.7 1069.33 2620.57 1081.47 cv
2603.77 1093.38 2584.86 1101.93 2565.7 1109.28 cv
2525.57 1124.67 2483.03 1135.58 2447.33 1160.47 cv
2429.19 1173.11 2412.88 1189.01 2401.99 1208.41 cv
2391.01 1227.97 2385.46 1251.17 2388.28 1273.56 cv
2390.87 1294.18 2400.56 1313.04 2417.05 1325.93 cv
2432.22 1337.78 2451.73 1344.25 2470.99 1341.5 cv
2475.58 1340.84 2480.03 1339.61 2484.32 1337.85 cv
2486.08 1337.13 2487.29 1335.54 2486.77 1333.55 cv
2486.33 1331.89 2484.21 1330.39 2482.46 1331.1 cv
2465.18 1338.19 2445.81 1335.38 2429.87 1326.19 cv
2412.48 1316.17 2400.71 1299.58 2396.43 1280.03 cv
2391.77 1258.75 2395.92 1235.89 2405.58 1216.57 cv
2415.36 1197.03 2430.93 1180.82 2448.57 1168.14 cv
2483.4 1143.08 2525.12 1132.05 2564.73 1117.1 cv
2583.74 1109.93 2602.59 1101.82 2619.59 1090.6 cv
2636.79 1079.25 2651.64 1064.73 2662.37 1047.06 cv
2685.06 1009.71 2688.48 964.122 2688.96 921.452 cv
2689.02 916.145 2689.02 910.836 2689.01 905.528 cv
cp
f
2088.63 1243.69 mo
2078.96 1257.64 2064.1 1268.62 2046.99 1270.88 cv
2044.34 1271.24 2041.7 1271.35 2039.06 1271.25 cv
2048.09 1252.3 2064.86 1238.26 2084.2 1230.28 cv
2088.53 1228.5 2092.94 1227.03 2097.41 1225.87 cv
2095.43 1232.12 2092.5 1238.12 2088.63 1243.69 cv
cp
2318.04 1480.12 mo
2320.31 1429.12 2308.27 1377.57 2283.89 1332.73 cv
2258.88 1286.71 2219.62 1243.59 2169.84 1224.49 cv
2149.74 1216.77 2128.04 1213.58 2106.85 1216.79 cv
2107.01 1215.75 2107.14 1214.72 2107.25 1213.68 cv
2111.36 1174.12 2084.49 1137.2 2051.6 1118.09 cv
2011.49 1094.76 1962.58 1091.41 1917.18 1091.99 cv
1872.5 1092.55 1827.94 1099.01 1784.92 1111.1 cv
1741.98 1123.17 1700.63 1140.63 1662.23 1163.35 cv
1657.59 1166.1 1652.99 1168.92 1648.44 1171.8 cv
1644.63 1174.22 1648.97 1179.71 1652.75 1177.32 cv
1688.59 1154.62 1727.33 1136.6 1767.69 1123.55 cv
1808.04 1110.51 1850.05 1102.56 1892.37 1099.88 cv
1913.88 1098.52 1935.49 1098.54 1956.99 1100.05 cv
1979.35 1101.61 2001.83 1104.93 2023 1112.53 cv
2059.08 1125.47 2092.7 1153.71 2099.51 1193.22 cv
2100.96 1201.63 2100.9 1210.07 2099.35 1218.19 cv
2097.77 1218.55 2096.2 1218.94 2094.63 1219.37 cv
2072.43 1225.48 2051.51 1238.45 2038.59 1257.84 cv
2035.42 1262.6 2032.76 1267.68 2030.66 1272.99 cv
2029.81 1275.11 2031.19 1277.51 2033.47 1277.8 cv
2066.91 1282.07 2096.97 1255.44 2105.31 1224.16 cv
2121.72 1221.25 2138.69 1222.32 2154.94 1226.89 cv
2204.93 1240.96 2245.16 1281.6 2271.44 1324.99 cv
2296.86 1366.94 2310.88 1416.07 2311.35 1465.12 cv
2311.82 1513.77 2298.33 1561.87 2273.25 1603.52 cv
2248.58 1644.53 2213.36 1679.44 2171.38 1702.59 cv
2166.12 1705.49 2160.76 1708.19 2155.33 1710.73 cv
2151.25 1712.63 2154 1719.07 2158.1 1717.16 cv
2203.48 1695.99 2242.47 1662.08 2270.56 1620.7 cv
2298.74 1579.18 2315.82 1530.35 2318.04 1480.12 cv
cp
f
1450.88 1710.53 mo
1441.25 1696.36 1435.55 1677.44 1441.6 1660.72 cv
1444.48 1652.79 1450.67 1645.96 1458.55 1642.78 cv
1466.38 1639.62 1474.71 1640.92 1481.5 1645.83 cv
1496.88 1656.93 1497.64 1678.34 1496.18 1695.48 cv
1494.88 1710.73 1491.02 1725.69 1485.09 1739.81 cv
1471.67 1732.81 1459.43 1723.1 1450.88 1710.53 cv
cp
1607.96 1750.22 mo
1569.54 1754.35 1527.69 1759.06 1491.33 1742.83 cv
1496.85 1729.76 1500.67 1715.98 1502.5 1701.83 cv
1504.93 1682.93 1504.95 1660.93 1491.69 1645.76 cv
1485.81 1639.03 1477.45 1634.33 1468.41 1634 cv
1459.29 1633.67 1450.38 1637.93 1444 1644.27 cv
1429.55 1658.6 1429.86 1681.54 1437.03 1699.31 cv
1443.67 1715.76 1455.75 1729.18 1470.3 1739.12 cv
1474.17 1741.77 1478.16 1744.13 1482.23 1746.21 cv
1476.21 1758.93 1468.51 1770.86 1459.48 1781.56 cv
1439 1805.82 1411.63 1824.44 1380.86 1832.79 cv
1376.98 1833.84 1373.05 1834.72 1369.09 1835.46 cv
1364.67 1836.27 1366.54 1843.02 1370.95 1842.21 cv
1404.63 1835.97 1435.5 1817.83 1458.77 1792.88 cv
1470.85 1779.94 1480.94 1765.15 1488.49 1749.18 cv
1520.19 1763.06 1556.7 1762.26 1590.9 1758.98 cv
1596.59 1758.44 1602.28 1757.83 1607.96 1757.22 cv
1609.86 1757.02 1611.44 1755.76 1611.46 1753.72 cv
1611.48 1751.98 1609.84 1750.02 1607.96 1750.22 cv
cp
f
1945.71 1978.29 mo
1975.12 1992.03 2006.04 2014.13 2014.15 2047.47 cv
2017.77 2062.36 2014.11 2078.28 2000.65 2086.97 cv
1985.32 2096.88 1964.55 2094.26 1948.94 2086.42 cv
1921.4 2072.56 1906.36 2041.69 1903.53 2012.04 cv
1901.93 1995.28 1904.13 1979.71 1909.16 1965.29 cv
1921.7 1968.5 1933.95 1972.79 1945.71 1978.29 cv
cp
1589.52 2053.82 mo
1665.24 2007.63 1746.88 1960.66 1837.88 1957.83 cv
1859.5 1957.16 1881.37 1958.94 1902.53 1963.69 cv
1898.92 1973.99 1896.66 1984.77 1896.13 1995.93 cv
1894.63 2027.67 1906.14 2062.15 1931.02 2082.92 cv
1943.92 2093.69 1960.4 2100.37 1977.32 2100.31 cv
1995.72 2100.24 2013.96 2090.91 2020.25 2072.83 cv
2025.38 2058.1 2021.23 2042 2014.4 2028.56 cv
2006.55 2013.1 1994.48 2000.84 1980.58 1990.74 cv
1959.86 1975.68 1936.32 1965.19 1911.66 1958.76 cv
1932.1 1909.85 1985.12 1874.73 2030.96 1851.8 cv
2103.82 1815.36 2187.64 1794.81 2269.14 1806.51 cv
2279.11 1807.94 2289 1809.87 2298.79 1812.24 cv
2303.18 1813.3 2304.63 1806.45 2300.25 1805.39 cv
2258.58 1795.29 2215.15 1793.95 2172.73 1799.71 cv
2130.07 1805.5 2088.46 1818.06 2049.16 1835.53 cv
2012.05 1852.04 1975.4 1872.28 1945.66 1900.28 cv
1928.66 1916.28 1913.94 1935.56 1905.03 1957.13 cv
1894.62 1954.73 1884.03 1953.03 1873.4 1952.01 cv
1832.3 1948.05 1791.14 1953.66 1751.8 1965.82 cv
1704.2 1980.54 1659.81 2003.95 1617.02 2029.13 cv
1606.5 2035.32 1596.06 2041.63 1585.64 2047.99 cv
1581.79 2050.34 1585.67 2056.17 1589.52 2053.82 cv
cp
f
1489.01 905.528 mo
1488.99 901.024 1481.99 901.016 1482.01 905.528 cv
1482.14 948.847 1481.34 995.287 1461.22 1034.76 cv
1451.67 1053.48 1437.7 1069.33 1420.57 1081.47 cv
1403.77 1093.38 1384.86 1101.93 1365.7 1109.28 cv
1325.57 1124.67 1283.03 1135.58 1247.33 1160.47 cv
1229.19 1173.11 1212.88 1189.01 1201.99 1208.41 cv
1191.01 1227.97 1185.46 1251.17 1188.28 1273.56 cv
1190.87 1294.18 1200.56 1313.04 1217.05 1325.93 cv
1232.22 1337.78 1251.73 1344.25 1270.99 1341.5 cv
1275.58 1340.84 1280.03 1339.61 1284.32 1337.85 cv
1286.08 1337.13 1287.29 1335.54 1286.77 1333.55 cv
1286.33 1331.89 1284.21 1330.39 1282.46 1331.1 cv
1265.18 1338.19 1245.81 1335.38 1229.87 1326.19 cv
1212.48 1316.17 1200.71 1299.58 1196.43 1280.03 cv
1191.77 1258.75 1195.91 1235.89 1205.58 1216.57 cv
1215.36 1197.03 1230.93 1180.82 1248.57 1168.14 cv
1283.4 1143.08 1325.12 1132.05 1364.73 1117.1 cv
1383.74 1109.93 1402.59 1101.82 1419.59 1090.6 cv
1436.79 1079.25 1451.64 1064.73 1462.37 1047.06 cv
1485.06 1009.71 1488.48 964.122 1488.96 921.452 cv
1489.02 916.145 1489.02 910.836 1489.01 905.528 cv
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.1.2
%%For: (Tania Kiseleva) ()
%%Title: (cat_pattern_03.eps)
%%CreationDate: 1/2/2022 4:58 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9?%p\+4TG?se\&h"Gd$'o+IJSlV^V.D/R]$XE>(e=s)R\_h-MuRF>cB0Zu>7q1X,V\Hk=VTOMP0Q'Kd]H`FR9?Z"X/0k0
%@^YpUE^lsqQ<>L.C)HGlTDn]EbfoDDJ_Nk`F0/JZ?b=k>I\TqcS'=:%;JS+U1PO^]27)=J^b8IFP?Y$9rm%TGSDk8gPMbAt)s)sh
%;/9DuXc/Ck6m=]-(Van*<H&'</CMelX_UHgFB^=.#4=(c4kO!K(:fqY)(fJ4`i4t?3&<S@bjFS;O7mbK1Ub:ZKmC=K6"I?Edt$=!
%UMfDI%V-j'c`#rAc*T&9o5gJg$pL&C_rkEV,B/5/Dskf*8]ch2N>#6gn?0Yj5;>kVh`:[Mq"^u#0#(u=RNK+`Vr>#*[49Z@.mu.6
%n7-(T4a5VFQ>D^X-Pq/Hc"CS7HZ`"rMQ7-sJr'F`mm$W-=FPkuDiruXSS[glpmG_r7[N6'n#p.;<+[hkN6^Bpl<QYa"^oKC&/%)"
%aM"`XS<bZ^MX-^sj-`>`$%,cV5s]$>U<sr:.*X;p%d%SkP70Bd1M9gO-B`K,p9*[oU\h+Yrk4hIm5cQ&i@/'Hd5iiY!Tg%PS9XRQ
%3+uCK`qsM]"V#.$1g>.F:9ESXTYd6=CfDCJK7WlV="hUVe$s@$?p(hh)gc*UA,2tf[]d02h_(?&o*X0O]@E\1Yn30S9o"Tm2q^=6
%-n$#hR0!-iVT(@qTrJ2h.mpfr>'.)P!8\1RV+NI:'74R<XCn_6^*m'LRDGQF)5EX5>+:LlWFK'XbujO*gcf?SrbV8jM%1!BC:R?p
%3/!k=FojS%j`V-I16+!Af4S*]N"&?1nRnP#X"K48k-Q+A%n!*#3pWE^lL1%nKO6V3`u)Ob]?rIi`n*OCV)!eoN8^t!iNJ3^?T0m]
%jmk1E^heaVh[BUn)$X\/N/\9h;qo;S[Z,QKpa7]'D9QVHQjl:=.qU:G0O(6$QPKr'9;-l]2E('VN=Ec:QZ$\JL5cXfOVCuV/1$Hj
%b$X[:ofGOc^c0JlotjeSL@nHPQ+pb(n.kP&V=7L7>r@DM)!cmZp^Ja-YBVSN=Rt$F.=;kQ`t+ProtjU<Rn<u@)cdDT1!diDVQ!l7
%_TS72D(1q]?fe,ip9F`tHmtU;?O3jH8nF.b0H8RT?h%1&,A#-]DdLKC#L%pF<';h&7UD$r`)lkk'pO#pYFb6NKWgaPl\MaM1Sq\(
%`g%0ER7\9Kn4JmDf1?QcgLE.pGcGUkm:?HSn5;)GZFm[32OR#4_`V$eV5%-YEOi0]r#+gVYF&&L3n@0:MnBm60b7:r/lu5Z/4hal
%/440`;J2g_9(.H&;IuY%-mMT;.pHB'-ehsn//q@jY<#/':Pt4d<;H+YncnZ/q9K^\)QM;'g%Ve'j=N:.5H2dGl^-5=jiVm2G,?1Y
%@g>o\Pmqgl;-_u*->!"DhH"LLkm`kK25dssdj.Oj-*f"'hH4)VLaN,[]B:Z#pQ&5J;s.HcdrkK"o.L'ZjdaMicFa!eRdtgg?2h/]
%q;&@SdOjop4thEN]ZYf*X7CW#?2fK"f@FJ1k?\'k?^KY3n+*+5s7?.Np*%/mrfuBk2u/L!Z%:/&aD]kl?$9'%X9J&GRP$6p=mi<^
%DGgU0=7:E-AkMZT9p[W9.Q_PaD"ua5fV3KX0qL7f'EaXBPsU`GJom3nCT><sYN:+Bl1H[:cM%7e:\]2[bq4ZJHEbou;?Y\YRr6#B
%n'c:'"7]]RpIbF&8fpG.=aL&Wh*mKrf^O28Cp8a;AOu6`]<edf5NOW]%Lok)emZTeD#.Ki]pf^e:NpHUZ1hpGdD*:F]pf_YUq6I!
%4&R##Ek(-BD>R(n2XaqSP(r0Q$7Tm*me:-OX+!t=E)sklq6$9W_I//NmkH9f$rS7XO^Ld?0\A^"d(Z3i%`)9_UtQ6%8`tI#VG#N\
%W^G4TZfVflO/bW`.AX$:K<<lI/@MW#B]25cG'NF!PnXOgOe<Dt2:t1#MQn:p]=;"Y%kP\MV;L'9UTqO()pD^WgUiB*'OL$$_9tqq
%PE&ST+G5m!:NeF<ki_\YUGd\O")9QH'V3[#9tGnl#$NlF^.2]3?3]_<b"^^2TMd&IMi\W31Y@)L_o<b'P?P]$C+/tjRChZ37=)*-
%V7<58(?4Sf)W(cM4m<`QdSm946uSbk^SSbiM<30Fmt6moTJfYkO]%(0g'"4]Ttpq5,3Y7i\r.h<+0>*cV!-ejU/Ke%?oq#NK22^b
%D>a[d72IBWE#2)C`m"qCO7t[UQeG8gq/820;6`jfY%a^<PhsSd-Uj7%G$Ip`%-B0O;@IEa/#LWU9F3qA($#D#M*;,J(a-ERW/Wrr
%LIpGWP,.=/W"YY=&4`:-j/IciYcghS77qcd,Xlp09g)Sh(gTPeHb53M;@L,.DG:pLUE#<17Md"BF^RUpTt$#.Zqfo"O22#ITu/_>
%[-sQGlT+&E;X+,h2Qq)ADBm=6$oY6"(f6+EQ_)d>$45s@l7Vp*1&TJsg%^ZLGLa0T6lEma(J<-hV<Hkj!`A&rh*n$\?TNCn^LcYD
%V<H@rC"u'JK+7N>oWO>,%3e7@fVYP\?Kk`(F'.IL[p,\J(VQU]I-"l`:$F,(rb`m]iKbOK,%^"e%/)%9U*,)PRsLN-Q6'u]K`Mul
%DqFPcq`X%YO#nh>5Ucc2VmX*X#-3'Fk:LSVG*1'UoTZ(?ksO_qs"@e1q!YbO,UipG4YQrp^gQbf^f$NqHjb-q\<4B/8b&.^[rC9R
%4"['c,kV(^39l'\5EZ'>e5CBq0hZYiLt;C*!uYndkmkG^b$_j;ZA68nOWs-E#*u!UZg+lf+^kl8A">(kaO`jtqLo'OQ9%r:0dnXf
%g!7s^?iu_Ic0?M#7B`eL2P4I?UmDdddd<Mp1"^"^`P.74pn,Q6qs<b7eaL2ZXJZa=$`sG^mCSo4rH'0^EEru2EHfIj92CeH]=[R/
%#dd6@42WYI"):VG\#b/:*KbGNMW*JK4Z+f8Kef&_nks*b"&:aV?Tl#4%J38]V9UnqoN8^r,DB3FW0uYMI+QUV[u2a-.^hq6X;"P@
%/Z'!EmKcord^\amj5DXL7Qj?s.0bHF;j<k%7G`7J?2XV[>!Ga%p"36+%&aWCoE6TEm\6%Jh8!Ds]_hO:E#1HqicZh"U"qogR9EmC
%A9a<b?Fr;18MU,lYV/GCe[o#@h'""s820W'Q6)<cO/F"/He+a1gd"cmU@`uPrk%SBmE3Q,\r17dh;YmEgkGU:Tu$GI+(TpcN>-e5
%O-n9`nAYPICrH<O9F#mWDZh[7jO0t@It`)lomI@ZO3^Wq$Xr/1<JA@oA4jp,3O\1`O0"Z^8SU&3']HPS2-2'YEIG0jG8C?Q&a8tY
%8<Mi3<)3W5Fo+8coLk]dW9*nem4$"k(0\s^cDm3;FYVN6/,-Ef:<RicVn>`?dnbjWZUuH20JL6d81RC>->u0l:?eaRkhtng)PdTT
%hiiFQ`*`h8iWde!:l6m1boOfHSi=$A_=fjiU7^`+,-(8f=+]5gaGcfe#B"Wo`m?(X"!*eL2[5b]D(FSdN4X3KrM0]m`9tuX7,<N:
%lLBSZQq&$g]BJ[aDKKF/SZElcCqA5oFSM\VP9TM\mL2!.6qI/\pfC)V-AC&n")c4#6H:D>lF_rf[pPb/Jmd"<h*kbFeUrG._uT5"
%QP@P?U!urZhuNUJ%!HmoSf_Jm'Qk?,;nA[=(-JLC$\KI[ZVlD17#I[tml*9_A*D=Z5Z._c:/o[/%2N/+eH/-j_%+dsoTc0J6E;cY
%D%3qoVM[I-K_CYi#,U54?t5ZUrX/%r96H0I]*hu'J?uhD'OL#+G?j'NS/WMMdHS0W9+RsqMVT<OgkG;U"%F./K+52&FF<PgmkSU^
%EI](c$1;76.=0o-5q-\`Y^MSV88#09h"B&p$Ft>B3\^)`lXg?*Lj]6Ghn=O"nU5p\UULNL2?QSa/H(k=gEi.Y2nff%C6I<+5`2Mg
%%X;MRpZNf3W82@=*QB*tFO=$Er\/61IGEI_]5FW>kq7]&>pMrq.#]+%12_!6OkmYP)61hDPfZJRh&SZ67IZIHc8l9(*6P#)?t@iX
%+2ZU`>mu*k7LC9GfDFs1$RNkgUduA/W;#//3jJJbER`)gSnaY&JJ83rM^0a_)f2OjH@WD]V"alVU8J]L:jTUJ9/n\:\;Q?G3\\3E
%3ZN?`UE_S3PL*_VCeAm`n6Z8jEJ)^:)f4da1[]5L,)$`K.6Xeu'dDQ(gg0Q:ibhBW3PH$K>m)N""!SsK3Lm">g'i4:7Q@E\Xh-!'
%q+Km'#*u"\<2c]/?2FMsg[gTKo=d_,FQrN#[cd>,dS#H_l!4^==Q=bVX\u`gDGo9*>m,)rX7R*SJ+o&UE(^^50gOuO%/,GDU+kM6
%'uMV/I2l4DgU2F\INRLhN&rG9!%B+g%r-O+%9E-kf3@$Zm35!MY#=m@I7PCAs)fKprB'Ek.`Hq7#=dVj(i6nt3ARAYni(\-Ku#G8
%V>/6k6[mLZs,u/eYBTH=LSMT&=e,Xdd<ik!-@8A`f7=A(7Rq(_1"^qQ`8/Bt;P\;54gm.gRD\`#V[=H41$BNu7#F0LfR?`R"IFsb
%Kt7f3I?)O5Qf%#2ML`2#BC"BL#Z!noQ9o;VEl8&$RF0&\W4t.nH\3P!H>?en.Cq(;"q7s'G)!i1"!NZiDQp+$bdc?[KeGl5GL?0+
%N8%,5HM2?N9bkR`AHn8@?o!Fh_7?0=-QB.jT%u"*oLbRKc@/[`=hElF73K#F2,hXB1PQNBp>+QP9o>XaZi_D<EArf8Km;0:.;f.G
%VC4T)ML7CLO#Gf'2G^.9\1X7#\cZ\7/NlCWJ@k#V<AuVa'^r'ZKC32F.>EGtF;/f3,;Y'9$1515URMsA1Bl(%4>Pr7Oc_u&9bm[<
%/lRQq)9JI.mImVCmC:YDgqNE0KCI^,MmOu^GO@(M8R7d!&C-+.]:m(7GTUII]q5uf8ro@d7e"EM+X9;M:GEmRotD$JI#q"]V%:SY
%O#5Z%&$&7d\,hZ7Ls094Q(m#4.&@UYr-]gFYC3N)gi59Yq.+]3>)IjYhF*5Rc:[at^EYPOrBB_5)/7kp%k37;d$c.o2\YK8/cr01
%eb[.hM1L`38E$Xr8Whr4dRXu2N8/AkmdK=;X\gIi;he4s?RZ&!LQ=7We^Bo8EkIHeg@_jXD)LkLWd@UGmPemGg4f9:kDT-&cu$2V
%Ge5PV.M>L#CN)SMg+$/If<5%r3o.!HiQ'24X^0haT%Eu<hd!lp4**3uDR!2WPlJ7ibhh"`pbJJ04(4AF0LIp13rBj`rc(Z0E<FYJ
%G>@]&N;Pt#]cTf.663g^8EVahBu7R^no@L952Sl?NJc2(1\+VW<d[p9Bs(facYJO+c4*O97\r3qQ`5+<irgm,H^0,*K>D3q1\H^>
%f6[+V>H-/XI!OI'!pj!YWmf%F+)Y6\'O2'+CGN(`!^1(_);,,e"YUKOicicaP`14(XcKGlFrS[eoMYLOC3j7d^)6u:V(0W%[G45/
%ZX,,6;KO@iB:d#USQ>9$]6r1';dR;><6?!dVg_c$Al]l<k%3\R<ib#iB*\r'^?P\6YT_i/+&`ptm"kpm&&3(ce$Z'5]bZi6Ll9^T
%Xsc-Yja"C?EZ:FaG.H^,F!ae4Fa%-U#F>doo1VYD+h&i2a^cEsC],1o%a_V1<P34JD,"0Rh&*.d[8+\eZtI,#OohIrbQh2as/P$m
%^ZYAdl8a5A,o&A/<244d%Z<Z[U6Qin,6DahHoF,&.k=$L&#*Oi7A@fY#]4m_2Q+8(HUU+d0r7'5ghNfK"C4ia>4^U9]V<$I@=47b
%V/!d&f4VK`\TocrbnDDUCdJ3:'.k[1(JQAJQFBa$QjH/`b-t=2a%<-AY_fulp1N5),ojU;l&A`S=E+k$2d:/BT&HRYB*RD;`PoP'
%-ILn8LW>l'jU1Y9?iO@$5A-;@gW,lPh-.o8T@_3s,LdhmqVC>4Q-A#Jf9Ii`\-O##.%dnO/p-P\aI$m&S7nMRA[t]R\5eZDAsTm*
%Xj3"&de\q8*;hct'@H5_X^*ME4]Z@ub\*4OTnM]"pkiERV<qQ//h6J,>&H40A?IuF1,$]_b5HEM[FAgb=6k'fb5<;d'o80Q&q?6@
%XihCnna_Z\Irs/X?o@p$>nup7Vr1f;jYLK+W,&<,J'H-4'NN%Ej/m*`DY`:tQ(f`Xj3r**O.2'/edbnqQsTH(Of$3D<3E`F4C]f6
%W4KRjDOgC'=Mo!a.quRuAK59(g(9D]h>W\&=7r\YJ+Je%M"\#B[=,_iCcT7..:"Y!aLm!tj8H$$jttnRLAS:d]pWJKNoX"#CqA/I
%oVt4W&BR*#VhbB$HhYDp]7k:5RsKfY1<_U*>s#-q)b"sL/fpjg;5st_Y!-+p$ris%G8j;XejrZ':=^$39;-N7Y;O9k>mbY`,:UQ1
%V8!"'C[QI[AMUT]bj6Z4]Dp7%:7obsU/dW*lk5e!1:%pKFj:p9bZcR/[;tl4bjA:fP^>C!9<eITRG(B4G*Ao]A84&kg>,G$\<]GA
%10p^e;N2]J]VEpTs2K^lc7U<^[][trHKnqnR^_g=G]:1H9r5;<(g`f-"&ASFNlV*#kN-H&(D@.#l`S]?CSu0GJ\7aUQ\Kimqj!mZ
%T\G`R-;YRg%,])K"mY-7]ITfH>Hp`u;:X$mr9aDW;*C:@[@B_/H'c`8\g;tCodQ`CVpZtFWEQ@"YTp&JCgXY%:7>iBP^-dQXq\Qj
%k$Fj@I_C-(o6'_`P6SR?8u4:\Y"mG7Ib%BHW`cNidqE(8W>'P!.7L'o=\%Tg11Z)R)8b?4bJ<!BI"qA1p`\,$Y2Wr[OA0:+knM.:
%QEO4IKJB"ab=Q`g;SR;p^_GHqZVk"2F+9GqPUG!ZD(tjcl?-.l3e#r+[G#`Q)>:/mY1>6aST_>BG,hV!CNU_H^]4aRA&%Z&;SgB/
%S_`Cbhaf4r<(hXdm;@C<QN$7M/7ad1(J(f+FN%."#%ee,A1'ed\tNl43p7dsSQ"#]N<?m5U&Rj9&)HLgWWO,E*<qI]a*p]%bkI.r
%f]Y07XikLhPpTtN[prqU?gs[.,jurh0jrlK@YCNCdiGo;iF6;W'#Bi29JGN6L-3;6LQ*IT?l;Zmj9^S-S%o.oSm]VQ%(WFq9ebW?
%qRVH<+X;U*Ufd0$<uA6!5S6G^g.KM$FFkHml0?og0.'D4isBTc_2S]eNo+`N;Z"(ULK'?<#T4D9[7[Gff]WJ`$VSt&c68.4Ba3*a
%mP1kEWI00ODRtO*'da.81p/!F`Q4d.'X#+)3/8>)D5W)oO1F]upQ=%UP6WomV683VKl"%]p2g^DaANJfP@_%>>UJKpA[9E5fjpLe
%Z:l%'KrnT:>dq9G;51Z("*+.2[dpJ(X159sL0Ii\24SD_Cj`O;2@<N'V-)#brfjV@WD7U,F,ij#N>0o_/+>.PqH4s0LmMi,b$miP
%SaORoVfsSGQtU;_iS2%FHZ2FbH+dmspb:9W&,=KlL_1SM`]b4OGb.7f]UBA8U)1RTXNenOG5\$o9J-OL@-<]p_TQKKA[:e\=a6>c
%]M')I-4;JjKpTNk/hXKOKbnYB7]a?u(1,"*#!,n3)._];FE,aHg#k.L$V6'0K]c[F+?_PbmQbP#A&#nOi(gA`o-L//HD^Rf?q$MO
%"ssRUN(4o.rP4:ILMi(JJJIE.U5f2Ops@<(J$>hN<6D=kVqcF.I53dBYsXuhNoSLtj$#FdK[ZFqS7[cZ!1D^4:<(:NpX/%9Vh]DP
%dfB>-3PfEMK%$[JoY5Csd3<iAO*KaskRk#_HK8BpjHZ;jDKmO=)=k-c4@4rFn>!/0ZaK;d/=jq-4A(NYkA6RBVH5^0Yf9d"s!uEJ
%I;#ZZ.3:0(3VHqS)gj$R?At-c87=BP1o"8hKYq#_3i%V#8g=b5*XF3gG(/:i>A+HT\!1o?_nC%qZ>pJrH0t:)cZm((o1H,cP$?8!
%cRM][C*b*gC3?FVDZ*nmEiJ&Lhs#AY1>f&&0'*T?HXfPplZ6FWBEK"<?<Y`N]_+F<'@Q0t\.>GIDZACBNXhME:9!r2iF2Pjqn6q+
%n&nZe_Y[!R:2<%W,Q/rZqFr<@P9^&*eM1dn7K^M*f\V9420-"P#bK@_=5hW\Yb`DXEB=[oR[Z\L@iZFLd.;EY.,DR#DJ+LkK`6nM
%m7`,+q[jN:@\TP(11?8g)e:<)o#V7<Lk;;A@eWU/B#5Z4&!G_$5s?>8\I!n9I)j22c]Xb+NoMuV:)N'P0fVoFjPqsS:)N&UZ#P0g
%kW_-ehT$AlRr'?DDhOnPfYNs9j46#1itUrXJ)%";pJN4Weq;8K[DQ%U<U>H5Knpe;n#0J_FY%Y`pS]Qce8Cea.rI5hn`fcPD*Dkt
%`KjHUXd.?dbfK,H<m&2UfE0:Ip@TKVqc>97$YCG[V/f`H<;=[O\f2+QB,d'l%D=N[J&F]G?i(a[:JN[6pKu>r5G`i_hW1p?Z$2"6
%5BLbZe]f/I\F-,5^NSOY.F.#me?+dTAlkrhG'[/)]\UND$MY\-&Kc5CL`<0"h>8u`(*CC:)2fpf]!4IGj6fs97T,ejIu+[t9'a74
%LJ6L!HgUo81-k1dp(m;Y2V91;J/X3LSVQA:me8&[_>7d1D273#0TPR24<<de'PtY`AjuGXTRKEV&F.uiF18DODVWWKc@#hLBdUg)
%Gfr+J\Ar=8+%*S/e_<EHLUG(.dB45qm\LlER2IS4;7$.pAt/Nnc,dhkh'XdY*U2\t0uZFNn57*&2UBi7JRJt0IUL%/fWTT0(8m.?
%f_HX+5,?bh2NjX_I3eKGf^b?3<$jDkS*K<MMric2Z+M:f-4`n`G7RI^:UqXGpN.A1H\`+pi?h"grm21j.h;CNDNbOE6gp^1>,e*0
%oUTgjmET9:K)seWU[QhRe3eHWj_Dn#03;'mSChfHY1$QIK.-uqNiIFFmWInuMJ>FndV[\N$"5<YZpQX'S#iH+P-r]f,)r?'*\4-\
%h\G_VX]d"MW+tQrrcWa7F7A/)]&bbHNn,uKW2dd7<2Yu'0pG/l&ur?S$A[ORMs]hR`C[BM'?WGgKCjGaG+HXtM/8sYg%C5dL;;c4
%9''*aX*YBMOIpYp[AoIlY*7k$gS.UqmaT[dX9>i+$p<ri)8rM?Y>a,rh(?S#GG<YU4.n<.<'BXW$$V5tg`MVdZ?4f-;oGCS`@#0U
%T.(Ql9m4A^.\Da'F*tDSP8OcU+.J7>\osNo2tG<CT`5()CQo#^n5dbic/#YLV3jb;FIPqN";@8ofN`Wi6W5`tBkrGMJMbZ#gZs#Z
%id]%f;D^\W.@&Y%Duc/C<5J&k4']3nm]j3AcNF*9>,-OLX4/b"i%Phj2g!AY9KZ[>-CB%lM<C@Q^@CrFMc?21Y:OB!rt2"'6r-a<
%^WWHQc`cp1NN+buH6ga4,9o<b6k6.LOE)iFigIW6PfnX/1f*4\?N"9sVeNT<%5>ARYrZ4&l(3@cB=t.Y_W:Kk!S:=@ZY^r;"$5li
%iSr_#j<)7<;ebMNmY=P#OQY5=c=qcQ[XO8JR<kf-I1AJAHTC3*]:5q[l09\g9jGQ;T)pfoS950URlo!mSkM+O!Y,2+\'^f^NUg_8
%lMr2929(#\As'!k7Jc\9;8sIM[IWCXeWW^i[i7lY4sYAlk=XNDN&+(UFMA?NQopHd:l!-p3UaU&m_],e+3MJ\*u_4EGp;F$GAt3U
%PMe`-H6;:S7,uiCP:(A,TbN^h5a,]P#2YqlV`R]Bj.PqH[VDT\WD9m:N(pZ;frF$(^gsLc"IBQ$n<<$e4lkk\h)rjJr_*^>X_7'@
%iTgDab%.Y5RB)=j>]#VmR<u[ViaFQ@;YA,E@&SaF!/>l'k\)f49un[mF[[MYmrl"20fHA-HbZ:`4b+9,1j,1eBT2>KpV,>YA4:"6
%U+pOK1Ki+mXCt:.1ra2tiusr&Tfo(AN!FF\#5(a.`3V@Xr6/;VKu5V*+]bI#m,Ru_=9njV.if/s\QGtWj6Qe$<*T<]ZO]7h79nBP
%9)d)UFd@Fd+,cuo/'l0QAIL_IY!Qqi)^T2BSXUSqKq?DM'diOcaaA"^hj_ja`b)rO,*JA<pNjtEDQ\%9hn),E]a+<Xj:j\pn)93Y
%7BImM^<)%H1>rUB@l!#49_]qJ^;'s+<4dS!IEG&$d$/J=_<b:dniV>jkMa%UHb5X7qrI8ELGm=#\J0D=n(G$j*m/Be]7/2RB[/Va
%5h#-X8iG`D*UYBi*Uq0@'/qga]p^pa;/DJH5gCn)]"l70rB%?rLVP'Y!']^"`Veltf_5ZsS%:*P^W2CA8_":1DAWm&$Tq&q3o1[R
%It1'tMQI'V&.)%(FLOaAa4?jMbJ82FiQMueN+UcKIZ=%m?`B9)r:/DE&Ik8,:oeq!@&BpIfOGg).Bo_eV,OM-Ps`%?(=TCp`%N!.
%rUMDQcGAf_^LY9Xc!%Y\Y;euFg9%f,SGKo=EjUf%0,+4R66H+!WVDi-Uf//Og51d%>>ML4F`6(3[0*m2Z2*Edb^e.6b^G>H$i$OK
%SR/uchYo*,?];UrVg3mY]fbI.`EL*kEFEQ2o?\QrE8GQi5:IARcHDJF]$5Sed<0,[rbU-5$q@YPeKKWN#ZShtHrl-][q:d#UT1+g
%q:k`$/aa%ZP*XQfkt>R4Om-20lBK^:,:IVmWZ'Dk22*u.MT,:3]>so'ONn"bO/cAeMV^@702fb(?G8-(/^><ClSQmjA/eN3)QoHb
%Vbjg"WSB!'8u69Oekstt;QdT+MR+@^:8PI!969`.+R;R2(/D8bS]]l_hN\3Si'>l4#B?3s".5_r+4<oK1mPU)b89nt-VCCV(jElB
%coY*^PFX+3]ad\5?l&KU/'>VJ%,'9:e9r3\meL1R'VXVOfo)"cWQ'E@b(GKTM@XDS8t*mrp7b7SUAPt*c%Ff06N.(6;,TE:Z$5Mt
%]dRAO#>3H$pEcQJms@o0ou4G1qEs(s;LD#^;:8G+^0(=f;4@BlV^>DN%cB36fpDI1_-*a\GYNMDrggQ=IlcRaV&6$3&*d+]EAAKn
%ng&*m.[t]b:Kk>j,?gNn_#&0GcQ,2CE?t3s)r4fI4[6W&^gh"(Np_(N0#b`M+1e4?d0(+Q2fWpQ7gG&l-GN!Ve+IItGBb<kA('UZ
%Xh#$eBu,cE(VTH@gc->Pjfe^Of#;Qnr,'3sL=\S._DM+h;XM]QX>\eWbKPuFFY:J+mPRTZA%s*Ao%/IlWK]'3!I.b.C:22^k(HSE
%GfgAUY#)VrpoY!K#amZ;?b#i4(A*g%H<^jU)7iKtbab#(I)?3"^h6SQRa:'-qE^U(CNg"8eYTk0+=AL8fRsU$:dGa?1nhc5e3eV=
%\sQT.'<31h5\9%!I"hudN0k(i(29M[,.I=O[t>$WVN+(gmR-XUd5:BKs&"UT%DOc:q-1S\3c+bt\4s3X\(03i<UgM-G4*P18PH3;
%aD51CFBNafSRHiPjg#r)nJ/DQR5)SD&'NStMX0.lbO"2G6F?6sNt/$,^e;s"`$A1PS7rk,!>Wlt`9%ImfVYfUVK_">4C1A(\)6uJ
%%=J!QBn&L&ATfh9^1s(a?h!(V=u;IA!b(dCW&e*fd/7]rZ9[OK\)P,#EEb"r<b25H&BV1+WM_^:Pq@h"AHiiAkR3/H`%$66,MPHM
%7=Y8S^R3NfTY-`9%_ZI`0+sO3IDa5i;,c=CWIFV[E"OH9\+"-)#Q[((SH\`jo@EF6B5h-gDEkm_[(!Z=Yr/+%GkJb%'#Nn(gCh]8
%239,^CP8,"]<.p!#2BZ*X4o\C"1Nt6-/M[uX1G'V2VstX9Z,U=_Ssc@RKd5q]MPPdD32*6c?9',U`;Q'M__l/AHWA[W1a`nCRIol
%>CEZ"2qVL)kbkV<K:2IW\_4QF8]OOohWT\X#KAmrj5KImZW[NNp&BVR@3i6b$!u05C;i)K!*F;GctkM99.Bs*%Xnl+<\pXWB'I*R
%.[ditMX-S:h=K4&5Cc,p5Zj=kEVB_D1A`fO^NH"hQ-q6"RQ9aQ:!T9SbuU=3^RRc7V/K$6RIQ'H6,,'I1]6q&2q;&64RJn.OpH?,
%8IsWX)Et0_.%#FM8pp6QVP6=B^.PMPjn>5U$V==K@4K7`)kuM;@HKCP?^I=i'EeCM,>IWe]^lAP$Hp34]*6D?*_MIc/@M%Mg@Z;m
%^H5HCjedZM4H?Z(B[U\]^L9'VrL$F\[QG)DPagicO+Dc;"&IdTP`$'mNA&.J`QW>HZ;nQm[GlU9gk6NZa2DmpMjcY@S$[+I;E`T(
%8CDdffBDOuCBhmHhm'oglarie8hh[c@[-@%1MHf;9D;[B+\L\7=JN&C\=hAUX]NcmC+T]ME6c&H.&T%>6O4@?BP\k#iA)_#+s)M!
%*h`arG[ho;[G,^o&9A:H)#Mn$9UED'PuKd\a=WsG=+5VAc>6HFhqT^<iEb3;PZtmYg[6`(iapZ)($)i[OZAbrh+#D`[`TK/mPGS4
%C4V>OFpj?BaY[4]g6J-cGK]s*pB+:9B85t;Ff/2rhXK65?:E>3oi`l7#-oaf#hQ]n.FlVP8/i:ZPt%Yto37W1]2d#o36dcD.0"9#
%l9d>,\MI;eQmY7l1)GpR]A>Vf\QQfpKea4IMRA:cDECd@lHi)HZ8d8'm8`S!1<e0]37VWsBcr<LMCk/;q]@b+"dm\O[*ED]UQd4e
%SouahV`M5sB$*r3c<%lsGqU)=YO[)t2uMb?K6,&EB-fh]qW870co6#9"qp3rrJ''K)o(1P&ZB8Q]i8l0B4Wn7Q.o[^o5C^24:=pW
%Qd\&*[=4juf@B8(^YD:!QW<pN8[20rK@Djir!0%3!*';0ilMeDU*14onX#o+A^6g',?VboIj8^oYLp_QWEiR8!q%5#Tp5p8D>C6A
%fUP$@o?oQ+Tq7YS(R2KOd+$DGHgOiSCno<&Un]hfiO5<B7GG@l1]+S+d(f]uap/b^";d?@59JG@OWRS3o^i^mL1G\]9"rk\rq6/+
%UKN?V/cTiM_9bqs:ga7#ea]t/nd;?_RHLN?$U9mD._iC=Y#JAcO5Ul$/F[F6cPQs&%c,9CVZiDSNSMP)>#Y?h*)u]Y[qeF1JmBA=
%*R&MV'5K-[Yru/WHkT]%:C,d(QiMS=>5tL,CUET6q'ILlo<"K-jO.dGhBK:j5:gVf=a\IG@XNtls88jtHmt\!n_aA[#S4fJ7P"*0
%rRP/LF'l(<hQ55B((T,G]@%+d>eo^Mb[J,D(>?u[\1E8^hGZo/:X)"efu3hD-.GZ9WQ`b$qt_kM<@rcUDH/K^q[$9nY#L"1)bAdS
%8uGn9*4Fd#nfAh1j5nB@moncZf!\[rPi.Sl*m#u#elq%i@AK5YCkHHa4YO@R(2k3T;lt2T<i0+::<@iHH)dV$RKo=_RB?.66#=G@
%Uq,EHr)+mV?7K:ElAaMC\Ioq+,+5SqVODn-7]FeZad'`!c%k]iI@_*^BobsI<p/jbYp5E2X*>u;M)K_:mRQXq-Q4aBc*$.pN!C,n
%"tZ4u)K7LAUT1hP+[NtSUQcDs,ijFIC(\NeCS6,;@>>oM=_S#N+XtT[[?YO9c^Lt"\++V,XPsqtqID50WfXoJd@P)bQB8N2bZ2Ll
%DIQnt@>qn$2?*6I7B'1'SC]ehG#Cj**IHpCX/,$13FN%L.iOfhB&IPH^%3@`_t8-;E,R\1Z(1XJSh6Kec.eM9O4b9fILJamhPE8q
%5N49=^iR$)*en4;W`@F!5`Z,hp#N4!<^g',D,aHqXd;in.Y5f87Z1DBm^^fL[,?h+)5S05qW=DrY#[3`3t=K[PD-1I3W?s5c!ms3
%9Pm4b]eg,QQji_(X\6D5gu^UdPAZ;-W-f$t:9G12*9lJ\e?+Y\^Ql&XX\7t:)UV)+\L17"WsKqVgc&L1XLW6P:@kRB\p!@ens8'C
%q4cTpf8*J2=,OcAaS2`J9nceoWmt9+Y9`b?=:<b8m^s2PkdWHAZ/\UWANDp=E*'?fA87[;HGYiW)CH6M\*6aU/o0;eF+*WX*Qi$Z
%,\QjK3k8LlC($%+rKA,%Yc%p;eB)bmS7H.7eHd/h-rQI1D:dorQb&q#W@Aupmd8Ci_6q7XNicYn?ff4"nB>T'He93X$I6E9Ub]4R
%n6X^Aj/NCp%\q9o?]Ago)D**;Y.'5KQHmW<dRXI#RpNW$2b'jUfUOA#Rp0S_#3sXmn]U-rj3/1+)f?ON_NL?+1O1$+i$^$lQ0KQ)
%:`3*E/^(T6jmB5a&1J0LBUt`7$94AQ\^K`0DG&rC-Xn7#B,_3N!?]rD[sH&F,2X9`])(]7_scM)7EYT8#+mou]BV=s%'J.R2a;Du
%;"KQCml<XhS(9mIb16)eg)KaC=N(`e@<0t9:#&4idffTW7[*7!(<acQ&-SnM'904Sp(JTWM(*<`1@X?O^i^o!:+'bdVRm[nDVWIP
%G_<>p^tct(MT3Fs_Q-S*<S9pOMceocV.;9iQIu&`I<&AT;mSY$1WWR=0-(!7mOlebR6)'T'YQZ?k6:u<gg.n6(66%+:R2uG@O#5@
%-+Dk,)RdN=eo&'7[A$d.Br9LV:c+8#3MQ<_"$IM2`]A7]?[ThhKtOuD'3KOKqm,7Jb3eN1U1#a=_DSu"I]M?5AcU`(ja@7io&5]h
%\/lp`=MXU]K"(`*&6aRCjk]MNNPhn!81<4i7k`*3@^XE)=%\g>jWa,-fN]VGpS)HFr>UZ*f(T[[BJ%HaYIW^W;mr%:gqU\Bq7<r#
%b`oET]K8U;9_]a<?nL-`?_hbC-#^meWjr-d<EF%4TXYPi<s]Qa^<R`K9+!Lp@Ig]\V%();hK/WQS'A+FmJSuEVqFj!?Egi6^";u#
%L,7;'^3Y%<1VM%6G-flA#;&$<^HQnM]_AF;QT'(_r`FN>g6WbbS(mU#J,WuboAA0*fdDiYZIucI;fGs!Dm/X.l28H\?2CSkDMu;c
%7h,BBPW-?`<8b[<4*[1!2HO7rRo6!69?b1Y*In#J%j)iW(15\.(Ur8Zf+mguQ!#Ujn`udjI.XtZN*hM&CYjBXlL85"$?,npDsdQa
%LJRNfn`pc$ZhZSIIgTPS@'6J]c'bV<#+qLTioTK[Eq<rN^C!j6>4,e'#p0q>piW@i2LaZ;p\8lNrVMMFF83S&(RqVVbHlru.ViOH
%C^.ZBACr<#Isq=:ph\G5f?]JaWJtP+m<jq2^O3n!QPT>e7mEJ!)saP#.(&a(fCcI?b?riG+2=CMHeW/i7&u1<A8lnC!t4qhlm5rl
%@QS]!d?eG3q_:,+o4PN2W:A"ahNT[PUW$$$l$@MmFm8Jn`IdB=^MrlEcQCQ^fS/e?]e4\QoiWUGIXT^resW,H[U(p.M0M%V^O`CK
%IesT&YKA?de1u3phC8B.FjL`Q'M>_.mdR'l:3L\hF7n#FKD\%"jm;:/d^1VPR`f"7r3ij'ip-@9D!g8Hc.*Kfqs)^Pl057@T?=28
%NU#;B&+pD#*,'rPm+'G[FmYp:nSD]NcS42kNsk(4YEp'VGIGVoT.c,b_YWuGY/)0eMgt^W?+kNQ?$Ob3QsM:Ch^mq$T>%<@aqlAb
%B:.9u061iGo;0"sq0Z]Feai-hX/3;g$bCW^KtNJfZa6sfI(d"<VEJeZhgV"XL]74VYe"M_qm*Y1g3O1:>HPQ<Ygj)Q3A\pVjuLUD
%MHaWMb5R9Q1A1&EPeCAG+1AMB$`iUcHo"P:M[Q]qO3dCJ@W#rJI.;llXmYPgLj#lOUORqPs2e$^PJun\;Xle0<I4TgRpGoaKCUo-
%g$Hm@/X1A"l`g14?`14$],uN7T.J_mKX/eXKe/hgc@*ZMdi3?c9D`4H=KF'dC<g0gpsUE:H$2)-2>_MV48j8<2uAC`S7Q>,Yi=@!
%HQ90GnZoTkSU4N8P+>rEXC\$:?--XohG(+aT,rJDc7Y]is2a?J(?`"s(Zjg_m<\e<Q8D;pbGJL)ZE4#]aR\"sDmIC3l#0^gS2R\(
%Wu[M62tY_TjnIGHfp/;)mU`$:IPA)]?G+t7^-$jnOaU4U$ea(l-YqDPQg)ucqJ>1hG%:R8X6f/?qFPjGY<JM*]@bDA\"/r9m-`&N
%q<\*^Z'B`]Q7lk][s%E1HgTkjluDpC<;'hhl$E'pl17P!k2bQL1]-QFjWsa%Ld0.U*?Q859-<J\ZKJ&#gY'c=e&l"AC9OtqbFa5q
%CO<V:m*F[HT@qdoqKaX'jg:q_l`3*GZ`DQ];fe9IhbPg<?><Dsc'e$!g5`Kp`Q6=^'Jm^X/AIUYFs#%)XXmOLVHuB.SkZn5I/5j'
%\3)a@gA(ABTA'.Q<LMQ)H+c/E=5)'"%P$qI;t!r27oQ$:\C!m^1,X3#Qp%!$]8!'+=17<lq*!NkHFj)uWkNCg@54n)mu?S2_oAJ9
%=oIIDoR-K$_t;r^nTpY.:Y%@pAIHu<[F:Xpp3l%MqUNECcdQ[ADt^&8+)2bDgE3Si:[apge#/7U4C=WX1d1k`qQ!noRWeCq`jC)4
%GWl"X^AS)O9NM`3Qda44r5GG1]pIoC*^;5]4BhNgH21!8H2HV6cb@/CA=oCkI.ZE84o;1^7NOd?c16dRFr!:27gDhZcQ@SV/T3g6
%=ZYDhj=F)VH$$dlp@?V]pLa;"]sX8taf`"C6SUC'+*Y2,(>=gFB#q,RSM==DKpcScZS,ok[I_;(c-(<t1HTNIcd*T"\Q:SZVHP'S
%^/_=bcBNdBNL:ldhtLdKkJcc?Crt(;+((;ic/rWAla+/_[5,A,:VP&e.d,ufR+Y3oq!IFna/eLldHo?FZ_-,lT$9<"=eEBHq3Te"
%g5"I"HZB&&j4WRM`Q*o)d`9E)n^lRVQ$4`+O&t5ioZ(0_LS`&g-SJdir_T2e5Q96Jgj+9bHs1cB]tJRb\97K0-$mJL0:lh>Ep*/:
%3Q!b@kFV^X>''!K.j*qt^dlZj<=`a*:/7>=>j4t2H`jZS)0;q1[o;mZ=5Dm6;IO!`hV?t:1&pfK1H3)EF0.I;T=ZStIsb2i0`ShP
%I61ebEJ2<Ts/]?#airJbKdXFa0@N^UYA6@p]R6hg4aG9n\PM),esn+[C@8PYB,0Uja]80&QRAohl'I,"q2;Eae>f&lXLt,c>?Ld*
%SM0=n?)oN(f_O0%E2K'[$U8g9gd5fA^k?0gcCI_65,B3&]2,%Nf"O7PDf1f3mM25?:Hs9`B2=HCg%s1`Z`=Up;q7YD`Pn5]$]F0<
%@X^&Hqt%_bgWFeYnX,rQ`U>/rFr%9%#FCA9MpGRE@J.f=cBpbqjBc-CZ'a>$j1,]2j6^K?EmEG6YB,sfe]Q=i)tn)^n_i>AaXU$V
%V*b(P\#$e"(0gY5rlqnu:e/7lF8t!_2E-tPVQomE=5$=8ChR`jqpX9h`S(RallG+i'ac9D>BAOq$mE7S9B>p-r$C$:ZlS_OAl<Y=
%$8k_0]mi^gI[9Si5(C41?e!XWoPNRA-i3@)DNgCA6^.N)SpnoGf++k*d-&0M!rr7km@1.pfN7st/,!KM_U>>GltK:T^=4V`kg,lh
%Zhg.e$WHoB-]_HBqrpsVDmDl-^2Wb@`U+2u']1GUB))8"]m3ph][6H"Vb^"Hack8AL./hk2E"U&%ZR69_c,Ts1062Zg7N!%-RZK6
%g@M-M*8rfj^&;Uc^S"Y?WDS"O2G6$^m-K/)T"TSY\)%m$FmJXWQ!LHgp=0\#HLDTVWV^kr?Ca6^g[E]HT@r,X7pu/DZ_tuBb+INB
%05jNq_0s#P>lNejesFQMce"hWPt,aC[2$BZ\ZrHKp:.YR[.\WhV=``kj->q*I<_X6:%N#$$9u\Zp+M>.cQ)7]rn5Whcek?J^ALrT
%ro-L`rqW^<=aY[Er93P>qA[^d4PbD>Gk$1Km-BSc[njG=S:9<\'mNS/f4SGC/f(Tr^=[:MICWG:hLFd+4C*<eW&s^RV7k-M=*]um
%IW[V/PC6HB^8gA&hnEFYRId8F?S?i=aFC_pE1[+"fXY78r9W^hWr9)K^&#1?2-.JoDGICd)oVt/VNBP\_?tS"rM"8`C:u'dT5>XQ
%4o3e`XdOOJc*]KW\_Poj&"!+"qY-Puoqg=Xjn2X>ao)#4PAG]]r8d_'`o@RoRN!bMQhJG%HhDjJCp2CEbV%4+hrK^H\';&N>qBUZ
%lV);2oB3u<j0`L6/\GEEDd:!TGe*h5p%=Nk`R`M5[kG2\oCG2ThL?si[XQkuNApHG])1WD42(.GnEBH/S',=9`S7r:0?puP5CYbD
%$aU<^S7fC?4_HW9D*L7]8;Z.dI%5\lI<kbPa3Hfh*q-`iY82;AhO!KPO4BN^mXf_(\XPP/^[-F-e%<6DcVE'bE]Y3jHY_Lq](]d9
%rH.MkqUOVSHKe,lDnS8In"7&&[GGK0T"!T[)muYhHhQ5''_Ca?_3dHS>M@[=?Et[8_6LE?o&+igrL:\NGP;!ok0h*!iO?MrqGDG$
%ADtTjHMQo@IsGr#kb<3KpARYRGl%C(Qab0,59IUcpV(XSEcoU@4X\93QS3NBcY(jZI$e8(e=i6?q2=k=+$Nmb;]cq@0@i?+YJ:)3
%\@40$o't^SVtaubq]k^]g=Q(3T>#cJf&s,556&9C\c)*jdF742kNhg:m4[P5q;f_'G4Frml.amLPPOC\lq(W_r;#F7XT%3pp1nO]
%MYXih]6s>FrO]u7YI1-_q+Z'll#1q%cfa3.k*,P;\bGRE:UfJBH!:,j\aY#RheIWo<6<\bDdQ[:kL%l6M=^;gnH\7KX8PD`]s[n.
%Cuo&Ss6R7;]RSLWEct9dG$E!`9_#>Y^(b@$\"&WOo\rC*>u>C%Y)g?A]D<J+]DKo=YI^"9b/$)brNga_pYfWZr9F1p]3pk??0iTW
%SmGYZCY;ASY.AYa^N=mO=h/9(b506X9)7<?jY,`\mPY9H5E,R#erR_4L$KiRMll/Dp2$RIFhF#!YF7]@:?C1*40.qO:#,'6O4Q%f
%?TgK`^A^S\hGbTCfoN3"O3'u$\>29k4Z.;_g7-^\6gaI2`NqVUp870QLSs%q[>!rd.-@H#r<<5s@EY'RA6I2p]ZPXcDO`mF2k0Cp
%kI0(K,j4+b%!Q&r,0?pCXh8Z]9lrP.H4nDJR(1P-C4Vo:J)&2\gGjD8Z(7cfX[D9<]@3pib4UXm[aRX2l>SORA/\cuWr=USJ!hRn
%OmK=;,H8MU'])csI_0W`QKiF_@"3%R<,@@pm1#2W][=Dj?1(??mnq!%fA0d.5NL<KVcpUs[19/]n7h!t,p6*;o(<JFFnV+e8:0!0
%W[6lKe2"*0QU6&,=i">9br>Q3::X.g+Jr<hE4cPh5c[#+.EdZr#Bpm_Xd7Y?<8(fD^XbYhQ?p+>dpfs?%"ZiQVp=YT$RsXb17e#E
%\CoQ9Jf@De^5\`oGqnHD8'ZABc_s3AI,('e"(j=RDQ1(\i5%7GNt>Q\2=IrD^u9E!E$Kj29Ifk0Aj"##W'bV]'#lh4TJP*C)^"S4
%WYN4ecrF]G>p.GPa[DeD9hC=U)mj\4c6_a0Slc5u%TW;:\0Q%)O(_XHf*BjaBr84J88=,3TO5:/Kp4)$BQUpd\R8G]R&CPe3]31!
%#0VZY#Pe&d4$e"SIk*)n"m"=9Y.7G(gc6Ri:"2ZRHA(aAdYDLk#5'FtVkTB%Bmm3qHo3dFXY4([IRiE]F;ejdTqT"L4!Tt#>'$1P
%7_.@dY7%n7K0GC+b'`,R"C5H>X;ap@ot`dQ0"ZV2(?;>@C8eH+3u@<c#7U%^25Qou=4O`,Yq_#V>1E!]YI?XG'6]-5\=nJ^e+F>Y
%E=2i2+Me%q>]AtkAl/1eOQ=Ykl;g!SC9;a6W*R#N[D/c*,p$:c:BY#0+:If[']k'ughgA7H*J$k_LAUbp@i2sDY0mEB#FG(O&QNX
%>Y3UqP*&;]FujH32;QhQXkGg$YWG9$TidjDI9WlJg/$(fdZh*h2)tMd<$?]^mktg[=esGk<@1:3!`eLe1(QY&8-J?Jde;&66kn@9
%-cPee%?MU)UVCT(X40u]p0aQrW-_LQhA>m`Z1TjVcN(DR75/O+11UR%*IASa\kriX4>!C89L#L`[W&]WriF[la$\@3jbo,PRFBl5
%I_5UO5Yn55JZ]<X@W.+@7QHRGU9\(T+\h,6C=SL"3P:%SN:M8Iho\#_pB8OshM)]HDVXORlYmBc=C;)kgd-.srRHr_I#b5^Oq8U:
%GunpLP)n0]X2Q-$%"jQAK`7R6KGm"`:=;B`j6!#%],45>[eoI><(.kL*FHQ[L+3cO&^Z/:on"S,U)DAX"1Z.^<IK-!>qE>.*ldEF
%s$L`aBYPB1fc5;J5\PaEb7u;)W`-(m$*?XUhD\`6Kh&uHV*/=.BdlOQ&o_JF'kEF";t,Fh>HA(geh)i(SQ>49_0h,S$Y!E6MX)s7
%_aOrPCZ=R4md8`%'3'94Gq`IoWa%c@)"su5S@JGQ-tC#DS]G8HGgG*5g)81BJihP$da0\IWAIi+enomW9pN%b]uo9\N56_9<Bse,
%r,;tI_bTS8eFjT.prciN^D>V^e1E>,TU5Yt0sYIUc%M[!h.91L+P_($>H]oS^CrM^7>l&p(V";7?,XXT;b>b\Q7,\G;GhO.^[^=N
%*]SU,Ee<B]Sq2aAZ$ur&d1d1Q4Ns+9BA_^LBkI^Z1)*MLc#?A45/T`kj['"YGB?$T>nr4s![\pCKKRfH9]Qi>h:a;_oA6BRU<'6W
%(99EFpZ(.\rGOc:,,pYXI/%?KcpUD4K#@UsRFMY&QpJ((m!4+BoX`!^enG^\,^4pV^?Mcfl!!Ap,[HkE&jK71I!qZ?OpqNU@>ffU
%lh+Wbe#E@ag\[k^LlA#\I_O"?rqGBTs)kMOhh8PBl7Xj"i0f[%H$L9DVZir(EL3""[0DS*(`t=_;ro_0??Lc\8GGJWVaZr3'$E6G
%:ESebU*e9MbZiUQ11_T&a3c6BT0AE"O)JdATkiJiI0ad3#-Ap;Y-WpY\lI+r5kEGic(IN(?Sj\_dJ8">k7nHWQ!.@b57Sqq)(7GU
%Om"a9MVPF[DgEGkYB6t#!U5L>H+X!t4hPn+%f9#=\b=)-d'XH/!Z/OnWhkU-fF8i3'Zq)3@X(@i:8=%M!tXPF372hfr3ndE>9&rG
%kU$m3F5*#Ud:2*+E'-+,(iJ\fikQlNCuW5W%dXB0lq(DL@WdXFeq>P09lAt^!sgk:EU(;69k%&kMug(9I-Q5VD4P'l7>PZ6`u.^0
%q/#$;FN`0S9EY;a1kl-J84V9DE@]'Q4![`d7grj<+:W57.>9TfJ>:%.S`RA`M<B__3Ela]/E53=j_SP])&imb\q)jjcfkjU@p:3k
%;G2cj!ghODbLhQ;1PdJ5KgZq'k$T,tNa'(HoBA0PHou%\W/F3P/:pGSG\YLK'_#989%1_dRf&hJ2TmgIN/Z$?"1&D,Z=o9^E2h.Q
%@0sLnehh*d0O`[C1HWWn!l^T4_e1Ao8>8*k.Ud?-QP,mpW=IU(=f_q;AM@@S7_"&eX`[RKn7`D$,ZuH=)7\PE_>F=e'.q$P;(gWL
%a/K9f6D9$JChCR-3Qgl8K]R:b7OjO2;VTK![ZuI\P>-b1cn%5RZ5d;A\5ppQWj.Loi;ouQ,T55h"sd'm%VC(LC/?MsB:7*R83n#c
%(`$eKA_9g3p5i_:+GpW;1Jee'PM*77ncm3<SE)M4a(EmfiLl5fQ4CK>64:UP9&[c*a:*A`Tiko1&^c:p@o</l@n)>O]n"ulpl1XL
%]82oK^S"sMZm.bd6X34i?4&X@FANPgo>)07$ZN(7TQ`g@_%eYWlS&Kq>&_JlpM'odJH`%"JBYmuKd>k4S1Y^?h7tY[,\ThEdW<bB
%Sn`df)^$)q;Rk9lh.u2H>n)plj-)hq'TrPM@PX9eEHs.@EuKi51;OM-`Cm1mdm+(i,[`ea$0W2a3jaa`TM97OdjcBWihC=fKpi$Z
%"'RA=ZZDci-o.eQW.qf&d0%u5bOi_/7'Rkj"pP/JO2YQ8BI:R[1)M:ATK._AfGW'*V?mH=>+WMjKqG&Z3E%:nh@+4"k0hW%MdE)R
%'q.Dj1Moulcj#J[opMI.*1@+r^dc.7?kY>U;(8\d5oD_G!ZPhF-Kpb(EpPN.3XVgOYW`MU$FD:<>3K6"?S(Cke'cW<TLS28M*TZ[
%A&8tH-/6NCKbq->7/(H>5^j[<"tIs0BO`'9B,Y:`B*21/V9#qF"0IW/eHKm4F\DrHi`JcC!gQ)BL.r!aKVB:tEXA-CBK[Xt>QT3u
%RgP4IeZkFacua7V<#[GY25eC4/q]a)[c\a+m1"%*O:#aE:%Y2#r=dZi2$FBk,XJW:6'Ma8AY\.Lg1Wb[_(Ym*c9N=+\2@4nqAHXZ
%Cmh&u5e5gu_0:G\ZqN.lF@dmd9gBV/=X$j%TW`HZJsq_qFL5)I"aW9"AoK\-'3^-eK#s[^1[.sh==^`seCI%6Kag=j$SR4g>*rcN
%Rl$t>YsJ+$KuU>JI%Ccq)TVqrD!Od)1N:_M"ZF0pktkMr.'NfQ;`:)H$),!89a`0Y?E9b8Jj[L\iu$u+=m2eA*4!*=<L2T"Ipe5^
%E-RN,JmX(,nBjO8)0d`%F#@A_5ej">m_Yi/Lc3;4+FoG8ai78QFYG[h6kEKH;7&OGj$@\HY\E-J#`]KpiE%X8'Rg:n`f/jB_-j([
%N'K%*P,9tiY:c%A,,9oN%$ArU?KP^5TpFmt'H[2ap74V\mom@_N)(<7.!d\N/KSL5.5j3l-@8t,BoiB[BV*</=%r+:2FG1>67pOt
%JTh)YM[dJ8QJsf_OJoOtkuAOgc,;"2q]>\N,\]6$;))tBkack_(s]Ct:kF_hb3FT"1)9F^GZG3C,/uKL#fhlj]=EYf3a+]<0#`VO
%MVq;Sr))7.)q[t(F(gNR,T%Sr?7*0/h=DG-W<G`rE=IXhkg-J4Qq*#>#g:TAqJc5&%"fqkE/#8[bRZ>3%4Yg:)"fU!e&@u]_,q''
%(Pou6h\&8]@ZPfpS;-tO"+DB<>[>SjMs]h_>3L2eIi>sH7WBD.5^P'k,@Gm3EM$[5O(E"+-7U&@!>_]'Ni#B&+L3^S!$em3RQfpZ
%KQV_p!uf=8*J.-EbQq\d7pc<"!/uXV*W]>X5[RnLBst0R)%-X@*DI3"%if.78_5]r![BNr<(d<=J<!'V_f8]*]lHtuF;Zbe(ji+'
%0NrL*%5t/VN5$K+7K]ok8Vq5:-U9i8IaDmaF>L1_Z'0"RBH5!6e+UXBl34^X$::EFV&C9H7N$;*_RrSOh8Jf9Xq"o5nF.ondEsd)
%,7%dm[MTiU*7HX;M;H1:8V@J6@@XX%)J<JDAgS+-LKRjld3_=AfVA]d0a5Ao%D)]6R&NU\SI(5Z_@n`h"<#=SjpM-,).LZ2p_Yh9
%b^uN"4Gm2iVG\8c0NCKT.[+sfA9g!@<CmB!DNFuQ/r^UI$lpX-&6&pg^^bs@aKRr_MsF[P'j&JMC-@q+-ia>Ekb''.P6u6]3!+`=
%^p1o-.%3!V.a/TCdBOfHc8T.lKUA9%4X&&=``&<>:M[9[1kfl3EM0uSK"$@BJFHO)-I,:hp*+UQ2i`NMJ?<3K(so3)b(YX=bY199
%24]VF%?1%<e73B!*Cmt_:R)A.1YQNOU)IJrBR?>m&4t5Y3qo0eKqL[:@ghZn<sQ&?6^SDVRjjP/&u5msK.'ERW7ZVSqZ=sV(`Vf`
%b9/d;fj_/fj"dIP@NZ5W,)-l5W>NY#R&Yut7X,4n&n1@"-*Kc9^aTQcElN4)\eMOeYLV"'$HJ1#M2n=g!stnR1PgXnTLUl^r,KTH
%kf5Op^f'uIGg]ENQ2aA)a*3njGd.L$d4o%HVR=cc7,o07'G6%rMg6_l8R^>@5m:]HCLlDWcr"7%%!tD-P_g!-8.r79W'64l6FFUB
%AQ;HpT%Lo4g(jl1QAI0o'6+G>1sR\PN%dJ[8W9*1Ts+Z9:.XK@9UHS^"YGi<DMu[=&L'e!P&qQ44F+ar(m^]S_%=b"0,!o!36.e!
%$ro85^c9q405'%2`!/t\0W$$R-do79_*cip-S@BV`[a>LD3N,8+&t[5Lr1OKD@t,,)Zs6l_TAJWjb8W4\/7@D<*7?Q1n:&Wp_aJ?
%[2>h90[cWW0h&:h\Jn460U+NDBFS0>^-l&FR6HQdEX$"4+tr(g31i(Hr!RnK/rPEk#X`>9B@$-@"61,#:>K;!TZ]1oLeF,&6s@+V
%(6Sr<ZWC9En8l+3`MI[bV5'OA0`MeFj61Bc$61"P1Qc54C'of5%WWbHr_$4Lj$9]ffdsB^#0,=%R":e$Eh(J!@St*a>)m3hM('>;
%>E.XL*%G`$b?NKsIuEti-c8rp3-Q!0!'5#=jU[)5(s^WN3C&NZ:bIFXTK3q#BjRTf_]'=@"R$VSd[E5,3HS)"Lk/F(R&1Ic!K2-a
%hH5>=#qg;YoZ+D-2ok$kQjF_':W8/06^,Im!YJ/JBs3MK%N!"7VAOa/U-WseR+k<Yk+K2WFWh'H:X^9,5s->,5L=n;-k7W.*5`6o
%L&l%IFU<k;2''pHEcLFR2'Cq<;64C:s+sZ_L+iZ]BlGDrgG$a)qK!edpjK>u+Q2Ar@k05F9hZ=A?7r+ti9B=.Q^F#4nqaiKAuar(
%MLd,klRNkcMd;DiqZij.at3!Z)"XE/$q!ca%H]?(iA4:beOHG[P,ODK?oSL-GWUjYCbH+MKB9;pJ-,mjJL7_6\5YlLkUV>/?j"2p
%Lpi"gL4tO&7Ba"c_;s+*lZ-0h#N4R"eAebKH'<H,S-'2s1k2B_)C>>A%aNL-d%cME&B,N=/LTH\Frh-nTQZo1J>F,CTbTqs>[T<D
%ko+OEKm8s*,T);R0lgL^R)HDB$@jY-(^nF(%pV,IDAHZ6.7PNq"&KE<E2Co*SnGtJ\qtkF15#+j6cN+]%/.K35T>S_""ah,'?ip*
%/eiO44PWG:@`9!n[)2(fCdfm<)Ao)M@Zh88CkAY=i&GfuI+0EK>fq%P;2d=kIVQC4#TBfQrt^ZL$H%k2T^K7>P9O68K\fV#QA0\e
%!@Q1K$(#-9k87Ai,b^u/';Hps44F6WrMH#g@&bYBIoAJlf94b>('ZD<FZL1/`E37!Lo@usdlBG&=h$5@0fUR0JQN?8%cScs9bH!A
%_.VauCI#H*Ca3b)'9uI[$U.A,Gf;R\5tVQ[0YS.B9@=t[K-ZtV&khqYNN;/UXTlE@'r`059fbH\b.rN.P;HR`Q5$tpdg`Pj0&eB)
%Z^C,hkDGNa0d\\r/S)4B8M%u9Z!^eg0UCt7\(D#4%5^=F8[7s-Je/b,`IVAIe6>6k^fY]KVi+<%p@X#@Nk/qG\]SjC+pc"N*hsO=
%\UsOMA&7sa`?e\Y_LYsor'QZ]34joU>W&:2Chj,>/keW.WS'&.!L5G%je.<V:^kp4)?LD%UN[B6#fT&3U(2>nY$=>b-TlZ=]N_d,
%TLPho9!8Ic(90V8h8`Wr_H:m`YttV/kWslU.YNNO#RaW<$hFrGWXop]5ZjsO=I>/R:kc,-+(:iM@:;HTKdqb0q$7@*#Rg59(?-Jg
%/;UMAKs36Q@3Gtd@6VOp'Z._=#RaK8$hFrGU(A+&,:o9M=BH,Cd1jI7I"Xpe#Rg59(/5r'1l/AL$=TVl_P/K4L&)(5V@XL]6s):"
%YYZEMd1jGaI=t$f#R_(c/=Jn-W/n.oKs4Aq@3GtdTg=?c."m<N#RaK8$hY)IU(A(Y5Zih/=K%:b&;@>b+(6<"@3IpiKd_V.p]q7)
%#Rg/7(8;?U&k#iX6<K&)YRlMm&0G=($=P)DKS:h-Kd_V.."m<L#RaK8$On:26m4,27p(R6=GW$B&;@?M+MpH-KSB1,$W.0;;$[P,
%#R^q_/AsnXLl\bOKs2+1@3Gtd+[Ld8."m<L#RaK8$h4fEiZTiuLp.GEYRhmb+UVX$5/KW#_Erh[$W.0;nIZP2&/O7M/4:X4,`&Z9
%Ks2+1@3Gtd+[3b0'Z*1g#RaK8$h4fEU(A+",:l5+/0p%U&;@>"Ks2,BYRhmbTaG3O6%jqAKSB1,$WRH?oaqt>&/H0P=K"PgW/n/Z
%Ks4Aq@:9LOTg=?c.>3EO#Rg58(@!+q9HbrDJ?U_]YYZEM@1$G:5/P0!KS9UB(8_WYl6@iR+Y;,5=I;EWBFnT\$=TVl_SR#(6@FN@
%.>3BY&Jh5T(?Qhm9Hbt27p)-F=BH,C@1$FO5/P/N_SU\RKm<q3$R.,q+Y:i-=I;EWR#eI*Ks7d(_SR#(_L.#j.>3EN#RaQ:$O\.0
%9Hbr\+Y6;1/BgUdQpOnW&7JuS@:;@:_A'l(I"[2&KS9RA(8_WYjs)EN+Y:i-=I;EW=:enL$=R@,_Eo!S_L.#j.YNKZ&/OCO/BgUd
%QpOoBO0C<lYco7e_A'l(I"[2'KLPV9(9.?M4c$:<Ks0](]L!@GUAO.H4;>C0E(*]@fe`u;BF8"<5.I=9E/"/HMPe0()?a+u"g1ZD
%>gX7q6@EfA;r@ulJh*8k=/ZY4BF8!Q5.I=9E.nJ3'hs60bQh3+"g0O$>gX7q_Lg^'k(,&,#?Q]_=-sN$&-]5@+Lj`P\AEW4Kd^no
%q;;TWi!KjD.n"q=bQh4*!`ta"Xq1c>YTUGB'Y)!o\3^n>6@Eg,Gi/o<Jh'6?/(=f*L]UYV&$?HIY0\<$656prI;jlgE/"/H$;o^g
%%>$)uJLf4T=#:)`:`ir!/*(Zc'ri#`=:e`2$=%"'\3^q?_L-<V.WC(F_%iuc($:-!<.QRD#?Ri*='-#=TaG%55.Eoo\AEW4Kdq%q
%"i1qR^_Q!a.o_'MbQh4J!`rJ(>[[tE@6V3<'Y)#-E.o`[Ka#:-Wk]A3K.BoP/'J6"Vug%&&6tn9>[]h+65@!sI;jliE.nM4'ro%a
%k(>0`JLeqL=-s%j=:e_G$=%!H>[[tE@6V3<4E,uX_%ii_($^E%bQCqF&$A_4Y0\<$65@!sI;jliE.oc\KmMYa%>$+["';E3Y##;)
%:`ir9$='8jE.oc\Kdq%q.WC+<i!NKB$4VS;<.QRL#?Ri*=/ZY4:^+#K+Lj`Q\3bU_KmMYa<T"3ai!Kd@.o_'M`!9A"!`t0gXq1c>
%O<D&"'Y$JWE.o]ZL%sR5;;_cfJh'6?.n"q=7"Hl<#?Q]_=(hS=+UVHt5.Eon\3bR^Kd^no"MbbH^_Pj]/&VNkL_$X""g3q0\3^n>
%6@<a+-uan8i!N?>$42;77"Hl<#?Q]_=/ZY4&-]5`+Lj`P\3bU_Kd^noqVV]Xi!KpF.n"q=e-B'2!`u<2Xq1c>ciCRB'Y$JXE.o]Z
%L&0^7;;_cjJh'6?.o_'M7"Hl<#?Q]_=(i.M+UVJJ5.Eon\3bU_Kd^no#/M&6JLf4T=,6oZW"6$B"g62p\3^n>6@Eg,-uan:i!T"i
%'cI3VL]UYV&$?HIY#$3F+UVJJ6#_N+E/"/H$;o^got_B;^_Iaj=,6oZVug%V!`u<2Xq2+KTg<XO-uan:i!N?>$MD4MU;.KZ"BUB\
%=-sN$&-]3j+']rr>[]p;Kd^noq;;TWi!T(l'r&JY('I]p!`t`j=,6oZQk->2"g5'P\3^n>_A'LH'tD,.E.oc\Ka#:-Wk]A3K.BoP
%/'J6"Vug%&&6tnM\AEW4Kdq%qq;=k-()eg86G<&14b0Y2KrsQ&ZpGM7_L-$N.VOM>TbXT#($7k6<'`%YLK:@*<`fo:TaFt35.!Wk
%[).3(Kdpbi"ec[2TG?TV.o\ebb_K5tJlYtb>+l:,@6V%b'sti*BS@pLKa".bWh:*h6Ru,%/'NcLW!BH/+LFHM[%dH=$<>0)Y(.7e
%J/(5'X&+MNkWZ(7's+,[<.uf$71Xu"<.QO1O/Ys0WTZOA65?;j#7qWM&/F"+<2]jtF:V0(lI4D'.>F-Z>(KgcN3iY#;::>q-'D;:
%fSkto$nXqPJWN)k=qQU"dY^^*O]FkJN3m&-1"$C3[8G?Z[hD:_gl@Lt\/cfrE'&o`_X/1SL"e?1$Fc0h/)6#E<k&khXb`biBgnhP
%8LrSRO]ESRJ[E:r(hlEp&gj`".uCXMXVbc+gG.+`\!'?5gl@Lt\/cfrE'&WX_X/1S7GKIg=qN>.,HYoH7TpBq@FC$(MNLrL*@%\*
%4%<E4FqSMCgJQB+[pu3K%/8bW'hF=I<k'.pX`-@YZm)X^O]Jt4-*;,JM6nHg,=kuM!f'>tiaspnMC:;T>2aX`[)225dL%6h8Lq<D
%'d9[bl\gm+\/cfr5Z3iR,2+J8>2aX`Zi\iK8Lm-g(hn]Y1"$CS77f#&V$Wq4n2:m,$FaN@(%>fAU_Q7TO]K7N7nG5JX2da]L))#9
%i0%E"ZiY5]!boUr1"(qFU8/NV,`l%8&gOLq,Xtrl8-3ME+>M:Oa:T`#?m$I;XV`<Q>/@1OKX;qeU8/NV`(2B_M31gIP!iK)e0o%M
%+>M<%5nZ^=#)SICKHt!SMF!Cr/#'U`dY^R&P?&eTJ[AmJ-tu-"2G@9d]cA?"(aMRSOUVjGXiQfcP#atPL.Nm"M31h(j93m</mUq;
%/"k$^dYcE>-u$XC;::?3=dZQ?P%(4%EG:fI,"diV<ZiuNZi\?(dL)@PN3n`^OprL7JPeO\[)/p^Bn]bGdL*IH81Pm7#a8<!'dKi"
%.uCV7WDV*$8.(P]\<THciDtoE,%M1I<^cj#,HYo88m7@N>DTX17e%=07>uh,dY]#U6DP>V4@Mgl@_`A8<Zih`=qO=\dY`h^6DP>N
%7#+>a6KBP/L"e?1MMPf[U_RbpO]H"-LpS@i6DP?a'IBl#4%<Difis-:P+[n(eTtoj"O[XQ7S,+b(*fr;OY]I1&]Pb:XVb6#Zm'P0
%81Tc?-*8"fN3m&-8Yd*c84'*e6]7(-Uh>RH<eL\cP?*@;$^4UZ;N.t,)DFigJYX].7>Mp.XiNs;O]FjXKLm\UPX&Ca>neWfaM&(F
%<eS[OdY^^-P#f5C6.1XW.83nWM.+hiBY4mj7C7&nZm,EtR'\&Z.R[GPeW5ko_"C2g.u"faXU&KsO]K+-!i-PB,>),O"(I4r+u4mE
%/#!itU_Q6i,-;\cN3iX`Cm_R23Z'6H(g;m*!]0ErBa*MZ"O[XdA#'i"JIdlD+=VlK_X/ac"]D(j'iAe3[)22IBgo*8KLm\U'IU#%
%4%<D)U^1[ggI\1U\`OGIX[#dKZm'*,1"(s#(acA(4%<Bc-,`>)6KBh7L"e?1MC:DQ=qSYVR'Zod;::>hVF=',\7-I%Xb]h39Ni#A
%[hrgJA.4T$jP<.u'lGC]<eP^+dYaF)L.NoN:*Qfr!BEPO&Q@XBBgk_dA#'jEck.V,Lj=95Zm$jY;:5f\A#'j%'IKr<94Ob4&KQNr
%.j?E9>2aW;Bgo,6KLdWKNfdA\>"t6g,$/nRU_Rdf81R"W@\aa<;'FAF;!p#O781L,U_R<P@F>LlA#'j%'I0`!4%`Zg^*cTXJYWFs
%$Fce+'l\FqdL*M("O[XE8!L@^iFS7\!h,39=qRMsLpSAHcOae:+VktGXs+)@-tu,k&L"94TdNN;&YiutZm&DcU_RldR'\&qLlte,
%PCuLXBLNN]MP2>Y<hS9DU_PVuKh3eLQ:+mgCGfPK$7&&3.q3'P7Ttpu%$=R5.8!bE;<"Ad8;r[3`#;L?ZiWfjU_QF\O]LNc+!RgP
%;A*]_d,Li9dFJoXM?n!,U_OIT77\pQ&da\$ilX.X.#X3U=ttsQBa'YDU_O07&kFP"S5I^l@Dk\eL64`)&W'rEMG+A><^]iE[">X>
%#\aJ%[4#_mWYHn`(d(8k0mJYa!qYFTdL)@gPdCMZ'IBjuH4joq,17lR`R&+j'p01TXbbI\Ba'ZoU_QEm+K[o>;::=5,tqKnU]f*Q
%e0IXiJbhi-/(dX;dL(RV&^lQQA#'i1MN_'`0hPU]G70U87*EVA/!(YqXb`c,Bgj;d81Tc?-*9F1PdCLd,`l&'gb<FGC(VboJGpgU
%<Zj7l>(NItBa'Y481W]R&8;<*NK@0`-%WEI4!R:"&H[_Z/)k.qdY]G09Nm!T01oE!Uc<&l&u26;kk$9;79EoUZi\iK8Lol:-*;uH
%MNLp^2+h&'CSR[?+``OK!n'J./!(GkXah'V+K^1'M3(cR:IRi*i6;m*/)WpmU_WCA;::?kkV:KmN"/_5MIFFo.r]2(BuMc9U_Ue+
%P#_uIJ[AmR1"(qf`^hV7R6Xq1bSY$tjG8t"$o<aI@[JmuMIFLq.l&PG=u"5<BuMc9U_Ud@,-=+FPdFne1"(qf-BM7:1IbO[P(ZCW
%L7(G5&_.>S<^]iQZiWf*U_Ue+P#atf_k\$pgG.-6@E(hgZ2m:f("lJ^dYd820PSK[A#'hN3J"O=WDV(NW,e-0,.'F(=u"5LBgpf.
%9Ni$"1"(rh1e_'bV1qPlOH`"6J^c)^"mds9>"K"=L(CH&!1lGZJ^c)^"d5UU'aP*Y81Pm-#a8<YE:!pF"[\=SdL)d>8Lku69Nm#%
%-'2.M2+h$a15AFO,4pbT<kuEoU_OcTKh*_'!0<7C_uLW$XiLMi6s>]t;j=X5`k!j<"UuYB=qO=\dY\;16DP>N3ep9W6KBP/"VRT+
%'bSB;8LolQJ[?V"6_kHb'I'[#UaTp\$AjpHT\ZB=Plud\0">@9O]ES^8m9'C7S#%=d#=)fK^"4_.u"W\Xb^4:dL)d>8LoN-,HVeP
%&nsd\OUu6G0Oggml'*Bf(#cgBU_VkM_P@p/'I0`9"q6\r+=Tod&L,7d/$]aRU_V8Y@F>M.[c=.ud7%KlMX8LtBgp)_,H]&:+DJg<
%(F6,-RDPa7OVfFILrKgb<^[nI81VROLIj!_Va@0o;>hnW"[%9fZsjk,dY^l@(hpr>+[B330qtHY0c%c".jAJjZm'fN9Nj00,gm%P
%@$J#"04E999[r*u'l]O;dL&[jUSJV1SJ+OE0_e+/.rt&!,->6X*%.jRC4rqq.8eNN-oO\$J]&sN74\t&8Lol:-`qpRO-3Nd.7.3h
%PQ]El>]'h0<Zih`=qMF1(hlEL%$O^7.8!bU-,`>)6KBh7"d5UU'iAk-Zm(760PL]RU8/MY6]7+.+>HJl&Yj*.Zm+XK1"(s#(a?*'
%]7id+OH`"6&`SL9.q7?R-EZ3pDOe'X#36>07EgA$U_PW!O-*J])Fp1%,,XF0dYaEQ7nG4m(aZ;?UbHLO>T+ihM!,sT=qO>7dL%6G
%OB0;?98KqV.8eNN=Jgq<<oej-LpR5c&gaXcXb`*?Udg&/.mgeaU_PWYNfd@qV1hJk@&-ZJMF`Ve<Zj7d=qSIr9Nm"C"O[X%ZNt7K
%T*uAVXak1\+KaQoFG."&oD9qM"WVOaBgmsj+ju5f5=;63KNMoti//*oXU$YuU_PWRKLm\'m#7'-6u&*r,-DB=<b)M6dY__"0PL\o
%/kT;%N$QgY[!ItD,"B$qBa)'uJ[?U:Bu6Y\8;`R2`0,A(Zm+rU,-=+.PdCLd`(;J@(aZ;?[@n.G"]>t(/!(YqXiTHa86US/"O`09
%`(2DQOi*t0&^3X7.j>N3P?(*D&L=KsoP*[N'Wrh".;7WO3!GHhE!eS?"?6R>XXK^Voba2#j'<X"&W'pU74*`H'Tj)^;d^/q_C;/,
%;)e`D0Fk"r(`e</3/bU%S0c!#SAjD#c=1`"Vb(h7V_L/bdhnT!P%&Bf8.EHcSAsJ$84nD23/ta'6Bj0o_J'XQ_J'ERi@G22E0^X)
%E#+()3/bU%S0bs"SAjD#EORWl,$I/7Vf3E(;aaM#:(^&P3/+[USAJD;:>m`1:>m`2Vf3E(;`IF%;]mq)Vf3E(;`IF%;oH'e3/+[e
%SAJDAS0C$>#c@rZ_f1LC=U\%;KneP#c=1`"B*iMa,Y$`,0XW=!,-3F%Vf3E(;]mLrVhfMR_'tnni"W[Z$E"/l@rMcf0fT?"U2UH!
%OT[WI'I!UVE#+()^mcXc.9qqM.<,/4S0C(A$r2A`1^^."4U.h"/1CTpJ]<P`.1jrti"XHMi"XIHE!kb_3/-r,3/-r@S-!_!i=sS$
%i"XIHE!kb_3(5/_i=sRIE!e'b"A[o<#u6'$.%J/"$r5bD!D_T9#,__u_JfkF8T9QcDAZ+\8RXR^OqQ[ecD,?9W,3AH&\T3;;`KiS
%.C&t@E/JJ2.%DKm1(:("*eRBVj9.FG;PS1<W,`SI&_\7Z;`KiT.H4rJ3(5+3i"U0F(et[>L>`hg$?8$/;PS1<fOGUj8I3:i&#VYt
%-,:t"`o%P+@rMdQ8T9QC*Pub&V_L/bdj-mV;PS2g8.*6`S0l'$SAsJ$+`eJq&YW87:>n#:VoYeg"K.%V49h^>!AFq[a8mUjVoXuL
%$E&]b/e"XC;A;k<8MN1n"99T)7?#N#3(8WCKi9sh_'pRa$,\3^-,D#c2$BhuU_'%?PG3"'B/)B"dhnU<TTDOkHEb'c3!E3TE!e5i
%7,Sb6BZAsE@Cfl,L$LHQ7HB?B.?GI%;n*m$;n/D%VarHRJlB0#K2\REMSL[XH%k2kiT7pqMF`W@.A?j\E!djZi=mGU$r2qE&;!hK
%$\[IQ84nD26l1R9'\Sfr3(:n.K2Z;q&5Mcd"lU.K;]&7AM.&A41gUG_&T&M?;hXTM_^RpM6?%g\IM>NXcQ@^:\/p9$KJLR*'X*/i
%S-!.fi=n!^`o%Pn0ast9?4=_#(qI]G'QD`&3/-Z13!CYoEB&[<0fT=`j\[u@!l>("KsMVd,3SA;3!GHXi"XJ2E!iC/i=o.*'MdU<
%#,d:=JM<Sq8T?_DZP]268J*q9ZQqM!/iSIA'M++u.:OJ6K2Y1X0V$!_$r.B\`8D=QEYqR1/-`#.Eas'G(uE,K$7&(!'JVt5_C;"o
%i"RoGL>`h$B8aST,%CmRO`q2L.0sh0i=mGA(et\7ehEW2=V@5K#36>c,%eZ"3(;'[@rR<-is<OO@S.\r;oF&G$E%hYK2Y09(et[0
%`o%OC*JEAcOVEOK3(nj%`,\KV:>m`.VheoQ.%DItF@'pRB/)A7BLN>)OW"sd;hT1Hi=n$@Nkm0]d_]r1B/)A7,fS[UcD#98n3(2>
%"d0MV'[EFl$Fm_sS-#iJ!DWZ,O2<@8;\Vt-,tWVc`97ba;rm]kJl<:kTqT=P@N^`I.7/tIS0A0/0Us?,c5<&q;T!I2\2Fbna:b4d
%MJ/)*S,t8YKi>LQ"K+Mc8)Y.:\qT)WXs_%7@Z_uGVa+,o:(^.Y0fVVY0a+C>;A;k,;;uO%,Y$`,Yr3;J;]m@e:4^nCS0Ea_+IiK^
%$#g7'@rR<=j=m)JJse$W+p+GlS0F\g+Ij(nVm2"U3_r=Q`!&L_@1#0-IM'm="J89g&$B9X76XF.=A^4kM^%TJhV!nfKBj=nF>UOS
%5**KY(3'b6R)K=n\pb5e'?#Ge>cghf73!E=!=OI6f.U#VB&URbrmU0LdICuh^D?eU4MH7V"$fdK^e>n%M`;UlntC+G['GKd40$S!
%p7Ga-8ASVpdiWgfr?AC&(ns(j1[Got=V);#Hg[>S<u)Cj&G,M=;sZpk6/ULDN;]IN<=E.S9'SX]IM's9&Z9^lAA<pn"96-IpM&H[
%8!:jb"8s7cB#%a&:f<QXWhhj`KAhE!0\F!1F55!Q@*^\n`l?om)50s*Us.:Ap1`!^C#7/,X66I[rhNF0&K-:$B[t6(i+-@i^]!X&
%Z5e9koB+0<rkS@Tfd9L,p'92;<'^E:5FgiN.[%'nS"9M/<gqP(Fn2k':f=N&iSalR3Nri_JQ=-gqZC!'jYg>s+3\0Fn-BtHbCO2e
%o0&Ss*uEYI\_`ONrIJd4h4(PF!>l@GkfMF_@dSN_e_'l:.YfS&Du7=T,V0b=VDMH1+4p[get0PA&)_Y'0(X;^#J1sH>phO;k&/LI
%To4WYg\8HEe)kRuTT@s@p"K_bn:X\`R2sq<r1;V\C4GA0n:a)*mU)PJmeJY7lp8kVSfcY.F?',bhe?ECA936.h+rES#6JsSQdjGB
%f7"Rm+#h?TS=[jer]ifp"`qE.lCNLG:;P7@9O@Gu0N-$DcX_2P0`i#T\_ZkOZVA[X+$`Lao8=[-",W/mM\i`pLA17q.#1b#%f`aM
%$-O!7HIXS8&$."]Fj$!34b$6p+/PV,#KIhYL&M^gqS6SN1eI")QcT9L**=c<lPhab^@qk9X>_M5Wpr6U0bu+sSe%%DXiP(DquC;Q
%jXr**cTl&dFM?uI2di$U.o_]19[BpFQT;9H?$H:Lbm;P_.Dh5'6CZ'?JLX05]B5)CB]];hh)H:e%;b/l@4[HO4i]d+k.kTf4GTd2
%5\Cq"?h&;DFMK[;!9Y.kmemWCk$VQ2HuA*LT]u9.6Y>5,cnKC/%isn!LuuKbUS:?!UBa80Yg(;;c0kXHQjbc#p%oaXc,!T]r4HUt
%!Ri$%30dHApQ6guF0L'pn+O^=1]C#Il>t>n8BntJpi$3+&#qWL<>O8sqn/]AGRuDZ?]o[>=EF+K\O^B%5\gj)k-(&T%bG[5OI]Za
%PM^rC*.Ze#H16L>@Qr0553r+<F!kG7fK1G0^&tZ$fL!/%roo3kE4(!)Dr^n8\1UCIn/X\hRfg?DF;ant$/6F&i"DWUGMk@aG%C0C
%hmj9Uk!67Yeg3L7+*)Fq%t!sSDEp,cB#;^=E.'tL_eorBN_hLdmf7:9.%d"Nrsn[U?W6I]rMP/7blPgNBu@-Gpe<CT*ZF;Q!9_/]
%>,fNUUH=&PPm<K)o3"Kq_W_6L><h^i@Q6kIH!.j4o*u>p5^T9]1b]mtcG=B.EXR:9$0*!F:k&u@`.?qg!.O%ndZ(U?j;^FEAV#2W
%6ri16LN:V-r*Y.$TAA@u%P6f$^(cViS`^=A*8$6Dp48G+5]_t2Y5%@rl@<sNY0$f2L\hV.3Ij36_S`,2"*>$GU@Oh7Rd!1]%^^'\
%D(4b#FSMTmN5r=99]r(V`VoUoeH+t)D6#%m(3Q92Hrj&o;(VJJlPtF9j@AoC>!H9TkhXTEIHBJ+>E4&bXN1HoaA/oseUVg.4$?9L
%Me?EZr(-P8qGP?:8ShRGVLe1)S>9u_;Z"9l#J)"?HW#n:hdPkG_sDRI4A8ZnQMh5FLY)<I=LEMfcTu3D3\%"XnM$#*qTD#(jP_"$
%>@85)+3JYtHQ\s\IJ88;(aet/A&*@"FA`_eSfXp`((9]eeR.QR+?]t@1NMYtf*9`GJ4%`M[GZo?Xm^s(a<#jS0C10Da",Q/!s@'%
%qcqtSS8]!W[[csP@8=J55<m%2Z44V4!:X,hU>>!fq!]0Bk_sXGq<.]oXR,SnnmGih#>#9K`GbcA+$S.,8.Y>,AM)N+F!(p\FKTgM
%l;r2)rGWi2'oh?ID#cd_q=h39H3a#YF#s-l^B=>k99qQtq]4<"ho?,;N.:aX.,,C?Hs\W\O4ljK\8Wek%(63:oJQ@=bjsK'Ii*XF
%:pg<(0gj#kEcptQ,!_*X.._q;pPfa26"_.<3W0]q"$/]'P7RLbSflDM\XbjodLZRk\1ctH#%ED%rpS0*s1n8UQi.pid".3f8rXXi
%,=/D4Ls,=g'+-ck^3IB8h?Fb6E4;6M!t=HLmas`\LlplsHsPG2#;H>(]kuSnQ?WrKYkP$.mf8#e;>0)@\:'1[dF%?jHP3[RacPSq
%d[+$E6B%W2oUYa^$?7kJd^uan</<W`LRnrl^d88EE>XDX^O4s+/9.l]0)P`;#9$VZr2/15L:@>r5I6V5THS2()BDYHJIQVr,'b5p
%q#H2[;3BT'9>:QLOt[\)jJr:lorS]c<R8I9\2u8']ALp7L^nOR:+dOh+lW\<;dT<eo<FDpG*u_:*#MQ1n'Z.J)'I>S0e[ACT7IXJ
%+$Oii""%LL`3td$i2qJO^dKO,!>I8Sb1Q(kUkmoL<rU)>(%o6hl;);[\:/E.$R^Mob<N50Dg,Q+)@'Ha+"drNf:a?m,V`i-H[P^G
%(EMGQ88dI[IXmPC"DDIffc#[/`88d_rV<R`\MlO19DDaV"#Jpq>pu,OP9ahkDoLnTq[Cu1?&Fh8OjAQ;%e+sp@X\N!`#csIIC8,l
%J0UX!I=n/C*:_NMH^34g*D$YIo4Q5>%.*2fOFp[p4p*o.5kB=t2HU00`4rp(J&ZNT]e)4c-Zec5n0>ASm`J#8!0DFl&.*a_R1DSE
%^o;dnH$KUIF9%^WIJa%Q8-_3>(E+FpkRU'jbNNg0km\?k!9!\&oGpXCks3;e*]A8h^l]Ht/+u0Q!0XjKXl,FqpsY?N`[$s`m7\*a
%3e/cQ2imsBU]Y"Ym&P(_4tqg.9g\gQoD@K7PIS<=95c8,E"`%iM49Q=i(:"1?YqS-5`+f0m7#8bPdm!jOU9]&+Ja+$e#r=+0`tA>
%96kHK%8_oIo@s$O%TJ;86+T5rjCc8#X>tSWBAcC`=>H5QB)kS@O:l]o\IW68J44\E*bdl4#;*M#$_)]!*A@l3bL[,="'h!p')(6g
%5mFoB!)9QeBPdiX3^EKi:U)685PdiLai/#q9F"ikQl^k]m'f;TC9rA>""WQ6oc5ca,B3h48mh/q1*$LU)k+6QTM,T($[HQ6g45S$
%5crXDF$H0S'AMC78>Z<<#rM/rP[VD^#1@UD!A>s2lL+4rRb2#o-]>Ea2=YGEr40;D!B/'/"2j*W4O>Fp$LNAtJ=CfYH%!\:D;\+s
%hm?m/")q^C2VY>9#"4se%cB8>P95n8OkFd9H9X)2\P.ekXnY/Z"8!)klM9NDFm9eB@@(cF:'<:bOPC'.`4O%6G5pYGn3dE?3a(YT
%jQQYqS(:b[5YhViQ_XW\mb5IJ%_06p55"?1SW2ld%WC,&[XgX4E,_(4;,6oNJ32Nq/<k8enY_DgU`]SMqqFW6e4K@YAcsS6!qdrC
%Pnejr"p1&)JU1o2.OtSN'S4Da5W)!'Z6E+^6D1V.:e_P#X9_d("=bo'eReq6.g"68JP(eb2+=1d5bQhi5UAjlRNbR"&ZDQ4<)Nk!
%bm79H"KEmPPn\daMEm_i5d_J\3Yd3\MEm_i5W)!':.:i4)1ag`JU/&^3Yd3l'nJC\JU1r3l;RoO<<VSd"R8til;RoOSIqf!&ZAbC
%W2'^KWsD[&"R;NiW2'^KWsD[&"R8ti.ObGl:'afs"R8ti.ObGl.KYkLJP,)65p_5X,X*o\U_je/#!*$T'SK*AN'\gZTfD;A_b`p5
%-jG$*,:O,Qs)J*:8V*g^%O<MQ'#jJ-:fL=@lCFWIUeoRA:fL=@MSHW1;+\#@I].iqBn0(<a^.)\JOZJW^em\^W-$=0<#U!\3Yd`K
%$:o.BAOiPZ,#\>3Kqsku;X%.S.Oc\j_#[0)!D;l/-n:JrQ0LSbYZ+M&8qI/38r?9`VbY$,;IE,V".;c=9Q:PTLSg5$;uC3a9dRcU
%d])/(;K.MB'-3W9MGDQ<6K+o>n.Z<^3^/fCTAi<.!*)pIMK_Q&Wh]n80-h^@U_"8*TOUr(0e,ro<0/R[8B##0*Mpo9;S@rcAOWTT
%)5YK5;S@rcAOWS)7B%n.WSSMh\eLue'rAJG9(aZ+FX]rU:+4Yh.+P@HeYO\EX!lLU:o\_/W@gW=?:ChG7B'T^W@gW=hAN0$'W$*j
%V7IA;H539f'W#P#8p)RTeJ+jk'W#Q%;I,/X[2GgP'W#Q%;I,/X2+=LIJPrlnV7IA;C5PnpMGc<#W@gW=g5Jp8MGc<#W@gW=R\EcJ
%U/Yu!W@gW=g-DVi7B)`M<0s=YD+:KW7B)`M<0s=Y9i7o`;5uOL<0s=Y9i7o`;6$KAeYOZoRo-1Y;6$KA<E>?a.8#j?V.pZ9FUaS8
%.8"_39%=WP\eLuU1J2d=9%=WPb)0([MGe"SWLb!(b)0([MGe"SW?+L-JkGR:J5WAeqshr[eYstIX!lMt.+P@HeYstI4/5cQU/\=j
%<2ZHiYG,!oU/^T?;Or\C]o#^YMGc<#WD5m]g5Jq#MGc<#WD5m]R\EcZU/Yu!WQp&m2+=L-U/XiaWh_%CRo-2]-rj31.Oe!?'W"EZ
%;RIC=8r?M(7B)HE<)$5iUaT64;6$E?<?!>d;O$HHPU[-,lCCePUaXco-rj00l;a&u.8'9Y-rj00l;a&u.8'7_8sL*eH=rHl.8'7_
%8p)UUodWQK4L)X;V,Ai#UWk2e<g9U58sL-fC5Po#7B,"";Ir:rR\Eba;6$KA<E>?abpZRmPc?0)Png-1MGe"SWS3;/AOWSeU/Y8m
%Whq1E<g9UY.+P.B<E#.I;O"118p)RTeRk$q.n\>+V94Zn2+=LMU/Yu!WNr6t9i7pl.+P@H<E>@LSPcDg-rj31.P"-A'W&ATV.qeY
%FX]r5#"j"e9%=WP\ctdWAsDRYPj285l5D)$X!gtKPj4f:WiRW!X!gtKPj08;<?<R=4/5c#TN&+h<*<(u=&H!!.+LDS<*<(uGG%o<
%;6!\pWiRW!4/5bX;6!\pWiRW!X!gtKPj4f:WiRW!X!gsh.+LCUWiRT`[j2'QapM'eT@%YYUc9*u1``Me$<2.Dhgn`Q7B.UsTW4ea
%<SmcgX%J7LE<E1J<Dp&Y`WS]1P+ks[U/ae4Wcpe1P+ks)CJ;5f.9tEjpP;ls`N/h](n2*@X;LA]<>pZn5?1$N8KfSg'sgMi=n0Zr
%BU':=lC1nM<_6.=DKci(8d\e9$<ng1X^6^`P/:8g$sP$3X^6^`P/:8'_H'6:X*9<#P/:8'_H'6:X&i`1Up/B2_,a-9X&i`1Up/CM
%YZ4TRlCD@aUp/B2@&p*-eZ5oS;V:9*@B63.eZ5oS;V:87fIA=dp!0dA)R.bmYZ4TRl;cId.;\\&YZ4TRl;cId.;\Z,Cm>3@p!0dA
%;V:87fIA=dodXdC'Xi=#fIA=dodXdC'Xi<&[Rpm2]eaJi'Xi;mCm>^CH53k\"1EMgfIA=dodXdC'Xi<&[Rpm2[2HDF$<oBAXcgP%
%9jt)uYZ70$X/)t";qNQKCt06.8d\e1)7E-E>I=K9-&&Ii_H'6:X#@jr8R\YX@&pB5<E%O".r<aJfIACfeJ,I7$<oBAXg5fED2,1`
%J?>9W<`rk3VQa&sOo8V=C:Mq=cNIH`KrlDMXg5fE9jt*(YZ70$X/rO*;qNQMCt06.apM@\)7IZp>;_,:ZGKX:@B6K6<L[EtXKY]'
%fIACfeJ,I7$<snU[`Sq]22/0<_H'B>X/rO*RpiA!YZ4WS.P#>c'Xl-d[V@U7Png`R'Xl-k><N(sapM?91Mi<k[X&XrapM?9"1H>Z
%><OcYPng`R'Xl-k><N<tAVI7X$+@t`><N<tAVI7X&%6LSgYY,0APTpsE([,I-_-@P/tAqS.%I<8(J`@&C(j@m1D3G;\d>9\C_]]"
%k(Qb,oYRTuHJqhK,N2T\@9eLbZq/u*;r,pL$)br3Ki?ffG83m#b1@$!kWc]dVb6Qt.E9#>MW%8hKl-*-S16*):6jsq;`pgL3)s-1
%S1;bkVon=Z;rnIB;fq-UKN%OBgOrM]K5VQ$Q.HDApkbJZMDrE\Von=Z;iGS1.E9#>Wk;Xt7:5%K3*"g33(<#I<B*E7j@qU&"%Fr6
%U/g5#S>)_;-Cgg>U_cern5VG:?g(KL78HE,SE`%H&Phl?2rPH8cjQcHeXLN8Ss>daWk=I5MM@"XE!c]#G2X-B<A0m-[aqKuMU%3N
%E2l!/45gnP4#c,_*:AJY4EiHKU?h"iS>,c<-Cg7S'+(SZl\&3uotm\SL;GCNqJF(ug?WUm.4u*:3(5X?9fPRGhG#sU"`YfXP'>(U
%Vdu.$$`@`sKMsaRiD`NX3)rm&S>s[=VrVriE!iFh+IoIR$`C4KhM"lkk(HYjH/V^s?8tq`.%HI)'2I*=Ki9it_Ps!:E/H$M$)_MF
%Ki@p6RrF7i9fOH(82sV5'2J(aDo*qe#$s8hP8@!eX0E#0qLs"-.Gj#X3)u.Y:<C%:_C=2PDo*s7AoGO8^&h%h7E=dq35lE`KN!hT
%i=q@0KN$\AI2,N)>LX%Y]$:($S>))?-Cfsn^u#Yo8V%EZVb6QtWRAFuWjGS^`<p/i:6jsq;l,2bWRAFuMQol8<E^f@P->Tpn`2Xf
%'FR)XS1;biVg>n`$E$uKGi9@'eP/$RQ`F+GeX&<ESDjU]$)]'2KN!hTi=p'd<B.t*IhPTIgmrDa]O!S:MJ3`!PrBCPp$aH$lEO>K
%eRM?6<F.>K_Tm0<:.7tFDga:_`HVtid0+\-:=[f$Vmm@di=oYh9fRitbV#FFhg+/p4`!(9<'@p6MS?N*37X5<.\*N:(JaWc[L9"#
%nM]>?PN+![@a#4XGX4:IPf0)2MWaD];uMTT_C8fO9fPQD?S@r751Q]QWo)f935q*U_PnS_KN$c80#FUVcSj_rURQ4[(NU<dnZ$rp
%'Glj*35m7_'i+:&38p)Q+1lKLm`:l:MGL8h:46J*$`E3H]a:UH]R&NNs)\oLn`F`+WHs<9WU:/-$E**J]a1O?SpK?p4hYf,edj-u
%Or?Ls:=4fE'2J5o_^_1nN^"(M8U)%H8]V49puP71<F.>K@[gj@:'$=D_Q!*Pi=mm/=5d,(6fD!_SZK]-np97/[n'gb`BW13;\F/g
%.=R6m:@[*uiDb*9E/NQ@Ki;542rU">S8a?I8LL#pkC+4BEP^Lb;qtW(i=u<6'i+Et>_Q)hMhG"kbtU1:h=`1c.W6`*ic;d@Vmq66
%KMu\bGi9@K2OeZC4bZTi`J/sX:6jE=V\n0A;`rbAVc\Oe_C<J_iDb(ii=u/[X)P)O?9#n>PS6gbG1A(4P&'-3;g_ucE2l-@X)Nr7
%^a>R\n%]=/pf;:LWUbAo'OtH/<F.&C@b07d;rnIB;j%N4iD_tRE2oM'E2oL93$fHe$)]&R8&?]-2QLesYKj1f.Or5_.g![^@2D]/
%9K(iD(U?ap`DtS!V\n9D;`oF@:A(f1_C8f[9fRheQb.4:StU*qDLrNsEQR!h;tUQQ;f"X7_C:=%i=l:p0:_="\dG>\k(HZR7Y,MN
%U/!\ecIXP9_TE`%V^1V^;n[]`KMrM@KN%R9_C8gb9fU,?aU+kIH#:DIeiAY-b!0`mqZp.1Ki>C*iKV9(iDcqQE(Va^'2HqICD0In
%)@<;Yh1S]i[L/oLo>2pbVr*2,;A)%LPl/B`37XQL=5ajA,WF[]2h#kcWEQrRWd>Mb_C>=%Hf5Z5RQ'2)]tJBB0e]&+GS<j&gC'o)
%(($o(m=eJ$UJ3^JmnbuDD_IW\`=&U%B,(]MBO/+SVeD1%$)b@3i@^XpVr8tmi[8W\.Gg"K3)rToS76FR:,*RkVeQNk;fm!8Ki>Ct
%_C<&YDSdj68+4;Dg/WIX'TF\'i=tZ4GMs7<3!8+R5@>."d7ATt:=05$&5MoQ[0ii,"*WW;5;WpHnH=$o'WjQCiKOHii=qh2GN"e!
%X'Rd)(H;t$F\D3u3(;TF>r^C5`4^,Ip8>NA8j:'!Vt_J<i=p]EGMs8'1O%fBUo$sJ-#(R0V^)RpiKRlr:cLmn`*G>kX27Rj`<F0f
%Vs*HV$)d!*]EtLskX[[5+"s.aNtY:=-PB2)`s\g1j+UG)M1eh#n\Q_8*@IAW:FMa5Nu(RA`s\ekbR(34j+UG)n\Q`^DZ\m^KUm(^
%5$g3KT1CqA+"s/D$#RPYqLl^7rq&oE`RlN-P#s!"WfIfgnX"12.6[rB3)q%RSEa0c'i+E0kCcdH_jbVF5$g2pk8jr-kXW>nVeA</
%$)dP*38kRRb?*X:5B%921$40g4F.Z9FaNpa3(9<;0:_<VorE%hL@C[O.]O245>!6*7O4M([hhfigC'qE*=A]H`GEDjH@+V8'Ln4(
%9#==_`RlN-P)kQT;\F8j.A$GaS75@ZKi@Yf_Ppj>Y/2Vg%ph67V03MIop';-:A&bU$)b;+DSdjTRI.j?`k68Jji8j@@R74)Vg.W)
%3)tkQ:9gJGKN#:3_PnS_Ki:.C$E&3o$)cjRS8bLb?8rZ_Z+h*OWhFBhI`e.!$D4p<Vmm@di=oYh9fQ.R(JaMh]PrbB^mf;C<\Ku;
%=g/];oq\o$VeYnAWLh.Ri=n*)-CeOcgk8UbH/TGjkU)g_QkN6bgq@[,?]e>J`QPLmVeD"TKi?gsHPK<K>J(<@Gk,0#e\d;alMJan
%3;*7'-CeOe'2J(,Y/2VoFYB9E!jW-1pr';O.:*B0S<DuD(J`@sH4s'DC%]?BmqZOo'J7<`i=qV[0:_$oDSdjZgeBb.CFG_<2VY9O
%MFQWaE2qJc3$ea:(J`Kn#cFn/7D^L"g@)nXhP]"Z;_U_$KMrM-_C:=%i=sVR$)]'6Ki@>pm(t1X7`$V-\Tm(t"J'L(@\Ib@2d83!
%PQ\[=ME@_$35n,=KMrM)_C9qt(JaK:Cr.WX3T1[eh@$6kLi1'YM)jN/\!]uN,uH%[iX3C+Vmu3f_C>KK.\,dr\-f,Z(($m`R[\8R
%)tH]_"e1rG35tQ?'i&b0^Bpgjd."n$[X'jj'RL@[E/K&K-_.3U$`=irKMt"e$`@*jCr.X@2W7UeTl>n6Vc>]VM\f-nDrlXN]uRMf
%VrSaVi=m@N0:_=RgFA`Q)mBXHfM_4U.DD7?E(XGR-_+Yi$`>8_$`BB/2W9n=,2nc^`a(PM.F\[%,hkf*.J3CYiDcpc3$jtV&l*H>
%=bTe&\R'tg;+:2*@B1:PVg'PXE/H1#-Cj'Nm=eIIDo*qE^'U_6f/V_'0?ki6P,mf";mh@s.Cfa[35mas'2HXYN.b,G7r?*lM)jN/
%;$J\DlCYWpV^1DX;fY?YE(Zj"35nqN.\)Yu,b1%%'2J4X@M)@,-k];*l@i0Lm$hsO[?M>"YnYrG;_3;3iKSiGroRW>F,aL6.sT5(
%Ya*.MfLiG]"C&tTk[5oEQ>Nj+\Kfaad1*PLYna]VbemKCp97Q-4D\$##e'#YTIXhI^Wm:sl3<^f[ORW!Xh$I`$<tnZg;?rJ_qne%
%P!*X#R"qd\hI*CI4`",=#[<S\@4Rqs#$[?4_H%t0fW&0t[K8]*^fIguggDWN;/WU<2h]spX)`L<MP%Dp<kK:NCfRV<[UO32XV_IS
%X)\BJ'qMXSfW&12Cdg;-%CW!(pC:ET(=^6&1_AJN/)#sMYSA`c"5&JQYea?s/Djhc\r?ou<PMfiCrIL#_cH]^!4Lknm'%3V<Hm)q
%>TmoPa3Pd7_Z)UJMD&oK>BT9)%CW"EkRLg>hf]N7d:RQWXlL-XCrIJ.^fL*Jh-hhfPjYc@4HUe'<A"edPq.Ben=i=T'n%KSfSYuV
%)f3Is`5>XJceMnYqFGP/Q0e)dfLe'W%^qP3H\\^qM.!A^4D\#TLTO1*@&m0fCaH">@&m0lfW#Vr>F"2VWuc>d<@Jut.`K;+V1c(<
%KH4l/MMJ<+M.!A^4D_tMg0gsZ6J./[I=nX=gL)Og7Bfc@%^t@Mhd@ru"s13&`PYaTC94X>^Mj[kiZ6l`X&;&r-0H>c<qLgt?n9sD
%Dm0s`!=)iV,(>6JpjjB#`L)F_Gk;2En[ga4MKZKN[Z[kIXlSklYZ4XOrdNKlmT9TrQ0_q[P!*V]EX5mSMV2C<P!*V]EX5m7lsVEa
%2V>%j&@Rb+K<9Ch)f3Kfd)/m144pR"PUgRhlG:A=>\Z4MWioYXCt7-##?u16h-_ai3S93D%pQ=:=CE]q"<20rF*Fig\NF]IJnfq?
%aq_co4hSX44gr4.4m$.QEd?<;A.Mm5:[E"J0?eTdJZ\-?]tmaR8)I`*Y/DBii[_aZ<os%Z(&uRs<qKbU@&n<pfSZQM*k(?*B8*J1
%m:!&ea*-*m)/k/0QlJ';MD5WGnUbY_Q,FYY`H1dX<PK_.CrOT&_,dq8p97OU<aT:9IZ%:[MC7k$WubSTX7%\Xf]r@?%CT_fK<9AQ
%=4iC3h8<8u5W78P:YZ:]nQIp)8sYMY[\C&$#$^V3os!!@2)B&;/,'L]ipuAC/,nc;>OginYSFb.!Gp<RbZEGSL@,Fc<ULF,.X(ks
%Pq.BeYe,j%X)\BJ<UWk&Ya#>YfLk-5[Z[#1X`t$[[OP>Y>HoQ]_c@D/@&n;OYZ84rCfRVT[d),'%CR`f!*aI+'YmcIisiG[R"MO9
%9cgb&0A'[5Ed?;p?ghDR/ts;$,r#X/ELZ3#.u?=>MC\H+>B/Qb@4V?A$=!1!>[].>7BdM&F+^U)+l?\.EeU_4fDcSoiZ<T%Xk;"i
%YSCA*)f3LM_Zj>Mn).TSEd?;pYmn/$d2o`*9sVT9N,>e!\O+r+c)2;b.[PpmfXGn*<UXq0Ya&H<#@$_LnZZ#ChH&9dDnlQ]Z)-Ae
%/&%GkCfN(u>;>8KX)^5QMCE@oXi_Bq<g"AFfW*^J[OQJ,>KJDS@&n<pfLd3X#e&aXZbfak\R&^FW$;,@YSBfd*OasqCp4XU[LK\)
%1@8L#L,[bBLMsCsru),Hn^;6X'j=EqCfTm7[Z[-<?n8CR)f13S4+OHcNnRkkM)j4G."d;WqPUL#Q,FYY-"dq-<YBPZ'jG)sCaGb\
%[Z[kIXa3F@^fG,:#I%4=4`&*\^;3jOV&X<j;J^uf=SOGOQ%.Nep0fHsh,@YH+6_+[kM$V(PKO(("7&3^_Z`,5fbHV6fP&:/6gWGX
%F<k4MiM'!4fD!ss8<@3m"q"q+irs`tH.7bj$<Kh[*)i!]*QSj\IS4llj=r@g5lmLK@[#WF>\d%-3Dm4W$uKsr+S6%.gUR8hqN.I?
%,iD*j?D[PX?_RjN,D=;]p9+b`d_>p%b-S9OQqP@\7H2*U[."FC'EFUqQm21,K63h$NpT`=AiAKDE44<%HV'TKOtY$hk/=EW5Q.*D
%?skLC;3IiSa3O;p4eZ./>6b'UQBo"&&%NK*.WO1\Hd[oHmdO389W%ENjUK\_(X:$cq;g#hZu8Rt,!k6=FY/$Wjcu%59G#Y'D\BC@
%%mV9-M_<dbbl7pD/2%0:-qH($'@??1aus=E83_k\i7&Jn94#+5oah)pI<a`3H-3XMr5_D-0gVpE>Q4!/)m2lR(YtpWl9HR:=V;mW
%OCdOJ`M6r^<$hHnP"e.?3aBS'noDB.2rPT$$QPIrKVhPSl,EKD?dp_S1FisTi#14Xh["^FdLA>tr:@X)`FrliWho@(Kk*:9]5/nD
%0!rG-L2TUO055r:FKYO^'Kg'ZSnuR,\EKk0A38Nf(t?G4O!,*./;8eq?='-ML/V^;Bd(JB'/AiYg=KfS4:g+-iD%5!=+!)>B[L6i
%.Z_k7>j`Ke!*$$A3.MSZcSNEs?AAR_FM]AVYnMQ!!e#&WlUt]3S4\9.iQ?_FrHNh\Y="?e6f(kVPd6'17[2PZ7HqZl@\Jr(h%.9Q
%-']nDD)?kP1u8bcon:03nlFcC6d#g"Xjdg&^<-qkiJ.(Z@7ZdH5$U*n8e^]QKUHKBKLY=n9e"(me(o'ZS_E.K+\,tA%sXPsn)rhY
%!_^N;'D'DMZ[Fi+C7N#'^i\fgi>t:5qqS.:0WA8+=e*ll'bM`*7\RT@4D6>*qj8L;:\J*4aTqS?AeS2dr)B'B,UHf9m>Y+kFQI29
%Z,]T@1ZTJ4V1db"!Naoc5Op&'kBI:M>YJ`"B:-igg:.)P[%[.e]HS$A`hS/f\&f.O=!C`U#Y_B]Rbf`1m9b79;;Zi<Js`2KAjnL[
%_P"?AOA;b75_6skLD>K'.H,Raoj9g/M7I!%Iis]`gd*)]8j<cpe*$^V^gJ\qa9<aJ,%SRLnt`A0U\M-r`E;Lqm]Yu:gAUCRi=Bn&
%\ILpWH*YsOO.YL%pBU=m002]GWom0nMgXe97[HN7kCsFC^9<QJbDU]H!*B;2`/e<nr/9n>JK8m5=8CH*o'-./\!S\D/.=J(B[56r
%5EIPK<LGkCA3BC8bNjf8JBN8qm"jU4"L@bZ!hb:7h'X9:9H5.8^FUH;[^D'F'oBE_7@0ZrIg<oZM*mkf'/a3M4\^?sn&lY"BYO;t
%-ZJ=7b_3ka5cYFE`(pH,!j>&hi,N;@(H]J:#DO%5/FsO0]CuGlo%1pun>I;NC&-8V?[*WP`7r&?26P^%_Yr?go+qb>J,O#ZEG.ea
%MDS/Z6-ma/I=he7Cd=_khj_6^C^8&uS)>6g/nhsk77o<m)Kjl%"hUjj9FSa:7Pj:@YOV]aQ_4ZO^S!3AM?>N2]M?f'*>Su\Q#&(H
%`&j)$HO,ZqI(R]0ZcUnmQ'_"G*6Y2Fl,TNXh9_R@%C=heW@6+1A6f9s%%;VO!WN2)M9u-[@jNjAJ0_@@^LYTR5=A:<Eg27(K>KX$
%2C/n.bEVX(hlM.lENh#^6$1<8o7N`kKF[t;9a=7+>>Fh6=X(PYRhO]naYTV]Kr.U(4r`Zi$(\rC'G+TKCtFmC&fupCPh-WHD2pqQ
%Y?%qBWSR,hngoC2J6`7+`j1\U<[85eAH4(J-K;MrIU2"dQV]$ZiqgKL6=^GIrqk!upYn*(K3>EcI5%cDZ_f4p>h%:-rX>0+eb>N2
%eC/Ui=pH^R))1>e/V:`sV#HQpeB0ZUSEf1g4'qt$J7S-;.W\8n;fY<FK>)j+.;Yl4`[dYh;`XJTd8U+0?687t%`oqp!<_6nffG@)
%!?;B/&HRobiW=8jGrU'06/jBO<L+_IK7o_F"lQCg+h5A^a$N9(13C(qQ_J6Un(c`65c[X5s023&j%[6BRI6_/>d2G&./?<PR^XJh
%SlZ(l#:`A798-;<PnupX1.55bb*<QeF`W%T=koUA[m5Fq<d02P7E%IL#35?q*^rHpfS[B&G:YZeOEBG\:d=!XY.&&!(XJi%(Hora
%gGcc%X[1.^#YSLJ-Lu].f1M#'nYhtqo3Hj#d.#(r_S<*QC@S%]nW]eAoFqVgfOqs#Ika7;jkG:5+HWs#WJDf&$JP<h>^2V4)[m?N
%@7!48V;MeP1?#L:7BpOaj!54b`tEif]I1<bq*QJjaa`k*_4\Nj2W89F)6)[BrU9]FAGu+KKa$8SOKW16$V_<(Cm[:\chUJtKr<uf
%SOD'pre;-=In5Q3N0fXc9"[8C_XJAPhZ>>?QInh4NC@1;h?m$6I%oUXPJi"A@2H5P>S4aS['G),P\f.^S0].:4jW:TeGEp,<D`GF
%0V&HW>[O?.E+.hIJgl>C3aU-^pjAQ]A]Y,h('V+4e9$WS=W-?J^$!L6\o8jlTUsIe&(DJ"<ne---aH*4pkfE)aR]M)o2]6HpL;$r
%7R)4,BDYA@0T#-"Oppd9Ka\H=85aR+JR+Q%AbfN6(8^Z,4XBp2I]+go%rNhjo),.CORc<k=<Q9phP#\>2A7Aig:dlT?Jd2N96pP&
%\,Ks54>T$5ne6OdKB4>M7I3:bN(*KklTi6R!8N$2G$1RR&O;'i0/:K0-!IPSbUT8W@E*O5)f"q#iEh(A2ZA=2duYkAke^+cP,<:B
%ho<u=$+,X)jt)[Md`l]p-W@#`eD&'cfA$$f0:5Ma<Ig+YGCp]V.EJ3'MqAHUfH1fO(dX@q3<_2`!ReadRN%W3B3(Z`4?9\^"lJ.p
%q"*S%I.X4-h^CU*+2*S:n,XInXVuue17+.CMZ%!+>_hWhFoH.DdgnauHX?(Rp!KIr"VPOT$/6T8X='B%fMI[ua5Q-ck)PG;L#gQe
%5lt;pp29TFd?*Vc/0Jj`0nYu'#2[If-ZUQ&1LtplHSPj;f_`"h6EPk&/3VmCMi,$MNGp%ugPMg=O#fIsen(L_S6+uoWP$(CHe30)
%2=O5tp;(0s#X7*/eE.K;"jDUg`dBbPp0"S^bg"F'6!kC_5*EHQ-fE@0L1*lo%LQ2Q8>jdH:kB+C=o*Zn_Y4tUs+WiJ'*uq$%Ll`>
%fo?!@f]O3U+?]>lg-,i3ihD5r$JlWl);s%4`S`'2%O&ZpDsD7Gr<H+5BJ:/@gAZm#7GbZ'Q+DDIWUMQBk.hP.]V>Eeb>[3=#ERT`
%h7C8*ru4$Xnq?*u]61KYYXcR:L.)hr1-#G-#>&efIiOQbn*r]Y6lo+a\U&8QJNq(n"T7Lm?P7T4FP/lD]/fIq$i,t7+[Nani/-;D
%X"!j&oEq5I.n%Dd4U)nKVI=uL:r_KsGt;k83LOk?m*#5B@m7CFe=i,<fS0=iGL5&NQHsfpYRo]&/7c=:K)NMa!?$\nn\l<LB-R8J
%P;^NbO3n&^*21a8)J_PE."@5+n"'ALH`V_aBAGLF)VU.K$#[EEXG4g06ppUd](hMn#ao/oJ\0$d=UsoTS;^NIG-cEf'DH)u>kZcD
%@SCVT$[T#e$Ta:.!oDhnBI..9PjgFB<dE>eaJHqLUAOWQE:d6^)jOe_kJ!M#6&Tu`6p\!h+=-@u.)W>ZkWML@4'146N+OPIG6g01
%_TRO/:p-U3>!l(>8lF#'JDfD31gmo",!YE2@iK`BVI%oB]PKrf[f+Vr3T[t"QgO7pYFqCFXsFue;HKP*fRGm[O"B6chskb<7fUII
%MgL'+>0HR;CBXU`JuH@tmRLbS_fc,bYXln*1FphJ,`\T'`?2`M8bol1n1$WB^,?WQ7lqLhqf9PC0,M:<\.^7!I*ZHNr3CZF$`(+V
%r_M0KTco9tDIS58K/-68iHQcIbUr:Ech7e7'7:1ZO+)0Q?Q-%BKNmiPRIWs-F;.M'=P^:scoV$MBNO'.Mk$4Ph#@M\jHRqu7Z0H6
%K%4o/^0)SNQM9WnfA?&b't$<dVden`S*\D%qUN>d[PtPo6NMft2F_GiYBe5O/<;_R(%;_>LqN6'aX/OZ,'7OQ)8V;^9ec<g^M8^O
%?#h@]gXq0MX8kUrRu$<npC`S^5_7jPrdDC@W!.)?juC'c%CAtA@9lGiR1bM@frG6?J^?id_o<1YKe6#N-c;Fcml;-d_E1P3CiF=i
%@$;'We#j\1k<9\HoHb(Yq^.QZGkCg;EW*SUk$fejhT6T,`Rq+je5(><U$jCX9+T1uMa&L>J^o,o;Lqo\&DkoS8oM[7Iun%2>u:0d
%=-)0Aj+a&FXPcB0o77%*T-O#;1Rh4W1ggMN7N`!:Pu&ht.C(>ng;;oRRnoW`q;b[_Qol8COs^dtP%SW?nuU(`:D>@,nuOE:T!c,i
%=e@j&egF._p$p/1cQHASVc8XQnt^_V9:iF,E62%%UJ^TH>0\Eic>_F!Vo42Jah_asnt`..9:d,:l'!JPc!0b'S)BGW#;l8;8[[cN
%4DXW3o92B,acgJe/U:5I\g>Zd/&`f1L:?6s#L]]qZO`RHag5$?4DXW3PIK-k:Yt%^H1Jgjag79eH1J+Va\uY$H#hoC:S-3Tm`ADq
%V+[DE(]3:Ha/H)]PAe:+4QV!JP%T2jnuU(`ce?7s=dr3YrU!sUB5LN:XN`+gB!+":p13<KB2<qko'EV=Gt'7RCBWmDgCj$.qS7l?
%Do%!.)rICH+lB$NSo7JEcaTiSaLA+7k?EH>^%3i@(%NsAjnKT"XaCM24Pul>So7K4k?HFUnh&o-3ke$WSo6p$/'k]'Vrq9'o^p/4
%-u[29i2lm:DaB#nNGhZt^pfEsEdS7O3PL4FP)+$RRcdoE:H,uk5LT'RB[+'X/NB)Gj',%eMYIsMY8lGOAtTOhU/+j7Hjb7ZD1%81
%4Pum1ODb.Xjj(>cG%9]>e/\$2CA*%5RQ]Q&k)aLY0@.,kZ'B7D_`cnOB$[rbg%-e1%f$ktHbKYjN/_aQF3(hhg$pY/p3_de6bZ"6
%So7K4k?HFUnh"VMHjfrGNGh[tODduLcaQ.MHKSM*+6E;6p%EckH98hEk:_.q7D1kAJeRu]^'/-t42(ln/)R)XNc.e`Li6/ZNGh[4
%a1&!K^pg8/j'1#Kk?FU-[IZ!8jnKV(U+>,q?4l(hhMuMODo]?N'>8V("Y\!?\)=WfQ#@89S\Guen+/_aaLA,$o.=_NHjd<p4l;uG
%caT"'j'1"Qnh"VMHjbE!`jamSl1l+m8K6Q==`<>)0L'is7EqEB_8B?g7<IL;n,<'_n1BU<F!MmM=:nUEXMf*+o9gp@m#g3u>TU2I
%7Th'(,h2b6kEQ:!,^+4$Ji+aR"?H)X1`L#C8s"*$5/rjc@1W8sT]%[C(;UC,krb):^V=TWk%1c*&MA=$ZI*(m_uBL('-FZ4BH:i,
%-,^l'R7QE#N!et1>*=GJ(a\l`7Qjrn:%PPX3tcs6#V@PU(-rM^#pYH[XTr43/q;0R=N!KQ#<bD!Ym@)jId`+1MfY!1o_l?Cb)DU1
%L<']%L/MM-G]T9I`f66c7C(ajYm=!?4nHmX7Bf)!RjWOK_0<$??2HYRA,CD5Ruo(M/:qo?:Gfrn6h]HDG,;CgWt\]n(OT8T33p%)
%i$[H--->l<$:0-UMPFq([5g=V6trq>,>l3M4P>0l>PkoS8sDaaq#kYf11e5Y7:^5!D?kBmk?U!K/E2c?&BZ!3)hM1h$/LU+%HmT(
%f0<oZ/:JP,*G+BVilYMuN(OD_#J_*s.mA"LW8J/ucs<VcPhC\K(KhgJM)1&t;bDS&ApYMDNeoXJK.gh`(iB!)hYMO^D2n*u%i4VX
%]AAB(/&;Ti-3bhGF&mmSo\CTo4/fIj[n'DYf82S9E%`h^E1=qT&k&2gp;=nA4kRHbeXYj0#g*5[lB^sQHa!r2V\3YRDY)1%]b?#6
%kDM&pTGAu1[O4!_]$e`p7@\KjSOg*mG:XP\;e=>t?a&g[[4@4PW>)fV'Op1O*o&5g.!lYO#IIM0g&*idBdJe3F1$4ddRrAO_RA$2
%,1B-q*ME%]EKs:G,g?!*?-*A[#Gqo<;G3Q/[0K1=5`PNc<50XG80%;gB3MFUTP>XFC(P0AoWW%m5/G)aoaie6KUY917BH/7UX<j'
%Qls*/LQ@#td1#^62,S0%,fME2,[1C+U>Q\!.Etmg(7ckDQk=0GYV:C8cD\/abb3bU?20;l"&gJ<:OOS$XT[`'QF(Z3#aahk64%>L
%dCr(O8<t(;D1<Qj"F(W3Gjj_'9]#-7!qFil*44+2&Pd"A]G'bB#HsW(h,+H,IsHODF_0Fh'Yk4"1\J3>%]MO%mOa$Tq/>?KK,oZ8
%$@QLC+p_L#KeK2@m!24;FlVB=PB4JJ7_nES5[A\X*WHS5KXT9191!FC9dQJjlDB`k3d#40BW\kF,d^n6<"`B@DCl0s>;qh#eukK7
%6L37*-)!6`VNOb;G#LtG/\AD9[%?)Q&mEb%.LE4m\!D]u[[TlUle>,[Tf)8hP0c76;b:Z)];['_hVD?J>4ZV]$*AP5Q%[l*>=q6J
%hb>Dj2=RK+coQDe8SB]gW?ehlhGb,&'5oH/Xc$g<TsaEfP0j&MCIr3!]W!1+:7d`(f#h2i6L3`--)!3fVNT<;H##ubmC]DD[!pk2
%&m@Y@/IAPS2jK'Id[NiqlfkMtTf)M?P0gdd;b:Y>]sT,m^>;g%>%;J#$*CPCQA!iCRn?$5m7en#2>>[b:qM'Q8SIM)W?ekMhHCOq
%K5W4GXi!)_K\#-e91%t79dQJjq50>%\pS9bBPkJ_,d]bm<"`r@D_29tdl3PFf'9T)d!C+U8SHA_W?eighc(4l^Mb\1XlD@*K\#aa
%8j_k?XX0\7rN%9OcJMS6C@?'m$*F(`Q%[lkRn?$5!6umao`1nQd(4a+8SEOf[3W+Si)C=m05rBIXW+d9K[p[(8j_hL:*j>Y<<#t1
%JnmqkD8E1s[(bHt&mAda.1*+430f0J)OsDdlOC!CTf!(QP0gdm;b:Zi_6kPqrnp`g>(^cD$*?S)QA!g5S4Z-6&R%aC?H7Nt-"1MM
%.]Y[,PuSm'aso8HAX2O[=ljY'XR\cZXR\>N<Y$d^/:Od$AX2O[=f"/Z<iM32X&Q">.b1N(8rZeQV)hUWWD8^YC8B#3-a'JN;Oo;<
%e3K:!W`*Jol;Uo_7]NOfSLTQLAQ<=3U,Z/=r/b3L<U-a0P2[rfA`97><E:PDPuUGPastB0Z:],:XAU6B<iJiZ,p0FlZ:^*U=hOBb
%.]ZOHaso8HAX1<8ZK1lKW[q9V!``9HS1:SH?'R:^\u*V"c)J!@F/l;_g/V9=3iTF]LWuj#+CG%'<>Jp[VogL>WNuBn?W:2+X'Luj
%W`*L!4'#>sn"!BgalBY,ZM;kLWiT)C<E;n)ZRW$*?'WCDEN6*<SLTQnC/nh"=ZKJ_WD8`/?c#6s'jTgl?BlgZ<hRTu?.GgpP.,[;
%A^P,FWNs)apnGpJnG>qF<KgKq@?gG^b+]pTWleelWNp1<^T+RnO(qU)eJ,!gC>)Zj2*"Z;9p$p+-E#"dGuJ;)*3$5YG,hX4G?#DJ
%9R0W=btaNMkHV(nC5Ptn2/T@pRT<Eh9p$p+VHoHeP>c%4BB<)qW1Q"K<kWZV(2Y+`.Z:adX"(1,].0l5b.B.((8o<T`Mp.VL@%rC
%Cf2jbXEnfbXEm=8XEs96/=(X@.SENE=(TppWNp9m<E\mK#-+bnS19FKM+*\0;l%S$n&qHJWopP-Wb8-MWi&d,@@$D_b*'n/:h@K%
%@oHriT=1`)jAH/]/6Phn<>Lq9<L$RU8<kLK?'Wt?E)C0MWUMQBk5VVa=hL"pQ,QtAWj;Dg0<-S#"/j;Afr;:R+"jRpRNkfJhr7(i
%<Kg?meJ,!gC3$=*B&$CO<E#^9_J%k%PuX#HAP'tDZM:hc.SFg2Y0%*SnaF/T^JgCtC+(W@[C?MN=G1M-!g`8GFNa/#/E#KVYX#4\
%86CBKI_2h7H]q0+:hhC0.+JV39%en%+E.M$Jl97cTMLDNKa$QJKa""9[g<Gbm=b`*%YY'a-9,E7VsJ<<!f7)t!a9)M_?*K'gk5j<
%*:grJ:7^0n"Yf&jK`rHimtCq8kI1d+b3aldhf-_D=MT32S$7DVrAJ(MT4[JD"Uo=dJj(r;'c(ma!%0<G[hfgEgC"D3*=<1!LGrWB
%0Dm.J-s%fJi*G5n"VPmn!d[1Y@6qH;YX%WQ',GNeU_ag=6.`0AJ8`7R/E#C9$Oc%7El*E+]s%Lk_a%=#WYZHC[so,.PSsi9q?CLG
%(A*%C+tVs"bR"Z'l<ArG4gk\*U(l8o]'6V9!W^u0<RTTLX`BbOV)a:#B9H:Wr9#VFj\5,tp7k2_3B`cTnP.Hcc$5gX^>h`WPW7fj
%2GUt(l1<ifE+OL8aIa*`%eKKC!ii=:.+1OW1XiaTYirbI@4O[s7t)Z`<S;\[Y$AMHWjEMn)#bPEB%=<kZ@dWmh8HG9a!ITRF6(`$
%AFC06T2"/Lr!6T7?IkRZ[5Uohm);]WMIp_B7f"ur.iQ%W(ttUg`)Yf1+uRM:7lELC.iE/\9]QO;6f-PpM(M`h$5csL5)-_=bZ07.
%F;4"`7n,oYQ,W^d/\dO-0`:5bboA_YT8L"!Vb-1-^T*Pp]WPGi*`!TeD5>^70,Om>:MNr6YO:0;F-aE^%^,&c-b\i^`L,]B:%6m:
%17dGF7W(X7kQf1M.XCFEE5=3G1p=EN_!d$=G,/2EFgNsM4K2WtC(q"&-)g/F?k]]l-TG/_.rIJJ^">TKn.cu7K#RSXPcl+:06hA`
%cI,ePQe3HHAZOP:K3EiG3CG?Gm4`W#"1_D0$@!Ng)SSOFU-5FUTKA(r?OtTXog5YY[_H]5>STp5gL&-Y/\FY_nc!!0p%t`E8%+[B
%h!aYpg$;;?#8at,@pi7>/&<0']Jg^EpE4gsiB9?aEcQEICrqWp9*6,ZSc,($Yd@1s*1EW`=GbuSn+qO#=+>*KfHoRH%b<D<l!Q+'
%RLXN:@+2qq`\ed<AR*^#Xr5iEYZ&P!-1$k99a\LE>gpPn`\fKPAmA9PXr5jPYZ&P!4m\DQ9b=pK>Z8R9):p.=;oU[hm$_og'K]l2
%;oMKL=(SXP`\h&gP]9D74(VYq`i^32Up3k<2/V]EED7FbAmA?V:)V[EYuAY"II*DB9cuN/>Z8^=):p.>CW85km$)Ka,WfRB;ou0[
%f4;0c`\j=RP]9DG]4P;Hb"`i+Up<q=26H56ED7uGAR&0W:)V[EZ>7H;^$Lu'9e\Y?>Z8kL):p.?;oVh^m$)Ka1qR@);pA&Tf4;3d
%`\lT=RW2%]4(VYqc;#8/UpE_62=9apEE,,:):ug59?&jZXCYWMcW\>JnnQL\<rFWgf,=dXENMN7):oc0b6M7(^bW&M#V>">K4)s6
%efgD9Y-eP4N,(S.2<.l(^bW'8#rL[GRpaLNegHh?Xu-Q`N,+u92<.l@@*6"1/!r)p2%.uoCYaRkj'''&b.-.Y=>R*;%&Su!*J5g$
%>0C<u\CNI'19NJDVMo:rK/M\(gL/16ei/sOXu-^?N,+u:.H=Ut@*6"14'4;A2%QRCCYaUlj')=fc+)=hQnkg%&>kD%*J?<1=pnc]
%\CO$719NJHer4BMKIPqb)e$n!ejiguXu-ihN,+u;.H=S^@El=59:.K;2A;sHCYaY$j'"NQb.-"uQnkg%'\84Y*JGs&>"`;H\COS\
%19NJLVMqQ]"j=F,<EM#ZFVQIf>$&NqDNn4PY2]j9`dNlTEB03%L!$o%(`19Q!`@`+,]SAX/s*u)@Q6#p$\WJ]%*lIOGYa.J&L&o^
%#lGfS4,CZ]_OEiE<Y4*n_V%1B-4o#8_Abanp(-$X_-'!U`XgAg_4*WAQ4M:1_:q,kD@_<OKD0ZtSK>GiK6MSH4W_8RKD0TJY^nXn
%Gq(Q%$e5<H=tEPZ,\hlq/X3.:ij:t>((/Ll=]uq?M^<(g+>&\M`F?2>MA?KF@Mr>l6Lths=F_1.cN<Xi0=5ACoIL6iZQ'A!Y!@2S
%"gYHr<1ViOFEW#U=c"G;`@K5++?1m6hQ-j#ZP'4]8h;m4"0L5s8BpR)Bm'YHZRaCjjo9g@B!KE.OI-1QZVXsDLs#j6=Y)*3A7^=j
%/=)M(K!IX:(5p99.@D!8r>X`)gLPJ!5qr'qlY>N(iOdt\o5]p0$q&c2R5l5jba#5uJ=;tF!N5Vr5-nkaE.B30-XH=b3(dPUH;UAj
%%L7.iZE@MtUP$3G*:f4>98<V=Lh@,m<)8:%[KA4"2,f847"ss<oAo2P(tZ]uZ`Sk5;-p)7noZpB&A=JVjTgL,#qFQc$8FNY#<>DL
%24:ki!JCf'XHU-2!PZqRbsa@.#@=84I`:I;^ro=#MqL03Z?uD&1g7qP8M'Ugqj_FWG`Wd<)u&F_+>NGB2i@pO`SgR*D=Vp2^rUAh
%2oCFL3&jiErdKjuO&(.r>LbK!_L@/I=`*WA`gG)iJPP:T^8'6B6,FG<l?@8p3'bl>pk`bYE.E4[Qg_Mdf>E0Q:$sjZ5q>.7c6dJY
%g`?s0C@aH'gE7:';^EA1o6WID8Su0$5H)O+phmC?ClT#rks!.OjhlZ3#f+p2o0FujP5FjRV@NnKd?;r3jSC"($uXu\ffo&_dlP%\
%Hlj2kbF9j=LBI0_NZ4Nror#Ri5A09eL<kP3T^)Iu0l036p)OXsp,K_VN$X9p*Z1p25;8q(l2;3*R@fTB"IEQ=da.1YE?LlYW"@/S
%intd#c&-g40K&(8j$>Uf@,EAZh.LbZ@)@.spMDf"a5+;Xhg7="a%R[7hm3oJr$cY_8Wsej5I0B3$lqO[nSsaFn<t03JJV5@]lu5a
%@'+sql/0<!n$n]1q+6bj`.:BDrC3i:b[]dc0uD*B+XERTYKi.>Ek"5@DeBfrbPq)dGsWKFDEMJ=ZRNfn)L4d:2HP\:2!rH]+)21'
%JC*+mqrX^`"u=)QZX20!6=TEpn+5g/%^LI-QIXM(JtA@2cHR<f^h32Sf&"UoNX)C_IQ)J,"'a;Z\[rkMjJ.iU6W8WR7&KSRRsKd#
%"qe4qYC0+@a$lm&qo&lPC(\j';Rc:n#90)iN,HfmM4ekeS*1P?prE[ufPNIKe0]cr\S(ZDqA@=2\!9C`:.>iOCUJO^"EfT`\f[JB
%H=..ZZJ7pF0\eGVMDuXq@#r\`SX(hY>b8]rDKUjsJ@G2knUm4Q48?lU07FL2#JS*&@o/@"o(Yf.;TFTG@+8C>bD>2r3\L#_35FNj
%*7CRY&P)R"ph6Mh)K@G;Fjmof:d18IlKfI0!7[.co(bT_MR%ook6dNg3_/[t:_ldV&R>,a,id9?iYJDq<=eZ$RR\?j35;eHKLF0X
%)r$H?<9?^-oF;a4jT@90Ze*Ku.W`ue+$FL$80$i*JDtD]&otCj/kd<!#J)OnQ2Vim6!'Ah]-;WlMo>/D90U7ZO0IDH?Z`RQEV>MS
%TYPe[_Q--=&sC1chL[aZ85.;_IF^Jp-#l$qoKf3O0*r\*d;Ls"#sNQLF8h]c,U<D\W3KqrM$(i(r8^!98^J@nK&:Jar2@e/6Pl3O
%_:;CLhCZ)nd%aK3$&LqLd$kC).7)_R$f9`P.Nu&(p&=P-8u@)`S+-I*<e=Yn)9ok6=+Wo]B;V<_TJ0#>5^E,uc4^&7G9-KhOI2)h
%_VMQ-KHr$t-VS0*`dD0ei!])/ccKJPBNuLgZd)'O54IXo5'C]qR<eFqb'5U).PilTUpN6E9_A52pfn=b1S(,`le>=9`rq`\r,eLJ
%7q\\Ro94DgK?qbs$Y#EOS89MtLgi?oa_*pM7X9QR/\()\pZDHtS0i8i1m,Jt7.rMP3HU\1hIIf8*YYft7-$&\%45P6$"korRnJFc
%'&Ha-gId-r&qQm41R'j['\T*fj4a`R43t<mR<B1g/u%%tMIdTcllqHq9X+sCFqMRY(]:k#?5Kp5@WGbmXc'-#^L5V]`4CJ#pBt/1
%^o@c%FYTXDi6t,2\qj#2fudkaO`2'KTn.m'O7;9DTll#INX0GG@b6FW1r=T/KU*4q0d:t^L`H7[A8`9H]j!mRIpj*Ik<J"JAT&<G
%]i2lITgk-mr+Gr;*8!Zt/eO4;K_L:Y/L$]P`9n-J\jL^\#k&06qEb=f&C(quc@6N)/`=?gk$-&VMcam0l0VQB[t+#b1#?BV>KD#H
%k\e.C]1$8>OR!Z\h'/_#7!/;0cRkm%"Y@,iOPBnt>JP39q/$/E/`O3-bdNZ6-6ENV!YK`D3!T`Xrt)b+GjgF'q&qYFLjU;Wm6g+6
%i(P4Lru#Z*LR&J(4$I?W$e!hV?hli9"H$oV>`K$1Klc=l0lk)A\R:*G0*]K$j5YaMET-+@5<(84)]&sCo/7-9j<:sV#TOleK88+:
%+g?1[mLGr"K6MKX^(-:+KD0KWNXhbTK6MBU?4NZmKCa*P/e4S1K6)#$rXH,\6f?hZbo9"8#&i;TD&Ygj#&i2Q%3$Vq`B;huO*(hb
%]#>oMJq7gU34Ejo>;42O(uuHmE=7N2"XDg^!H,aK[U=>a4M!*]g_PicMhe_E,MW.3[Wl%]0WZiCeb4nmD8DmR*6`-?nX-a8R*p-]
%6e^sI7bd<#[,$0t>DWTl'gJ=m"QS0-1nC`O_q@X9S#sW(g$W6'gDp]7]ApG<="os-$Dt--2$juG0X5jJ>;2-j(rmC%@gbc2"bYIe
%0l4Z;[U95B4Ff"#^D75bMasrSK@g%R[=:OH$6,_H&1DA[RLpram$\M7D!p"DTWl7J7\I!-CIXu$d;',@_IfthJ\m/F)1fZ%Y:Tka
%)o#tf$CeeB":?*`[Laj'!h0cMC]p4>-u9+B6D1P+Cdt)%.;VJHYVBr%J\pQR)1fX/Yo/,0-F(eu$6-rr":CX;AcrG[`jQF,C`8cT
%-u9lm&L_H:gHqR;JS[fKd"uR.TWjPp$\?0,Z5J51L9_\J_PXUj":?*kAcrI1b@Uka)pG`%-u:Z.&L_`XRh7&b2VUQkYi0CjTWmZs
%7\I!UC^Yg2k-GqV_?R@bJ\ib@/HcD"d:NLgS'e)9MWIhs!ej?_1BN8iBeogEc"UAf'Ost/&L_HnRh@-D/FtZde[?#;Cfm/=-u<(V
%&L_I#gJ"9EH#6$DY^pX\TWj8i$\?/a[MaY5B!rS._M5KN":CXPV?@5HgL^QqS(k@_-u<jl&L_I9Rh7&bFPB-TYh<k_TWmBl7\GPi
%qp3#6^25#ikkm=`:tPb,,>d"q[tR(U,M\5C@5H\t5[d%8-3AlqEAIZMNH$`UL!=UA#S]2<bm5"Aait)*2Tfk[:tR<X,uE5J2^;/O
%1q/0(@H6.%5V_E3)1fX/\h+$lS*4Ge$6AAC":CX_[Laj'W1+AICoWs:-u?!>6D,0:h2FTR#.l=8_BulH":?1:AcrI1m:HJ.)t(-G
%-u?Ja&L_b6Rh7&b^=tuIYQ8Z3TWe`@8t`C#D[V-5B"T"4_M5]@J\n:s/HcD$o4A+4S+AND'K5/l+]-ge2^M;QW&H#!N*1'TJO5.*
%.=o@5]d\NL`k<r,$Cgd%":?1EAcrI1ppL_^Cuh&t.!4U@&L_JZgHqR;WGb8!d'7LYTWktF$\?/!^DVU>-GLFL_FD9l":CXsAcrG[
%ral9?S,Ti--uAgN&L_JpRh7'CAGUX-p2'ld6D1OpE(6M))/r3@YT[rnJ\n;")1fZE^_q^?k.iPO$697^":CV$B*8P\"h,$kC_iNQ
%-u9`j&L_H6gd7[<EH"C?Y^(1WTWiud1P%k?_ARpA7`$$o,.d'SpZDHtL;N%k-=$6hiNf']Qc"An$6Yem3sXg(ib<AZ0K;9)/fk2Z
%-Gf(ji5-p^IKl=7!#Nq1$`:\Lfl&Zs3/P0J.CU+6a"m'R`#WR%IjO%`'\nh$44\>*o'Ju]r<r.=UtlNWgTbc\&oL4Nm9drC,Lpr[
%gAZe<4-47`K'c[C*Jh*JWHKQ:*WY1Vn'+RR$YR/`8T0('><(`hcZfgE]Yt!0UA8\U]N[AObmekq!7=cu3?7FPrF@hj&;)gkF7TA#
%LVJ1cr"oCpO8o$*qSV4hqu9i?id^XYQN-ICrqV'>pOE+Us7GL7OMKcRpOE+=5Q-Xmro8M)?iTc]5Q'>%rQ?;_cThC'j$3Q"ZK\"\
%GPS-Ys7GJ=rQG62TE"he+91mRs7?8E#S,8brr2Bdh1,1Vr8I,D+6[;Km/~>
%AI9_PrivateDataEnd
